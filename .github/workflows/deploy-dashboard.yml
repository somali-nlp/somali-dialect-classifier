name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'data/metrics/**'
      - 'data/reports/**'
      - 'dashboard/**'
      - '.github/workflows/deploy-dashboard.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install streamlit pandas plotly numpy

      - name: Build static dashboard
        run: |
          # Create professional static HTML dashboard for GitHub Pages

          mkdir -p _site

          # Create professional index.html
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta name="description" content="Somali Dialect Classifier - A comprehensive NLP data pipeline for low-resource Somali language processing">
              <title>Somali Dialect Classifier | NLP Data Pipeline</title>

              <!-- Google Fonts -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">

              <!-- Chart.js for data visualizations -->
              <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>

              <style>
                  :root {
                      --color-primary: #2563eb;
                      --color-primary-dark: #1e40af;
                      --color-success: #059669;
                      --color-warning: #d97706;
                      --color-danger: #dc2626;
                      --color-bg: #f9fafb;
                      --color-bg-elevated: #ffffff;
                      --color-text: #111827;
                      --color-text-secondary: #6b7280;
                      --color-border: #e5e7eb;
                      --color-border-light: #f3f4f6;
                      --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
                      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
                      --radius: 8px;
                      --font-body: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      --font-mono: 'Fira Code', 'Consolas', monospace;
                  }

                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }

                  body {
                      font-family: var(--font-body);
                      font-size: 16px;
                      line-height: 1.6;
                      color: var(--color-text);
                      background: var(--color-bg);
                      -webkit-font-smoothing: antialiased;
                      -moz-osx-font-smoothing: grayscale;
                  }

                  .header {
                      background: var(--color-bg-elevated);
                      border-bottom: 1px solid var(--color-border);
                      padding: 2rem 1.5rem;
                      box-shadow: var(--shadow-sm);
                  }

                  .header-content {
                      max-width: 1200px;
                      margin: 0 auto;
                  }

                  .header h1 {
                      font-size: 2rem;
                      font-weight: 700;
                      color: var(--color-text);
                      margin-bottom: 0.5rem;
                      letter-spacing: -0.025em;
                  }

                  .header .subtitle {
                      font-size: 1.125rem;
                      color: var(--color-text-secondary);
                      font-weight: 400;
                  }

                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem 1.5rem;
                  }

                  section {
                      margin-bottom: 3rem;
                  }

                  h2 {
                      font-size: 1.5rem;
                      font-weight: 700;
                      color: var(--color-text);
                      margin-bottom: 1rem;
                      padding-bottom: 0.5rem;
                      border-bottom: 2px solid var(--color-primary);
                  }

                  h3 {
                      font-size: 1.25rem;
                      font-weight: 600;
                      color: var(--color-text);
                      margin-bottom: 0.75rem;
                  }

                  p {
                      margin-bottom: 1rem;
                      color: var(--color-text-secondary);
                  }

                  .metrics-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 1.5rem;
                      margin: 2rem 0;
                  }

                  .metric-card {
                      background: var(--color-bg-elevated);
                      border: 1px solid var(--color-border);
                      border-radius: var(--radius);
                      padding: 1.5rem;
                      box-shadow: var(--shadow-sm);
                      transition: all 0.2s ease;
                  }

                  .metric-card:hover {
                      box-shadow: var(--shadow-md);
                      transform: translateY(-2px);
                  }

                  .metric-label {
                      font-size: 0.875rem;
                      font-weight: 600;
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: var(--color-text-secondary);
                      margin-bottom: 0.5rem;
                  }

                  .metric-value {
                      font-size: 2.25rem;
                      font-weight: 700;
                      color: var(--color-primary);
                      font-family: var(--font-mono);
                  }

                  .status-indicator {
                      display: inline-flex;
                      align-items: center;
                      padding: 0.25rem 0.75rem;
                      border-radius: 9999px;
                      font-size: 0.875rem;
                      font-weight: 600;
                  }

                  .status-success {
                      background-color: #d1fae5;
                      color: var(--color-success);
                  }

                  .status-warning {
                      background-color: #fef3c7;
                      color: var(--color-warning);
                  }

                  .status-info {
                      background-color: #dbeafe;
                      color: var(--color-primary);
                  }

                  .card {
                      background: var(--color-bg-elevated);
                      border: 1px solid var(--color-border);
                      border-radius: var(--radius);
                      padding: 2rem;
                      margin-bottom: 1.5rem;
                      box-shadow: var(--shadow-sm);
                  }

                  .feature-list {
                      list-style: none;
                      display: grid;
                      gap: 1rem;
                      margin-top: 1rem;
                  }

                  .feature-list li {
                      padding-left: 1.5rem;
                      position: relative;
                      color: var(--color-text-secondary);
                  }

                  .feature-list li::before {
                      content: "";
                      position: absolute;
                      left: 0;
                      top: 0.5rem;
                      width: 6px;
                      height: 6px;
                      background: var(--color-primary);
                      border-radius: 50%;
                  }

                  .btn {
                      display: inline-block;
                      padding: 0.75rem 1.5rem;
                      font-weight: 600;
                      text-decoration: none;
                      border-radius: var(--radius);
                      transition: all 0.2s ease;
                      font-size: 1rem;
                  }

                  .btn-primary {
                      background: var(--color-primary);
                      color: white;
                  }

                  .btn-primary:hover {
                      background: var(--color-primary-dark);
                      box-shadow: var(--shadow-md);
                  }

                  .btn-secondary {
                      background: var(--color-bg-elevated);
                      color: var(--color-primary);
                      border: 1px solid var(--color-primary);
                  }

                  .btn-secondary:hover {
                      background: var(--color-primary);
                      color: white;
                  }

                  .action-buttons {
                      display: flex;
                      gap: 1rem;
                      margin-top: 1.5rem;
                      flex-wrap: wrap;
                  }

                  .report-list {
                      display: grid;
                      gap: 0.75rem;
                      margin-top: 1rem;
                  }

                  .report-link {
                      display: flex;
                      align-items: center;
                      padding: 1rem 1.25rem;
                      background: var(--color-bg);
                      border: 1px solid var(--color-border);
                      border-left: 4px solid var(--color-primary);
                      border-radius: var(--radius);
                      text-decoration: none;
                      color: var(--color-text);
                      font-weight: 500;
                      transition: all 0.2s ease;
                  }

                  .report-link:hover {
                      background: var(--color-bg-elevated);
                      border-left-color: var(--color-primary-dark);
                      transform: translateX(4px);
                      box-shadow: var(--shadow-sm);
                  }

                  .loading-spinner {
                      border: 3px solid var(--color-border-light);
                      border-top: 3px solid var(--color-primary);
                      border-radius: 50%;
                      width: 40px;
                      height: 40px;
                      animation: spin 1s linear infinite;
                      margin: 2rem auto;
                  }

                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }

                  .loading-container {
                      text-align: center;
                      padding: 3rem 1rem;
                      color: var(--color-text-secondary);
                  }

                  .footer {
                      margin-top: 4rem;
                      padding: 2rem 0;
                      border-top: 1px solid var(--color-border);
                      text-align: center;
                      color: var(--color-text-secondary);
                      font-size: 0.875rem;
                  }

                  /* Chart containers */
                  .charts-section {
                      display: grid;
                      grid-template-columns: 1fr;
                      gap: 2rem;
                      margin: 2rem 0;
                  }

                  .chart-container {
                      background: var(--color-bg-elevated);
                      border: 1px solid var(--color-border);
                      border-radius: var(--radius);
                      padding: 2rem;
                      box-shadow: var(--shadow-sm);
                      min-height: 400px;
                  }

                  .chart-title {
                      font-size: 1.125rem;
                      font-weight: 600;
                      color: var(--color-text);
                      margin-bottom: 1.5rem;
                      padding-bottom: 0.5rem;
                      border-bottom: 1px solid var(--color-border-light);
                  }

                  .chart-canvas {
                      position: relative;
                      height: 350px;
                      width: 100%;
                  }

                  .charts-grid-2 {
                      display: grid;
                      grid-template-columns: repeat(2, 1fr);
                      gap: 2rem;
                      margin: 2rem 0;
                  }

                  .empty-state {
                      text-align: center;
                      padding: 4rem 2rem;
                      color: var(--color-text-secondary);
                  }

                  .empty-state-icon {
                      font-size: 3rem;
                      margin-bottom: 1rem;
                      opacity: 0.5;
                  }

                  .empty-state-title {
                      font-size: 1.25rem;
                      font-weight: 600;
                      color: var(--color-text);
                      margin-bottom: 0.5rem;
                  }

                  .empty-state-text {
                      color: var(--color-text-secondary);
                      margin-bottom: 0;
                  }

                  .collapsible {
                      cursor: pointer;
                      user-select: none;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .collapsible::after {
                      content: '\u25BC';
                      font-size: 0.75rem;
                      color: var(--color-text-secondary);
                      transition: transform 0.2s ease;
                  }

                  .collapsible.collapsed::after {
                      transform: rotate(-90deg);
                  }

                  .collapsible-content {
                      max-height: 1000px;
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  .collapsible-content.collapsed {
                      max-height: 0;
                  }

                  @media (max-width: 768px) {
                      .header h1 {
                          font-size: 1.5rem;
                      }

                      .header .subtitle {
                          font-size: 1rem;
                      }

                      .metrics-grid {
                          grid-template-columns: 1fr;
                      }

                      .metric-value {
                          font-size: 1.875rem;
                      }

                      .action-buttons {
                          flex-direction: column;
                      }

                      .btn {
                          width: 100%;
                          text-align: center;
                      }

                      .charts-grid-2 {
                          grid-template-columns: 1fr;
                      }

                      .chart-container {
                          padding: 1.5rem;
                          min-height: 350px;
                      }

                      .chart-canvas {
                          height: 300px;
                      }
                  }
              </style>
          </head>
          <body>
              <header class="header">
                  <div class="header-content">
                      <h1>Somali Dialect Classifier</h1>
                      <p class="subtitle">NLP Data Pipeline for Somali Language Processing</p>
                  </div>
              </header>

              <main class="container">
                  <!-- Key Metrics Section -->
                  <section id="metrics">
                      <h2>Pipeline Status</h2>
                      <div class="metrics-grid" id="metricsGrid">
                          <div class="loading-container">
                              <div class="loading-spinner"></div>
                              <p>Loading pipeline metrics...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Data Visualizations Section -->
                  <section id="visualizations">
                      <h2>Data Visualizations</h2>

                      <!-- Records Over Time Chart -->
                      <div class="charts-section">
                          <div class="chart-container">
                              <div class="chart-title">Records Processed Over Time</div>
                              <div class="chart-canvas">
                                  <canvas id="recordsOverTimeChart"></canvas>
                              </div>
                          </div>
                      </div>

                      <!-- Source Comparison and Success Rate Charts -->
                      <div class="charts-grid-2">
                          <div class="chart-container">
                              <div class="chart-title">Source Comparison</div>
                              <div class="chart-canvas">
                                  <canvas id="sourceComparisonChart"></canvas>
                              </div>
                          </div>
                          <div class="chart-container">
                              <div class="chart-title">Success Rate Trends</div>
                              <div class="chart-canvas">
                                  <canvas id="successRateChart"></canvas>
                              </div>
                          </div>
                      </div>

                      <!-- Data Quality Chart -->
                      <div class="charts-section">
                          <div class="chart-container">
                              <div class="chart-title">Data Quality Metrics</div>
                              <div class="chart-canvas">
                                  <canvas id="dataQualityChart"></canvas>
                              </div>
                          </div>
                      </div>
                  </section>

                  <!-- About Section (Collapsible) -->
                  <section id="about">
                      <h2 class="collapsible" onclick="toggleCollapsible(this)">About This Project</h2>
                      <div class="collapsible-content">
                          <div class="card">
                              <p>
                                  The Somali Dialect Classifier addresses a critical challenge in natural language processing:
                                  <strong>data scarcity for low-resource languages</strong>. Somali, spoken by over 16 million people,
                                  lacks the extensive datasets available for languages like English or Spanish.
                              </p>
                              <p>
                                  This project builds a comprehensive, automated data pipeline that aggregates high-quality Somali
                                  text data from multiple sources for dialect classification and language modeling.
                              </p>

                              <h3>Key Features</h3>
                              <ul class="feature-list">
                                  <li><strong>Multi-Source Data Collection:</strong> Wikipedia, BBC Somali, HuggingFace, and more</li>
                                  <li><strong>Quality-First Architecture:</strong> Comprehensive filtering and language detection</li>
                                  <li><strong>Intelligent Deduplication:</strong> MinHash LSH for duplicate detection</li>
                                  <li><strong>Production-Grade Pipeline:</strong> Bronze-silver-gold architecture</li>
                              </ul>
                          </div>
                      </div>
                  </section>

                  <section id="reports">
                      <h2>Quality Reports</h2>
                      <div class="report-list" id="reportList">
                          <div class="loading-container">
                              <p>Loading quality reports...</p>
                          </div>
                      </div>
                  </section>

                  <section id="actions">
                      <h2>Get Started</h2>
                      <div class="card">
                          <p>Explore the codebase, run the pipeline locally, or contribute to advancing Somali NLP research.</p>
                          <div class="action-buttons">
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier" class="btn btn-primary">
                                  View on GitHub
                              </a>
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme" class="btn btn-secondary">
                                  Documentation
                              </a>
                          </div>
                      </div>
                  </section>
              </main>

              <footer class="footer">
                  <p>Somali Dialect Classifier | Open Source NLP Research Project</p>
              </footer>

              <script>
                  // Configuration
                  const MAX_RETRIES = 3;
                  let metricsRetries = 0;
                  let allMetricsData = [];
                  let chartsInitialized = false;

                  // Chart instances (for cleanup)
                  let recordsChart, sourceChart, successChart, qualityChart;

                  // Format large numbers with commas
                  function formatNumber(num) {
                      return num.toLocaleString('en-US');
                  }

                  // Format dates consistently
                  function formatDate(isoString) {
                      try {
                          const date = new Date(isoString);
                          return date.toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric'
                          });
                      } catch (e) {
                          return 'N/A';
                      }
                  }

                  // Format date for charts (shorter)
                  function formatChartDate(isoString) {
                      try {
                          const date = new Date(isoString);
                          return date.toLocaleDateString('en-US', {
                              month: 'short',
                              day: 'numeric'
                          });
                      } catch (e) {
                          return 'N/A';
                      }
                  }

                  // Collapsible sections
                  function toggleCollapsible(element) {
                      const content = element.nextElementSibling;
                      element.classList.toggle('collapsed');
                      content.classList.toggle('collapsed');
                  }

                  // Load all detailed metrics for charts
                  async function loadAllMetrics() {
                      try {
                          const response = await fetch('data/all_metrics.json');
                          if (!response.ok) {
                              throw new Error('Failed to load detailed metrics');
                          }
                          allMetricsData = await response.json();
                          return allMetricsData;
                      } catch (error) {
                          console.error('Error loading detailed metrics:', error);
                          return [];
                      }
                  }

                  // Load and display pipeline metrics
                  async function loadMetrics() {
                      try {
                          const response = await fetch('data/summary.json');

                          if (!response.ok) {
                              throw new Error('Failed to load metrics');
                          }

                          const data = await response.json();
                          const grid = document.getElementById('metricsGrid');

                          if (!grid) return;

                          const totalRecords = data.total_records || 0;
                          const successRate = data.avg_success_rate || 0;
                          const sources = data.sources || [];
                          const lastUpdate = data.last_update;
                          const totalRuns = data.total_runs || 0;

                          // Determine success indicator color
                          const successColor = successRate >= 0.9 ? 'success' : successRate >= 0.7 ? 'warning' : 'info';

                          grid.innerHTML = `
                              <div class="metric-card">
                                  <div class="metric-label">Total Records</div>
                                  <div class="metric-value">${formatNumber(totalRecords)}</div>
                                  <div class="status-indicator status-success">Active</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Success Rate</div>
                                  <div class="metric-value">${(successRate * 100).toFixed(1)}%</div>
                                  <div class="status-indicator status-${successColor}">Monitored</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Data Sources</div>
                                  <div class="metric-value">${sources.length}</div>
                                  <div class="status-indicator status-success">Integrated</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Last Updated</div>
                                  <div class="metric-value" style="font-size: 1.25rem;">${formatDate(lastUpdate)}</div>
                                  <div class="status-indicator status-info">${totalRuns} Runs</div>
                              </div>
                          `;

                          // Load detailed metrics and render charts
                          const detailedMetrics = await loadAllMetrics();
                          if (detailedMetrics && detailedMetrics.length > 0) {
                              renderCharts(detailedMetrics);
                          } else {
                              showEmptyChartStates();
                          }

                      } catch (error) {
                          console.error('Error loading metrics:', error);

                          metricsRetries++;
                          if (metricsRetries < MAX_RETRIES) {
                              setTimeout(loadMetrics, 1000);
                          } else {
                              const grid = document.getElementById('metricsGrid');
                              if (grid) {
                                  grid.innerHTML = `
                                      <div class="loading-container">
                                          <p>No metrics available yet. Run the pipeline to generate data.</p>
                                          <div class="status-indicator status-warning">Awaiting Data</div>
                                      </div>
                                  `;
                              }
                              showEmptyChartStates();
                          }
                      }
                  }

                  // Show empty states for charts
                  function showEmptyChartStates() {
                      const chartContainers = ['recordsOverTimeChart', 'sourceComparisonChart', 'successRateChart', 'dataQualityChart'];
                      chartContainers.forEach(chartId => {
                          const canvas = document.getElementById(chartId);
                          if (canvas) {
                              const container = canvas.closest('.chart-container');
                              if (container) {
                                  canvas.style.display = 'none';
                                  container.innerHTML += `
                                      <div class="empty-state">
                                          <div class="empty-state-icon">📊</div>
                                          <div class="empty-state-title">Waiting for Pipeline Data</div>
                                          <div class="empty-state-text">Charts will populate automatically when pipeline runs are available.</div>
                                      </div>
                                  `;
                              }
                          }
                      });
                  }

                  // Render all charts
                  function renderCharts(metrics) {
                      if (!metrics || metrics.length === 0) {
                          showEmptyChartStates();
                          return;
                      }

                      // Sort metrics by timestamp
                      metrics.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

                      renderRecordsOverTimeChart(metrics);
                      renderSourceComparisonChart(metrics);
                      renderSuccessRateChart(metrics);
                      renderDataQualityChart(metrics);
                  }

                  // 1. Records Over Time Line Chart
                  function renderRecordsOverTimeChart(metrics) {
                      const ctx = document.getElementById('recordsOverTimeChart');
                      if (!ctx) return;

                      // Group by source
                      const sourceData = {};
                      metrics.forEach(m => {
                          if (!sourceData[m.source]) {
                              sourceData[m.source] = [];
                          }
                          sourceData[m.source].push({
                              timestamp: m.timestamp,
                              records: m.records_written
                          });
                      });

                      // Color palette
                      const colors = {
                          'Wikipedia-Somali': '#3b82f6',
                          'BBC-Somali': '#ef4444',
                          'HuggingFace-MC4': '#10b981',
                          'Sprakbanken': '#f59e0b'
                      };

                      const datasets = Object.keys(sourceData).map(source => ({
                          label: source,
                          data: sourceData[source].map(d => ({
                              x: new Date(d.timestamp),
                              y: d.records
                          })),
                          borderColor: colors[source] || '#6b7280',
                          backgroundColor: colors[source] || '#6b7280',
                          borderWidth: 2,
                          tension: 0.4,
                          fill: false
                      }));

                      if (recordsChart) recordsChart.destroy();
                      recordsChart = new Chart(ctx, {
                          type: 'line',
                          data: { datasets },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: true,
                                      position: 'top'
                                  },
                                  tooltip: {
                                      mode: 'index',
                                      intersect: false,
                                      callbacks: {
                                          label: function(context) {
                                              return context.dataset.label + ': ' + formatNumber(context.parsed.y) + ' records';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      type: 'time',
                                      time: {
                                          unit: 'day',
                                          displayFormats: {
                                              day: 'MMM dd'
                                          }
                                      },
                                      title: {
                                          display: true,
                                          text: 'Date'
                                      }
                                  },
                                  y: {
                                      beginAtZero: true,
                                      title: {
                                          display: true,
                                          text: 'Records Processed'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return formatNumber(value);
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 2. Source Comparison Bar Chart
                  function renderSourceComparisonChart(metrics) {
                      const ctx = document.getElementById('sourceComparisonChart');
                      if (!ctx) return;

                      // Aggregate records by source
                      const sourceRecords = {};
                      metrics.forEach(m => {
                          if (!sourceRecords[m.source]) {
                              sourceRecords[m.source] = 0;
                          }
                          sourceRecords[m.source] += m.records_written;
                      });

                      const sources = Object.keys(sourceRecords);
                      const records = sources.map(s => sourceRecords[s]);

                      const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899'];

                      if (sourceChart) sourceChart.destroy();
                      sourceChart = new Chart(ctx, {
                          type: 'bar',
                          data: {
                              labels: sources,
                              datasets: [{
                                  label: 'Total Records',
                                  data: records,
                                  backgroundColor: colors.slice(0, sources.length),
                                  borderRadius: 6,
                                  borderWidth: 0
                              }]
                          },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: false
                                  },
                                  tooltip: {
                                      callbacks: {
                                          label: function(context) {
                                              return formatNumber(context.parsed.y) + ' records';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  y: {
                                      beginAtZero: true,
                                      ticks: {
                                          callback: function(value) {
                                              return formatNumber(value);
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 3. Success Rate Trends Line Chart
                  function renderSuccessRateChart(metrics) {
                      const ctx = document.getElementById('successRateChart');
                      if (!ctx) return;

                      // Group by source
                      const sourceData = {};
                      metrics.forEach(m => {
                          if (!sourceData[m.source]) {
                              sourceData[m.source] = [];
                          }
                          sourceData[m.source].push({
                              timestamp: m.timestamp,
                              success_rate: (m.success_rate || 0) * 100
                          });
                      });

                      const colors = {
                          'Wikipedia-Somali': '#3b82f6',
                          'BBC-Somali': '#ef4444',
                          'HuggingFace-MC4': '#10b981',
                          'Sprakbanken': '#f59e0b'
                      };

                      const datasets = Object.keys(sourceData).map(source => ({
                          label: source,
                          data: sourceData[source].map(d => ({
                              x: new Date(d.timestamp),
                              y: d.success_rate
                          })),
                          borderColor: colors[source] || '#6b7280',
                          backgroundColor: colors[source] || '#6b7280',
                          borderWidth: 2,
                          tension: 0.4,
                          fill: false
                      }));

                      if (successChart) successChart.destroy();
                      successChart = new Chart(ctx, {
                          type: 'line',
                          data: { datasets },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: true,
                                      position: 'top'
                                  },
                                  tooltip: {
                                      mode: 'index',
                                      intersect: false,
                                      callbacks: {
                                          label: function(context) {
                                              return context.dataset.label + ': ' + context.parsed.y.toFixed(1) + '%';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      type: 'time',
                                      time: {
                                          unit: 'day',
                                          displayFormats: {
                                              day: 'MMM dd'
                                          }
                                      },
                                      title: {
                                          display: true,
                                          text: 'Date'
                                      }
                                  },
                                  y: {
                                      min: 0,
                                      max: 100,
                                      title: {
                                          display: true,
                                          text: 'Success Rate (%)'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return value + '%';
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 4. Data Quality Horizontal Bar Chart
                  function renderDataQualityChart(metrics) {
                      const ctx = document.getElementById('dataQualityChart');
                      if (!ctx) return;

                      // Calculate average quality metrics
                      let totalSuccess = 0;
                      let totalDedup = 0;
                      let count = 0;

                      metrics.forEach(m => {
                          if (m.success_rate !== undefined) {
                              totalSuccess += m.success_rate;
                              count++;
                          }
                          if (m.deduplication_rate !== undefined) {
                              totalDedup += m.deduplication_rate;
                          }
                      });

                      const avgSuccess = count > 0 ? (totalSuccess / count) * 100 : 0;
                      const avgDedup = count > 0 ? (totalDedup / count) * 100 : 0;
                      const dataQuality = avgSuccess > 0 ? (avgSuccess * 0.7 + (100 - avgDedup) * 0.3) : 0;

                      if (qualityChart) qualityChart.destroy();
                      qualityChart = new Chart(ctx, {
                          type: 'bar',
                          data: {
                              labels: ['Success Rate', 'Deduplication Rate', 'Overall Quality'],
                              datasets: [{
                                  label: 'Quality Metrics',
                                  data: [avgSuccess, avgDedup, dataQuality],
                                  backgroundColor: ['#10b981', '#f59e0b', '#3b82f6'],
                                  borderRadius: 6,
                                  borderWidth: 0
                              }]
                          },
                          options: {
                              indexAxis: 'y',
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: false
                                  },
                                  tooltip: {
                                      callbacks: {
                                          label: function(context) {
                                              return context.parsed.x.toFixed(1) + '%';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      min: 0,
                                      max: 100,
                                      title: {
                                          display: true,
                                          text: 'Percentage (%)'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return value + '%';
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // Load and display quality reports
                  async function loadReports() {
                      try {
                          const response = await fetch('data/reports.json');

                          if (!response.ok) {
                              throw new Error('Failed to load reports');
                          }

                          const reports = await response.json();
                          const list = document.getElementById('reportList');

                          if (!list) return;

                          if (!reports || reports.length === 0) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>No quality reports available yet.</p>
                                  </div>
                              `;
                              return;
                          }

                          list.innerHTML = reports.slice(0, 10).map(report => `
                              <a href="reports/${report.filename}" class="report-link">
                                  ${report.name || 'Quality Report'}
                              </a>
                          `).join('');
                      } catch (error) {
                          console.error('Error loading reports:', error);

                          const list = document.getElementById('reportList');
                          if (list) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>Quality reports will appear after pipeline execution.</p>
                                  </div>
                              `;
                          }
                      }
                  }

                  // Initialize dashboard
                  document.addEventListener('DOMContentLoaded', function() {
                      loadMetrics();
                      loadReports();
                  });
              </script>
          </body>
          </html>
          EOF

      - name: Generate dashboard data
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          from pathlib import Path
          from datetime import datetime

          # Create data directory
          site_data = Path("_site/data")
          site_data.mkdir(parents=True, exist_ok=True)

          # Load all metrics
          metrics_dir = Path("data/metrics")
          all_metrics = []

          if metrics_dir.exists():
              for metrics_file in metrics_dir.glob("*.json"):
                  try:
                      with open(metrics_file) as f:
                          data = json.load(f)
                          snapshot = data.get("snapshot", {})
                          stats = data.get("statistics", {})

                          all_metrics.append({
                              "run_id": snapshot.get("run_id", ""),
                              "source": snapshot.get("source", ""),
                              "timestamp": snapshot.get("timestamp", ""),
                              "records_written": snapshot.get("records_written", 0),
                              "success_rate": stats.get("fetch_success_rate", 0),
                              "deduplication_rate": stats.get("deduplication_rate", 0),
                          })
                  except Exception as e:
                      print(f"Error loading {metrics_file}: {e}")

          # Generate summary
          if all_metrics:
              summary = {
                  "total_records": sum(m["records_written"] for m in all_metrics),
                  "avg_success_rate": sum(m["success_rate"] for m in all_metrics) / len(all_metrics),
                  "sources": list(set(m["source"] for m in all_metrics)),
                  "last_update": max(m["timestamp"] for m in all_metrics),
                  "total_runs": len(all_metrics)
              }
          else:
              summary = {
                  "total_records": 0,
                  "avg_success_rate": 0,
                  "sources": [],
                  "last_update": datetime.now().isoformat(),
                  "total_runs": 0
              }

          # Save summary
          with open(site_data / "summary.json", "w") as f:
              json.dump(summary, f, indent=2)

          # Save all metrics for chart rendering
          with open(site_data / "all_metrics.json", "w") as f:
              json.dump(all_metrics, f, indent=2)

          # Copy reports
          import shutil
          reports_dir = Path("data/reports")
          if reports_dir.exists():
              site_reports = Path("_site/reports")
              site_reports.mkdir(exist_ok=True)

              report_list = []
              for report in reports_dir.glob("*_final_quality_report.md"):
                  # Copy report
                  shutil.copy(report, site_reports / report.name)

                  report_list.append({
                      "name": report.stem.replace("_final_quality_report", ""),
                      "filename": report.name
                  })

              # Save report list
              with open(site_data / "reports.json", "w") as f:
                  json.dump(report_list, f, indent=2)
          else:
              # Create empty reports list if no reports exist
              with open(site_data / "reports.json", "w") as f:
                  json.dump([], f, indent=2)

          print(f"Generated dashboard data: {len(all_metrics)} metrics, {summary['total_records']} total records")

          # List generated files for debugging
          import os
          for root, dirs, files in os.walk("_site"):
              for file in files:
                  print(f"  - {os.path.join(root, file)}")
          PYTHON_SCRIPT

      - name: Verify build artifacts
        run: |
          echo "📁 Checking _site directory structure:"
          ls -la _site/
          echo ""
          echo "📁 Checking data directory:"
          ls -la _site/data/ || echo "No data directory"
          echo ""
          echo "📋 Checking summary.json:"
          if [ -f _site/data/summary.json ]; then
            head -5 _site/data/summary.json
          else
            echo "ERROR: summary.json not found!"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "### 🚀 Dashboard Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Dashboard URL**: https://${{ github.repository_owner }}.github.io/somali-dialect-classifier/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To run the interactive dashboard locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "streamlit run dashboard/app.py" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
