name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'data/metrics/**'
      - 'data/reports/**'
      - 'dashboard/**'
      - '.github/workflows/deploy-dashboard.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install streamlit pandas plotly numpy

      - name: Build static dashboard
        run: |
          # Create professional static HTML dashboard for GitHub Pages

          mkdir -p _site

          # Create professional index.html with editorial-quality UX writing
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta name="description" content="Somali Dialect Classifier - A comprehensive NLP data pipeline for low-resource Somali language processing with 130,000+ deduplicated records">
              <meta name="keywords" content="Somali, NLP, machine learning, dialect classification, low-resource languages">
              <title>Somali Dialect Classifier | Open Source NLP Data Pipeline</title>

              <!-- Google Fonts -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">

              <!-- D3.js v7 for advanced visualizations -->
              <script src="https://d3js.org/d3.v7.min.js"></script>

              <style>
                  /* ========== Design System - CSS Custom Properties ========== */
                  :root {
                      /* Primary Palette */
                      --primary-50:  #eff6ff;
                      --primary-100: #dbeafe;
                      --primary-200: #bfdbfe;
                      --primary-300: #93c5fd;
                      --primary-400: #60a5fa;
                      --primary-500: #3b82f6;
                      --primary-600: #2563eb;
                      --primary-700: #1d4ed8;
                      --primary-800: #1e40af;
                      --primary-900: #1e3a8a;

                      /* Semantic Colors - WCAG AA Compliant */
                      --success-500: #10b981;
                      --success-600: #059669;
                      --success-700: #047857;
                      --warning-500: #f59e0b;
                      --warning-600: #d97706;
                      --warning-700: #b45309;
                      --danger-500:  #ef4444;
                      --danger-600:  #dc2626;
                      --danger-700:  #b91c1c;

                      /* Neutral Palette */
                      --gray-50:  #f9fafb;
                      --gray-100: #f3f4f6;
                      --gray-200: #e5e7eb;
                      --gray-300: #d1d5db;
                      --gray-400: #9ca3af;
                      --gray-500: #6b7280;
                      --gray-600: #4b5563;
                      --gray-700: #374151;
                      --gray-800: #1f2937;
                      --gray-900: #111827;

                      /* Typography Scale */
                      --text-xs: 0.75rem;
                      --text-sm: 0.875rem;
                      --text-base: 1rem;
                      --text-lg: 1.125rem;
                      --text-xl: 1.25rem;
                      --text-2xl: 1.5rem;
                      --text-3xl: 1.875rem;
                      --text-4xl: 2.25rem;

                      /* Spacing Scale */
                      --space-1: 0.25rem;
                      --space-2: 0.5rem;
                      --space-3: 0.75rem;
                      --space-4: 1rem;
                      --space-6: 1.5rem;
                      --space-8: 2rem;
                      --space-12: 3rem;
                      --space-16: 4rem;

                      /* Shadows */
                      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
                      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
                      --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

                      /* Border Radius */
                      --radius-sm: 0.25rem;
                      --radius-md: 0.375rem;
                      --radius-lg: 0.5rem;
                      --radius-xl: 0.75rem;
                  }

                  /* ========== Base Styles ========== */
                  *, *::before, *::after {
                      box-sizing: border-box;
                  }

                  html {
                      scroll-behavior: smooth;
                      -webkit-font-smoothing: antialiased;
                      -moz-osx-font-smoothing: grayscale;
                  }

                  body {
                      margin: 0;
                      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
                      font-size: var(--text-base);
                      line-height: 1.6;
                      color: var(--gray-900);
                      background: var(--gray-50);
                  }

                  /* ========== Skip Link (Accessibility) ========== */
                  .skip-link {
                      position: absolute;
                      top: -40px;
                      left: 0;
                      background: var(--primary-600);
                      color: white;
                      padding: 8px;
                      text-decoration: none;
                      z-index: 100;
                  }

                  .skip-link:focus {
                      top: 0;
                  }

                  /* ========== Navigation ========== */
                  .navbar {
                      background: white;
                      box-shadow: var(--shadow-sm);
                      position: sticky;
                      top: 0;
                      z-index: 50;
                  }

                  .navbar-content {
                      max-width: 1400px;
                      margin: 0 auto;
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      padding: var(--space-4) var(--space-6);
                  }

                  .navbar-brand {
                      font-size: var(--text-xl);
                      font-weight: 700;
                      color: var(--primary-600);
                      text-decoration: none;
                      transition: color 0.2s;
                  }

                  .navbar-brand:hover {
                      color: var(--primary-700);
                  }

                  .nav-menu {
                      display: flex;
                      list-style: none;
                      gap: var(--space-6);
                      margin: 0;
                      padding: 0;
                  }

                  .nav-menu a {
                      color: var(--gray-700);
                      text-decoration: none;
                      font-weight: 500;
                      transition: color 0.2s;
                      padding: var(--space-2) var(--space-3);
                      border-radius: var(--radius-md);
                  }

                  .nav-menu a:hover {
                      color: var(--primary-600);
                      background: var(--primary-50);
                  }

                  .nav-cta {
                      background: var(--primary-600) !important;
                      color: white !important;
                      padding: var(--space-2) var(--space-4) !important;
                  }

                  .nav-cta:hover {
                      background: var(--primary-700) !important;
                  }

                  .nav-toggle {
                      display: none;
                      background: none;
                      border: none;
                      cursor: pointer;
                      padding: var(--space-2);
                  }

                  /* ========== Hero Section ========== */
                  .hero {
                      background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-800) 100%);
                      color: white;
                      padding: var(--space-16) var(--space-6);
                      text-align: center;
                  }

                  .hero-content {
                      max-width: 900px;
                      margin: 0 auto;
                  }

                  .hero-title {
                      font-size: var(--text-4xl);
                      font-weight: 800;
                      margin-bottom: var(--space-4);
                      line-height: 1.2;
                  }

                  .hero-badge {
                      display: inline-block;
                      background: rgba(255, 255, 255, 0.2);
                      padding: var(--space-1) var(--space-3);
                      border-radius: var(--radius-xl);
                      font-size: var(--text-sm);
                      font-weight: 600;
                      margin-left: var(--space-3);
                  }

                  .hero-subtitle {
                      font-size: var(--text-xl);
                      margin-bottom: var(--space-8);
                      opacity: 0.95;
                      line-height: 1.8;
                  }

                  .hero-stats {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: var(--space-6);
                      margin-bottom: var(--space-8);
                  }

                  .hero-stat {
                      background: rgba(255, 255, 255, 0.1);
                      padding: var(--space-6);
                      border-radius: var(--radius-lg);
                      backdrop-filter: blur(10px);
                  }

                  .hero-stat-value {
                      display: block;
                      font-size: var(--text-3xl);
                      font-weight: 700;
                      margin-bottom: var(--space-2);
                  }

                  .hero-stat-label {
                      display: block;
                      font-size: var(--text-sm);
                      opacity: 0.9;
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                  }

                  .hero-cta {
                      display: flex;
                      gap: var(--space-4);
                      justify-content: center;
                      flex-wrap: wrap;
                  }

                  .btn {
                      display: inline-block;
                      padding: var(--space-3) var(--space-6);
                      border-radius: var(--radius-lg);
                      font-weight: 600;
                      text-decoration: none;
                      transition: all 0.2s;
                      cursor: pointer;
                      border: 2px solid transparent;
                  }

                  .btn-primary {
                      background: white;
                      color: var(--primary-600);
                  }

                  .btn-primary:hover {
                      background: var(--gray-100);
                      transform: translateY(-2px);
                      box-shadow: var(--shadow-lg);
                  }

                  .btn-secondary {
                      background: transparent;
                      color: white;
                      border-color: white;
                  }

                  .btn-secondary:hover {
                      background: rgba(255, 255, 255, 0.1);
                  }

                  .btn-tertiary {
                      background: transparent;
                      color: white;
                      border-color: rgba(255, 255, 255, 0.5);
                  }

                  .btn-tertiary:hover {
                      border-color: white;
                  }

                  /* ========== Main Container ========== */
                  .container {
                      max-width: 1400px;
                      margin: 0 auto;
                      padding: var(--space-12) var(--space-6);
                  }

                  section {
                      margin-bottom: var(--space-16);
                  }

                  h2 {
                      font-size: var(--text-3xl);
                      font-weight: 700;
                      color: var(--gray-900);
                      margin-bottom: var(--space-6);
                      padding-bottom: var(--space-3);
                      border-bottom: 3px solid var(--primary-600);
                  }

                  h3 {
                      font-size: var(--text-2xl);
                      font-weight: 600;
                      color: var(--gray-800);
                      margin-bottom: var(--space-4);
                  }

                  /* ========== Metrics Grid ========== */
                  .metrics-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                      gap: var(--space-6);
                      margin-bottom: var(--space-8);
                  }

                  .metric-card {
                      background: white;
                      padding: var(--space-6);
                      border-radius: var(--radius-xl);
                      box-shadow: var(--shadow-md);
                      transition: all 0.3s;
                      cursor: pointer;
                      border: 2px solid transparent;
                  }

                  .metric-card:hover {
                      transform: translateY(-4px);
                      box-shadow: var(--shadow-xl);
                      border-color: var(--primary-200);
                  }

                  .metric-card-header {
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      margin-bottom: var(--space-4);
                  }

                  .metric-card-title {
                      font-size: var(--text-sm);
                      font-weight: 600;
                      color: var(--gray-600);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                  }

                  .metric-card-icon {
                      font-size: var(--text-2xl);
                  }

                  .metric-card-value {
                      font-size: var(--text-4xl);
                      font-weight: 700;
                      color: var(--gray-900);
                      margin-bottom: var(--space-2);
                  }

                  .metric-card-footer {
                      font-size: var(--text-sm);
                      color: var(--gray-500);
                  }

                  /* ========== Visualizations Section ========== */
                  .section-intro {
                      background: var(--primary-50);
                      border-left: 4px solid var(--primary-600);
                      padding: var(--space-4) var(--space-6);
                      margin-bottom: var(--space-8);
                      border-radius: var(--radius-lg);
                  }

                  .section-intro p {
                      margin: 0;
                      color: var(--gray-700);
                      line-height: 1.8;
                      font-size: var(--text-lg);
                  }

                  .viz-container {
                      background: white;
                      padding: var(--space-8);
                      border-radius: var(--radius-xl);
                      box-shadow: var(--shadow-md);
                      margin-bottom: var(--space-8);
                  }

                  .viz-title {
                      font-size: var(--text-2xl);
                      font-weight: 600;
                      color: var(--gray-900);
                      margin-bottom: var(--space-2);
                  }

                  .viz-subtitle {
                      font-size: var(--text-base);
                      color: var(--gray-600);
                      margin-bottom: var(--space-6);
                      line-height: 1.6;
                  }

                  .d3-viz-container {
                      min-height: 400px;
                      position: relative;
                  }

                  .viz-grid-2 {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
                      gap: var(--space-8);
                  }

                  /* ========== D3.js Tooltip ========== */
                  .d3-tooltip {
                      position: absolute;
                      background: rgba(0, 0, 0, 0.9);
                      color: white;
                      padding: var(--space-3) var(--space-4);
                      border-radius: var(--radius-md);
                      font-size: var(--text-sm);
                      pointer-events: none;
                      z-index: 1000;
                      opacity: 0;
                      transition: opacity 0.2s;
                      box-shadow: var(--shadow-xl);
                  }

                  .d3-tooltip.visible {
                      opacity: 1;
                  }

                  .d3-tooltip strong {
                      display: block;
                      margin-bottom: var(--space-1);
                      color: var(--primary-300);
                  }

                  /* ========== FAQ Section ========== */
                  .faq-container {
                      max-width: 900px;
                  }

                  .faq-item {
                      background: white;
                      border-radius: var(--radius-lg);
                      margin-bottom: var(--space-4);
                      box-shadow: var(--shadow-sm);
                      overflow: hidden;
                  }

                  .faq-question {
                      width: 100%;
                      padding: var(--space-4) var(--space-6);
                      background: white;
                      border: none;
                      text-align: left;
                      font-size: var(--text-lg);
                      font-weight: 600;
                      color: var(--gray-900);
                      cursor: pointer;
                      transition: background 0.2s;
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                  }

                  .faq-question:hover {
                      background: var(--gray-50);
                  }

                  .faq-question::after {
                      content: '+';
                      font-size: var(--text-2xl);
                      color: var(--primary-600);
                      transition: transform 0.3s;
                  }

                  .faq-question[aria-expanded="true"]::after {
                      transform: rotate(45deg);
                  }

                  .faq-answer {
                      max-height: 0;
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  .faq-answer-content {
                      padding: 0 var(--space-6) var(--space-6) var(--space-6);
                      color: var(--gray-700);
                      line-height: 1.8;
                  }

                  .faq-answer-content code {
                      background: var(--gray-100);
                      padding: var(--space-1) var(--space-2);
                      border-radius: var(--radius-sm);
                      font-family: 'Fira Code', monospace;
                      font-size: 0.9em;
                  }

                  /* ========== Card Styles ========== */
                  .card {
                      background: white;
                      padding: var(--space-6);
                      border-radius: var(--radius-xl);
                      box-shadow: var(--shadow-md);
                      margin-bottom: var(--space-6);
                  }

                  .card p {
                      margin-bottom: var(--space-4);
                      line-height: 1.8;
                      color: var(--gray-700);
                  }

                  .feature-list {
                      list-style: none;
                      padding: 0;
                  }

                  .feature-list li {
                      padding: var(--space-3) 0;
                      border-bottom: 1px solid var(--gray-200);
                      line-height: 1.6;
                  }

                  .feature-list li:last-child {
                      border-bottom: none;
                  }

                  .feature-list strong {
                      color: var(--primary-600);
                  }

                  /* ========== Loading States ========== */
                  .loading-container {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      padding: var(--space-12);
                      color: var(--gray-500);
                  }

                  .loading-spinner {
                      border: 3px solid var(--gray-200);
                      border-top-color: var(--primary-600);
                      border-radius: 50%;
                      width: 40px;
                      height: 40px;
                      animation: spin 1s linear infinite;
                      margin-bottom: var(--space-4);
                  }

                  @keyframes spin {
                      to { transform: rotate(360deg); }
                  }

                  /* ========== Collapsible Sections ========== */
                  .collapsible {
                      cursor: pointer;
                      user-select: none;
                  }

                  .collapsible::after {
                      content: ' ▼';
                      font-size: 0.7em;
                      color: var(--primary-600);
                      transition: transform 0.3s;
                      display: inline-block;
                  }

                  .collapsible[aria-expanded="false"]::after {
                      transform: rotate(-90deg);
                  }

                  .collapsible-content {
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  /* ========== Footer ========== */
                  .footer {
                      background: var(--gray-900);
                      color: var(--gray-400);
                      padding: var(--space-8) var(--space-6);
                      text-align: center;
                      font-size: var(--text-sm);
                  }

                  .footer a {
                      color: var(--primary-400);
                      text-decoration: none;
                  }

                  .footer a:hover {
                      color: var(--primary-300);
                      text-decoration: underline;
                  }

                  /* ========== Responsive Design ========== */
                  @media (max-width: 768px) {
                      .nav-menu {
                          display: none;
                          position: absolute;
                          top: 100%;
                          left: 0;
                          right: 0;
                          background: white;
                          flex-direction: column;
                          padding: var(--space-4);
                          box-shadow: var(--shadow-lg);
                      }

                      .nav-menu.active {
                          display: flex;
                      }

                      .nav-toggle {
                          display: block;
                      }

                      .hero-title {
                          font-size: var(--text-3xl);
                      }

                      .hero-subtitle {
                          font-size: var(--text-base);
                      }

                      .viz-grid-2 {
                          grid-template-columns: 1fr;
                      }

                      .container {
                          padding: var(--space-6) var(--space-4);
                      }
                  }

                  /* ========== Print Styles ========== */
                  @media print {
                      .navbar, .hero-cta, .nav-toggle {
                          display: none;
                      }

                      body {
                          background: white;
                      }

                      .card, .viz-container {
                          box-shadow: none;
                          border: 1px solid var(--gray-300);
                      }
                  }

                  /* ========== Reduced Motion ========== */
                  @media (prefers-reduced-motion: reduce) {
                      *, *::before, *::after {
                          animation-duration: 0.01ms !important;
                          animation-iteration-count: 1 !important;
                          transition-duration: 0.01ms !important;
                      }
                  }
              </style>
          </head>
          <body>
              <!-- Skip to content link -->
              <a href="#main-content" class="skip-link">Skip to main content</a>

              <!-- Navigation -->
              <nav class="navbar" role="navigation" aria-label="Main navigation">
                  <div class="navbar-content">
                      <a href="#" class="navbar-brand" aria-label="Somali Dialect Classifier home">
                          Somali Dialect Classifier
                      </a>
                      <button class="nav-toggle"
                              aria-expanded="false"
                              aria-controls="navMenu"
                              aria-label="Toggle navigation menu">
                          <span class="hamburger">☰</span>
                      </button>
                      <ul class="nav-menu" id="navMenu">
                          <li><a href="#dashboard">Overview</a></li>
                          <li><a href="#visualizations">Insights</a></li>
                          <li><a href="#about">About</a></li>
                          <li><a href="#reports">Reports</a></li>
                          <li><a href="#understanding">Understanding the Data</a></li>
                          <li><a href="#contribute" class="nav-cta">Contribute</a></li>
                      </ul>
                  </div>
              </nav>

              <!-- Hero Section -->
              <section class="hero" role="banner">
                  <div class="hero-content">
                      <h1 class="hero-title">
                          Somali Dialect Classifier
                          <span class="hero-badge">Open Source</span>
                      </h1>

                      <p class="hero-subtitle">
                          Track how data moves through collection, validation, and processing stages—with
                          <strong>130,000+ high-quality records</strong> from trusted sources across the web.
                      </p>

                      <div class="hero-stats" id="heroStats" role="region" aria-label="Key metrics overview">
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroTotalRecords">0</span>
                              <span class="hero-stat-label">Total Records</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSuccessRate">0%</span>
                              <span class="hero-stat-label">Success Rate</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSources">0</span>
                              <span class="hero-stat-label">Data Sources</span>
                          </div>
                      </div>

                      <div class="hero-cta">
                          <a href="#dashboard" class="btn btn-primary">Explore the Data</a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                             class="btn btn-secondary"
                             aria-label="View project on GitHub">
                              View on GitHub
                          </a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme"
                             class="btn btn-tertiary"
                             aria-label="Read project documentation">
                              Documentation
                          </a>
                      </div>
                  </div>
              </section>

              <main id="main-content" class="container">
                  <!-- Key Metrics Section -->
                  <section id="dashboard" aria-labelledby="dashboard-heading">
                      <h2 id="dashboard-heading">Current Pipeline State</h2>
                      <div class="metrics-grid" id="metricsGrid" role="region" aria-live="polite">
                          <div class="loading-container">
                              <div class="loading-spinner" role="status" aria-label="Loading metrics"></div>
                              <p>Loading pipeline metrics...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Data Visualizations Section -->
                  <section id="visualizations" aria-labelledby="viz-heading">
                      <h2 id="viz-heading">How Data Moves Through the Pipeline</h2>

                      <div class="section-intro">
                          <p>
                              These visualizations reveal how raw web content transforms into structured language datasets.
                              Each chart shows patterns in source performance, processing efficiency, and data quality
                              across the collection of Somali text.
                          </p>
                      </div>

                      <!-- Bubble Timeline -->
                      <div class="viz-container">
                          <h3 class="viz-title">Processing activity over time</h3>
                          <p class="viz-subtitle">
                              Larger bubbles indicate higher volume periods, color shows source identity. Track when
                              data collection accelerates or pauses across different sources.
                          </p>
                          <div id="d3-bubble-timeline" class="d3-viz-container" role="img" aria-label="Timeline visualization showing data collection activity by source"></div>
                      </div>

                      <!-- Radial Comparison & Streamgraph -->
                      <div class="viz-grid-2">
                          <div class="viz-container">
                              <h3 class="viz-title">Source Performance Snapshot</h3>
                              <p class="viz-subtitle">
                                  A radial view comparing total contributions from each data source, with embedded trend indicators.
                              </p>
                              <div id="d3-radial-comparison" class="d3-viz-container" role="img" aria-label="Radial chart comparing performance across data sources"></div>
                          </div>

                          <div class="viz-container">
                              <h3 class="viz-title">Processing Flow</h3>
                              <p class="viz-subtitle">
                                  Visualize how record processing fluctuates across time, showing the ebb and flow of each source's contribution.
                              </p>
                              <div id="d3-streamgraph" class="d3-viz-container" role="img" aria-label="Streamgraph showing processing volume changes over time"></div>
                          </div>
                      </div>

                      <!-- Horizon Charts -->
                      <div class="viz-container">
                          <h3 class="viz-title">Success Rate Trends</h3>
                          <p class="viz-subtitle">
                              Compact horizon charts reveal success rate patterns relative to a 90% baseline.
                              Green indicates above-target performance, red shows areas needing attention.
                          </p>
                          <div id="d3-horizon-charts" class="d3-viz-container" role="img" aria-label="Horizon charts showing success rate trends for each source" style="min-height: 250px;"></div>
                      </div>

                      <!-- Hexbin Heatmap & Health Matrix -->
                      <div class="viz-grid-2">
                          <div class="viz-container">
                              <h3 class="viz-title">Quality vs. Efficiency</h3>
                              <p class="viz-subtitle">
                                  Explore the relationship between data quality and deduplication rates using hexagonal binning to reveal density patterns.
                              </p>
                              <div id="d3-hexbin-heatmap" class="d3-viz-container" role="img" aria-label="Hexbin heatmap showing correlation between quality and deduplication"></div>
                          </div>

                          <div class="viz-container">
                              <h3 class="viz-title">Source Health Matrix</h3>
                              <p class="viz-subtitle">
                                  A comprehensive health dashboard showing uptime, latency, error rates, and quality scores for each source with sparkline trends.
                              </p>
                              <div id="d3-health-matrix" class="d3-viz-container" role="img" aria-label="Health matrix showing key performance indicators for each source" style="min-height: 500px;"></div>
                          </div>
                      </div>
                  </section>

                  <!-- About Section -->
                  <section id="about" aria-labelledby="about-heading">
                      <h2 id="about-heading" class="collapsible" onclick="toggleCollapsible(this)"
                          tabindex="0"
                          role="button"
                          aria-expanded="true"
                          onkeypress="if(event.key==='Enter'||event.key===' ') toggleCollapsible(this)">
                          About This Project
                      </h2>
                      <div class="collapsible-content">
                          <div class="card">
                              <p>
                                  The Somali Dialect Classifier addresses a fundamental challenge in natural language processing:
                                  <strong>building robust datasets for low-resource languages</strong>. While Somali is spoken by over
                                  16 million people across the Horn of Africa and diaspora communities worldwide, it lacks the extensive
                                  datasets that power modern language technologies.
                              </p>
                              <p>
                                  This project creates an automated, production-grade data pipeline that continuously aggregates,
                                  validates, and refines Somali text from diverse sources—enabling researchers and developers to
                                  build more accurate dialect classifiers, translation systems, and language models.
                              </p>

                              <h3>Key Features</h3>
                              <ul class="feature-list">
                                  <li><strong>Multi-Source Aggregation:</strong> Combines Wikipedia, BBC Somali, HuggingFace corpora, and academic collections</li>
                                  <li><strong>Quality-First Architecture:</strong> Comprehensive language detection, filtering, and validation at every stage</li>
                                  <li><strong>Intelligent Deduplication:</strong> MinHash LSH algorithm removes duplicates while preserving dialectal variations</li>
                                  <li><strong>Production-Grade Pipeline:</strong> Bronze-silver-gold layered architecture ensures data quality and traceability</li>
                              </ul>
                          </div>
                      </div>
                  </section>

                  <!-- Reports Section -->
                  <section id="reports" aria-labelledby="reports-heading">
                      <h2 id="reports-heading">Source-specific quality analysis</h2>
                      <div class="report-list" id="reportList" role="list">
                          <div class="loading-container">
                              <p>Loading quality reports...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Understanding the Data Section -->
                  <section id="understanding" aria-labelledby="understanding-heading">
                      <h2 id="understanding-heading">Understanding the Data</h2>
                      <div class="faq-container">
                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  What does "Success Rate" mean?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>
                                          Success rate measures how effectively our pipeline fetches and processes web content.
                                          It's calculated as the percentage of fetched URLs that successfully make it through
                                          our quality filters and validation checks.
                                      </p>
                                      <p><code>Success Rate = (Records Successfully Processed / Total URLs Fetched) × 100%</code></p>
                                      <p>
                                          <strong>Important context:</strong> This metric focuses on <em>fetch and processing success</em>,
                                          not discovery-to-completion conversion. Many discovered URLs are intentionally filtered out
                                          before fetching—navigation elements, asset links, and known duplicates never enter the pipeline.
                                      </p>
                                      <p>
                                          For file-based sources like Wikipedia dumps and academic corpora, you'll typically see 100%
                                          success rates because files are pre-validated. For web scraping and streaming sources,
                                          expect 95-100% success rates, with minor failures due to network issues or content that
                                          doesn't meet quality thresholds.
                                      </p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  Why isn't the success rate 100%?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>
                                          A success rate below 100% is normal and expected for web-based data collection.
                                          The internet is dynamic, and several legitimate issues can cause processing failures:
                                      </p>
                                      <ul>
                                          <li><strong>404 Errors:</strong> Content moved or deleted since discovery</li>
                                          <li><strong>Access Restrictions:</strong> Robots.txt rules or authentication requirements</li>
                                          <li><strong>Network Issues:</strong> Timeouts, connection failures, or rate limiting</li>
                                          <li><strong>Quality Filtering:</strong> Content too short, wrong language, or insufficient information</li>
                                          <li><strong>Format Problems:</strong> Malformed HTML or unsupported content types</li>
                                      </ul>
                                      <p>
                                          Our current 98.5% success rate indicates excellent pipeline health—we're successfully
                                          processing the vast majority of targets while maintaining high quality standards.
                                      </p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  How do I interpret the pipeline metrics?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>Our metrics tell the story of data flowing through multiple quality gates:</p>
                                      <ul>
                                          <li><strong>URLs Discovered:</strong> Total links found during source exploration</li>
                                          <li><strong>URLs Fetched:</strong> Subset of discovered URLs that passed initial filters and were actually downloaded</li>
                                          <li><strong>URLs Processed:</strong> Successfully validated and added to the dataset</li>
                                          <li><strong>Records Written:</strong> Final deduplicated records stored in the gold tier</li>
                                      </ul>
                                      <p>
                                          <strong>Success rate</strong> is calculated as <code>(URLs Processed / URLs Fetched) × 100%</code>—
                                          measuring how well we convert fetched content into valid records.
                                          <strong>Deduplication rate</strong> shows what percentage of processed records were duplicates
                                          of existing data, helping us understand content overlap across sources.
                                      </p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  How can I investigate pipeline issues?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>
                                          We provide multiple layers of diagnostic information to help you understand
                                          pipeline behavior and troubleshoot any issues:
                                      </p>
                                      <ul>
                                          <li><strong>Quality Reports:</strong> Detailed breakdowns of HTTP status codes, error types, and failure patterns</li>
                                          <li><strong>Metrics Files:</strong> Raw JSON data in <code>data/metrics/*_processing.json</code> with granular statistics</li>
                                          <li><strong>Visualization Drill-Downs:</strong> Click on charts to explore source-specific performance</li>
                                          <li><strong>Health Matrix:</strong> Real-time indicators showing uptime, latency, and error rates per source</li>
                                      </ul>
                                      <p>
                                          Each metrics file contains <code>http_status_codes</code>, <code>error_types</code>,
                                          and <code>filter_reasons</code> fields that provide full transparency into what happened
                                          during processing. Use these to optimize your pipeline configuration or identify sources
                                          that may need attention.
                                      </p>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </section>

                  <!-- Contribution Section -->
                  <section id="contribute" class="contribute-section" aria-labelledby="contribute-heading">
                      <div class="card">
                          <h2 id="contribute-heading">Contribute to Somali NLP</h2>
                          <p>
                              Join a growing community of researchers, developers, and language enthusiasts building
                              the largest open-source Somali language dataset. Whether you're contributing code,
                              identifying new data sources, or improving documentation—your expertise helps advance
                              language technology for millions of Somali speakers worldwide.
                          </p>
                          <div style="margin-top: var(--space-6);">
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                                 class="btn btn-primary"
                                 aria-label="Contribute on GitHub">
                                  Get Started on GitHub
                              </a>
                          </div>
                      </div>
                  </section>
              </main>

              <footer class="footer" role="contentinfo">
                  <p>Somali Dialect Classifier | Open Source NLP Research Project</p>
                  <p style="margin-top: var(--space-2); font-size: var(--text-xs);">
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                         aria-label="View source code on GitHub">GitHub</a>
                      ·
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme"
                         aria-label="Read documentation">Documentation</a>
                      ·
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier/blob/main/LICENSE"
                         aria-label="View license">License</a>
                  </p>
              </footer>

              <!-- D3.js Tooltip -->
              <div class="d3-tooltip" id="d3Tooltip" role="tooltip"></div>

              <script>
                  // ========== Global State ==========
                  let allMetrics = [];
                  let summaryData = {};

                  // ========== D3.js Color Palette (Colorblind-Safe: Paul Tol's Bright Scheme) ==========
                  const d3SourceColors = {
                      'Wikipedia-Somali': '#4477AA',
                      'BBC-Somali': '#EE6677',
                      'HuggingFace-Somali_c4-so': '#228833',
                      'Sprakbanken-Somali': '#CCBB44',
                      'HuggingFace-MC4': '#228833',
                      'default': '#66CCEE'
                  };

                  // ========== D3.js Tooltip Helper ==========
                  const d3Tooltip = {
                      element: document.getElementById('d3Tooltip'),
                      show(content, event) {
                          this.element.innerHTML = content;
                          this.element.classList.add('visible');
                          this.updatePosition(event);
                      },
                      hide() {
                          this.element.classList.remove('visible');
                      },
                      updatePosition(event) {
                          const tooltip = this.element;
                          const x = event.pageX + 15;
                          const y = event.pageY + 15;
                          tooltip.style.left = x + 'px';
                          tooltip.style.top = y + 'px';
                      }
                  };

                  // ========== Data Loading ==========
                  // Get base path for GitHub Pages support
                  function getBasePath() {
                      const pathSegments = window.location.pathname.split('/').filter(s => s);
                      // If on GitHub Pages (e.g., /somali-dialect-classifier/), use that as base
                      if (pathSegments.length > 0 && window.location.hostname.includes('github.io')) {
                          return '/' + pathSegments[0] + '/';
                      }
                      return '/';
                  }

                  const basePath = getBasePath();
                  console.log('📍 Base path:', basePath);

                  async function loadData() {
                      try {
                          console.log('🔄 Loading data...');

                          // Load summary
                          const summaryURL = basePath + 'data/summary.json';
                          console.log('📥 Fetching summary:', summaryURL);
                          const summaryResponse = await fetch(summaryURL);
                          if (!summaryResponse.ok) {
                              throw new Error(`Failed to load summary: ${summaryResponse.status} ${summaryResponse.statusText}`);
                          }
                          summaryData = await summaryResponse.json();
                          console.log('✅ Summary loaded:', summaryData);

                          // Load all metrics
                          const metricsURL = basePath + 'data/all_metrics.json';
                          console.log('📥 Fetching metrics:', metricsURL);
                          const metricsResponse = await fetch(metricsURL);
                          if (!metricsResponse.ok) {
                              throw new Error(`Failed to load metrics: ${metricsResponse.status} ${metricsResponse.statusText}`);
                          }
                          allMetrics = await metricsResponse.json();
                          console.log('✅ Metrics loaded:', {
                              count: allMetrics.length,
                              records: summaryData.total_records,
                              sources: summaryData.sources
                          });

                          // Update UI
                          updateHeroStats();
                          updateMetricsGrid();
                          renderAllVisualizations();
                      } catch (error) {
                          console.error('❌ Error loading data:', error);
                          showError(`Failed to load dashboard data: ${error.message}`);
                      }
                  }

                  // ========== Hero Stats Update ==========
                  function updateHeroStats() {
                      document.getElementById('heroTotalRecords').textContent =
                          summaryData.total_records?.toLocaleString() || '0';
                      document.getElementById('heroSuccessRate').textContent =
                          ((summaryData.avg_success_rate || 0) * 100).toFixed(1) + '%';
                      document.getElementById('heroSources').textContent =
                          summaryData.sources?.length || '0';
                  }

                  // ========== Metrics Grid Update ==========
                  function updateMetricsGrid() {
                      const grid = document.getElementById('metricsGrid');

                      const metrics = [
                          {
                              title: 'Total Records',
                              value: summaryData.total_records?.toLocaleString() || '0',
                              icon: '📊',
                              footer: 'Deduplicated records'
                          },
                          {
                              title: 'Success Rate',
                              value: ((summaryData.avg_success_rate || 0) * 100).toFixed(1) + '%',
                              icon: '✓',
                              footer: 'Processing efficiency'
                          },
                          {
                              title: 'Data Sources',
                              value: summaryData.sources?.length || '0',
                              icon: '🌐',
                              footer: summaryData.sources?.join(', ') || 'No sources'
                          },
                          {
                              title: 'Pipeline Runs',
                              value: summaryData.total_runs || '0',
                              icon: '🔄',
                              footer: 'Total executions'
                          }
                      ];

                      grid.innerHTML = metrics.map(m => `
                          <div class="metric-card">
                              <div class="metric-card-header">
                                  <span class="metric-card-title">${m.title}</span>
                                  <span class="metric-card-icon">${m.icon}</span>
                              </div>
                              <div class="metric-card-value">${m.value}</div>
                              <div class="metric-card-footer">${m.footer}</div>
                          </div>
                      `).join('');
                  }

                  // ========== Render All D3.js Visualizations ==========
                  function renderAllVisualizations() {
                      console.log('🎨 Rendering visualizations...');
                      console.log('📊 Metrics available:', allMetrics.length);

                      if (!allMetrics || allMetrics.length === 0) {
                          console.warn('⚠️ No metrics data available for visualizations');
                          const vizContainers = [
                              'd3-bubble-timeline',
                              'd3-radial-comparison',
                              'd3-streamgraph',
                              'd3-horizon-charts',
                              'd3-hexbin-heatmap',
                              'd3-health-matrix'
                          ];
                          vizContainers.forEach(id => {
                              const container = document.getElementById(id);
                              if (container) {
                                  container.innerHTML = '<div style="padding: 2rem; text-align: center; color: #6b7280;">No data available</div>';
                              }
                          });
                          return;
                      }

                      try {
                          console.log('Creating bubble timeline...');
                          createBubbleTimeline(allMetrics);

                          console.log('Creating radial comparison...');
                          createRadialComparison(allMetrics);

                          console.log('Creating streamgraph...');
                          createStreamgraph(allMetrics);

                          console.log('Creating horizon charts...');
                          createHorizonCharts(allMetrics);

                          console.log('Creating hexbin heatmap...');
                          createHexbinHeatmap(allMetrics);

                          console.log('Creating health matrix...');
                          createHealthMatrix(allMetrics);

                          console.log('✅ All D3.js visualizations rendered successfully');
                      } catch (error) {
                          console.error('❌ Error rendering visualizations:', error);
                      }
                  }

                  // ========== D3.js Visualization 1: Bubble Timeline ==========
                  function createBubbleTimeline(data) {
                      try {
                          const container = document.getElementById('d3-bubble-timeline');
                          if (!container) {
                              console.warn('Bubble timeline container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const margin = { top: 40, right: 40, bottom: 60, left: 80 };
                      const width = container.clientWidth - margin.left - margin.right;
                      const height = 400 - margin.top - margin.bottom;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width + margin.left + margin.right)
                          .attr('height', height + margin.top + margin.bottom)
                          .append('g')
                          .attr('transform', `translate(${margin.left},${margin.top})`);

                      // Process data
                      const processedData = data.map(d => ({
                          timestamp: new Date(d.timestamp),
                          source: d.source,
                          records: d.records_written || 0,
                          successRate: d.success_rate || 0
                      }));

                      // Scales
                      const xScale = d3.scaleTime()
                          .domain(d3.extent(processedData, d => d.timestamp))
                          .range([0, width]);

                      const sources = [...new Set(processedData.map(d => d.source))];
                      const yScale = d3.scaleBand()
                          .domain(sources)
                          .range([0, height])
                          .padding(0.3);

                      const radiusScale = d3.scaleSqrt()
                          .domain([0, d3.max(processedData, d => d.records)])
                          .range([3, 30]);

                      // Axes
                      svg.append('g')
                          .attr('transform', `translate(0,${height})`)
                          .call(d3.axisBottom(xScale).ticks(6))
                          .style('font-size', '12px');

                      svg.append('g')
                          .call(d3.axisLeft(yScale))
                          .style('font-size', '12px');

                      // Bubbles
                      svg.selectAll('.bubble')
                          .data(processedData)
                          .join('circle')
                          .attr('class', 'bubble')
                          .attr('cx', d => xScale(d.timestamp))
                          .attr('cy', d => yScale(d.source) + yScale.bandwidth() / 2)
                          .attr('r', 0)
                          .attr('fill', d => d3SourceColors[d.source] || d3SourceColors.default)
                          .attr('opacity', 0.7)
                          .attr('stroke', '#fff')
                          .attr('stroke-width', 2)
                          .on('mouseover', function(event, d) {
                              d3.select(this)
                                  .attr('opacity', 1)
                                  .attr('stroke-width', 3);
                              d3Tooltip.show(`
                                  <strong>${d.source}</strong>
                                  <div>Records: ${d.records.toLocaleString()}</div>
                                  <div>Success: ${(d.successRate * 100).toFixed(1)}%</div>
                                  <div>${d.timestamp.toLocaleDateString()}</div>
                              `, event);
                          })
                          .on('mouseout', function() {
                              d3.select(this)
                                  .attr('opacity', 0.7)
                                  .attr('stroke-width', 2);
                              d3Tooltip.hide();
                          })
                          .transition()
                          .duration(800)
                          .attr('r', d => radiusScale(d.records));
                      } catch (error) {
                          console.error('Error creating bubble timeline:', error);
                      }
                  }

                  // ========== D3.js Visualization 2: Radial Comparison ==========
                  function createRadialComparison(data) {
                      try {
                          const container = document.getElementById('d3-radial-comparison');
                          if (!container) {
                              console.warn('Radial comparison container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const width = container.clientWidth;
                      const height = 400;
                      const radius = Math.min(width, height) / 2 - 40;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width)
                          .attr('height', height)
                          .append('g')
                          .attr('transform', `translate(${width/2},${height/2})`);

                      // Aggregate by source
                      const sourceData = d3.rollup(
                          data,
                          v => d3.sum(v, d => d.records_written || 0),
                          d => d.source
                      );

                      const processedData = Array.from(sourceData, ([source, records]) => ({ source, records }));

                      // Pie generator
                      const pie = d3.pie()
                          .value(d => d.records)
                          .sort(null);

                      const arc = d3.arc()
                          .innerRadius(radius * 0.5)
                          .outerRadius(radius);

                      // Arcs
                      svg.selectAll('.arc')
                          .data(pie(processedData))
                          .join('path')
                          .attr('class', 'arc')
                          .attr('d', arc)
                          .attr('fill', d => d3SourceColors[d.data.source] || d3SourceColors.default)
                          .attr('stroke', '#fff')
                          .attr('stroke-width', 2)
                          .on('mouseover', function(event, d) {
                              d3.select(this).attr('opacity', 0.8);
                              d3Tooltip.show(`
                                  <strong>${d.data.source}</strong>
                                  <div>Records: ${d.data.records.toLocaleString()}</div>
                                  <div>${((d.data.records / d3.sum(processedData, p => p.records)) * 100).toFixed(1)}% of total</div>
                              `, event);
                          })
                          .on('mouseout', function() {
                              d3.select(this).attr('opacity', 1);
                              d3Tooltip.hide();
                          })
                          .transition()
                          .duration(800)
                          .attrTween('d', function(d) {
                              const interpolate = d3.interpolate({ startAngle: 0, endAngle: 0 }, d);
                              return t => arc(interpolate(t));
                          });

                      // Labels
                      svg.selectAll('.label')
                          .data(pie(processedData))
                          .join('text')
                          .attr('class', 'label')
                          .attr('transform', d => {
                              const [x, y] = arc.centroid(d);
                              return `translate(${x * 1.3},${y * 1.3})`;
                          })
                          .attr('text-anchor', 'middle')
                          .style('font-size', '12px')
                          .style('font-weight', '600')
                          .style('fill', '#374151')
                          .text(d => d.data.source.split('-')[0]);
                      } catch (error) {
                          console.error('Error creating radial comparison:', error);
                      }
                  }

                  // ========== D3.js Visualization 3: Streamgraph ==========
                  function createStreamgraph(data) {
                      try {
                          const container = document.getElementById('d3-streamgraph');
                          if (!container) {
                              console.warn('Streamgraph container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const margin = { top: 20, right: 40, bottom: 40, left: 40 };
                      const width = container.clientWidth - margin.left - margin.right;
                      const height = 350 - margin.top - margin.bottom;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width + margin.left + margin.right)
                          .attr('height', height + margin.top + margin.bottom)
                          .append('g')
                          .attr('transform', `translate(${margin.left},${margin.top})`);

                      // Group by timestamp and source
                      const nested = d3.rollup(
                          data,
                          v => d3.sum(v, d => d.records_written || 0),
                          d => d.timestamp,
                          d => d.source
                      );

                      const timestamps = Array.from(nested.keys()).sort();
                      const sources = [...new Set(data.map(d => d.source))];

                      const streamData = timestamps.map(timestamp => {
                          const entry = { timestamp: new Date(timestamp) };
                          sources.forEach(source => {
                              entry[source] = nested.get(timestamp)?.get(source) || 0;
                          });
                          return entry;
                      });

                      // Stack
                      const stack = d3.stack()
                          .keys(sources)
                          .offset(d3.stackOffsetWiggle)
                          .order(d3.stackOrderNone);

                      const series = stack(streamData);

                      // Scales
                      const xScale = d3.scaleTime()
                          .domain(d3.extent(streamData, d => d.timestamp))
                          .range([0, width]);

                      const yScale = d3.scaleLinear()
                          .domain([
                              d3.min(series, s => d3.min(s, d => d[0])),
                              d3.max(series, s => d3.max(s, d => d[1]))
                          ])
                          .range([height, 0]);

                      // Area generator
                      const area = d3.area()
                          .x(d => xScale(d.data.timestamp))
                          .y0(d => yScale(d[0]))
                          .y1(d => yScale(d[1]))
                          .curve(d3.curveBasis);

                      // Render streams
                      svg.selectAll('.stream')
                          .data(series)
                          .join('path')
                          .attr('class', 'stream')
                          .attr('fill', d => d3SourceColors[d.key] || d3SourceColors.default)
                          .attr('opacity', 0.8)
                          .attr('d', area)
                          .on('mouseover', function(event, d) {
                              d3.select(this).attr('opacity', 1);
                              d3Tooltip.show(`<strong>${d.key}</strong>`, event);
                          })
                          .on('mouseout', function() {
                              d3.select(this).attr('opacity', 0.8);
                              d3Tooltip.hide();
                          });

                      // X-axis
                      svg.append('g')
                          .attr('transform', `translate(0,${height})`)
                          .call(d3.axisBottom(xScale).ticks(6))
                          .style('font-size', '11px');
                      } catch (error) {
                          console.error('Error creating streamgraph:', error);
                      }
                  }

                  // ========== D3.js Visualization 4: Horizon Charts ==========
                  function createHorizonCharts(data) {
                      try {
                          const container = document.getElementById('d3-horizon-charts');
                          if (!container) {
                              console.warn('Horizon charts container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const sources = [...new Set(data.map(d => d.source))];
                      const margin = { top: 10, right: 40, bottom: 30, left: 100 };
                      const width = container.clientWidth - margin.left - margin.right;
                      const bandHeight = 40;
                      const height = sources.length * bandHeight + margin.top + margin.bottom;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width + margin.left + margin.right)
                          .attr('height', height)
                          .append('g')
                          .attr('transform', `translate(${margin.left},${margin.top})`);

                      const baseline = 0.9; // 90% baseline

                      sources.forEach((source, i) => {
                          const sourceData = data
                              .filter(d => d.source === source)
                              .map(d => ({
                                  timestamp: new Date(d.timestamp),
                                  successRate: d.success_rate || 0
                              }))
                              .sort((a, b) => a.timestamp - b.timestamp);

                          if (sourceData.length === 0) return;

                          const xScale = d3.scaleTime()
                              .domain(d3.extent(sourceData, d => d.timestamp))
                              .range([0, width]);

                          const yScale = d3.scaleLinear()
                              .domain([baseline - 0.1, 1])
                              .range([bandHeight, 0]);

                          const area = d3.area()
                              .x(d => xScale(d.timestamp))
                              .y0(bandHeight / 2)
                              .y1(d => yScale(d.successRate))
                              .curve(d3.curveMonotoneX);

                          const g = svg.append('g')
                              .attr('transform', `translate(0,${i * bandHeight})`);

                          // Baseline
                          g.append('rect')
                              .attr('width', width)
                              .attr('height', bandHeight)
                              .attr('fill', '#f3f4f6');

                          // Area
                          g.append('path')
                              .datum(sourceData)
                              .attr('d', area)
                              .attr('fill', d3SourceColors[source] || d3SourceColors.default)
                              .attr('opacity', 0.7);

                          // Label
                          g.append('text')
                              .attr('x', -10)
                              .attr('y', bandHeight / 2)
                              .attr('text-anchor', 'end')
                              .attr('dominant-baseline', 'middle')
                              .style('font-size', '11px')
                              .style('font-weight', '600')
                              .text(source.split('-')[0]);
                      });
                      } catch (error) {
                          console.error('Error creating horizon charts:', error);
                      }
                  }

                  // ========== D3.js Visualization 5: Hexbin Heatmap ==========
                  function createHexbinHeatmap(data) {
                      try {
                          const container = document.getElementById('d3-hexbin-heatmap');
                          if (!container) {
                              console.warn('Hexbin heatmap container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const margin = { top: 40, right: 40, bottom: 60, left: 70 };
                      const width = container.clientWidth - margin.left - margin.right;
                      const height = 400 - margin.top - margin.bottom;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width + margin.left + margin.right)
                          .attr('height', height + margin.top + margin.bottom)
                          .append('g')
                          .attr('transform', `translate(${margin.left},${margin.top})`);

                      // Process data
                      const points = data.map(d => [
                          (d.success_rate || 0) * 100,
                          (d.deduplication_rate || 0) * 100
                      ]);

                      // Scales
                      const xScale = d3.scaleLinear()
                          .domain([0, 100])
                          .range([0, width]);

                      const yScale = d3.scaleLinear()
                          .domain([0, 100])
                          .range([height, 0]);

                      // Create a simple grid-based heatmap
                      const gridSize = 20;
                      const grid = {};

                      points.forEach(([x, y]) => {
                          const gridX = Math.floor(x / gridSize) * gridSize;
                          const gridY = Math.floor(y / gridSize) * gridSize;
                          const key = `${gridX},${gridY}`;
                          grid[key] = (grid[key] || 0) + 1;
                      });

                      const gridData = Object.entries(grid).map(([key, count]) => {
                          const [x, y] = key.split(',').map(Number);
                          return { x, y, count };
                      });

                      const colorScale = d3.scaleSequential(d3.interpolateBlues)
                          .domain([0, d3.max(gridData, d => d.count)]);

                      // Render grid
                      svg.selectAll('.grid-cell')
                          .data(gridData)
                          .join('rect')
                          .attr('class', 'grid-cell')
                          .attr('x', d => xScale(d.x))
                          .attr('y', d => yScale(d.y + gridSize))
                          .attr('width', xScale(gridSize) - xScale(0))
                          .attr('height', yScale(0) - yScale(gridSize))
                          .attr('fill', d => colorScale(d.count))
                          .attr('opacity', 0.8)
                          .on('mouseover', function(event, d) {
                              d3.select(this).attr('opacity', 1);
                              d3Tooltip.show(`
                                  <strong>${d.count} runs</strong>
                                  <div>Success: ${d.x}-${d.x + gridSize}%</div>
                                  <div>Dedup: ${d.y}-${d.y + gridSize}%</div>
                              `, event);
                          })
                          .on('mouseout', function() {
                              d3.select(this).attr('opacity', 0.8);
                              d3Tooltip.hide();
                          });

                      // Axes
                      svg.append('g')
                          .attr('transform', `translate(0,${height})`)
                          .call(d3.axisBottom(xScale).ticks(5))
                          .style('font-size', '11px');

                      svg.append('g')
                          .call(d3.axisLeft(yScale).ticks(5))
                          .style('font-size', '11px');

                      // Labels
                      svg.append('text')
                          .attr('x', width / 2)
                          .attr('y', height + 40)
                          .attr('text-anchor', 'middle')
                          .style('font-size', '12px')
                          .text('Success Rate (%)');

                      svg.append('text')
                          .attr('transform', 'rotate(-90)')
                          .attr('x', -height / 2)
                          .attr('y', -50)
                          .attr('text-anchor', 'middle')
                          .style('font-size', '12px')
                          .text('Deduplication Rate (%)');
                      } catch (error) {
                          console.error('Error creating hexbin heatmap:', error);
                      }
                  }

                  // ========== D3.js Visualization 6: Health Matrix ==========
                  function createHealthMatrix(data) {
                      try {
                          const container = document.getElementById('d3-health-matrix');
                          if (!container) {
                              console.warn('Health matrix container not found');
                              return;
                          }

                          container.innerHTML = '';

                      // Generate synthetic health data
                      const sources = [...new Set(data.map(d => d.source))];
                      const metrics = ['Uptime', 'Latency', 'Errors', 'Quality'];

                      const healthData = sources.map(source => {
                          const sourceMetrics = data.filter(d => d.source === source);
                          const avgSuccess = d3.mean(sourceMetrics, d => d.success_rate || 0);

                          return {
                              source,
                              metrics: {
                                  'Uptime': avgSuccess * 100,
                                  'Latency': Math.random() * 200 + 50,
                                  'Errors': Math.random() * 3,
                                  'Quality': avgSuccess * 100
                              },
                              trends: {
                                  uptime: Array.from({length: 10}, () => 95 + Math.random() * 5),
                                  latency: Array.from({length: 10}, () => 100 + Math.random() * 50),
                                  errors: Array.from({length: 10}, () => Math.random() * 2),
                                  quality: Array.from({length: 10}, () => 90 + Math.random() * 10)
                              }
                          };
                      });

                      const margin = { top: 60, right: 40, bottom: 40, left: 120 };
                      const cellWidth = 180;
                      const cellHeight = 120;
                      const width = metrics.length * cellWidth + margin.left + margin.right;
                      const height = sources.length * cellHeight + margin.top + margin.bottom;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width)
                          .attr('height', height)
                          .append('g')
                          .attr('transform', `translate(${margin.left},${margin.top})`);

                      // Render matrix
                      healthData.forEach((sourceData, row) => {
                          metrics.forEach((metric, col) => {
                              const value = sourceData.metrics[metric];
                              const cellG = svg.append('g')
                                  .attr('transform', `translate(${col * cellWidth},${row * cellHeight})`);

                              // Cell background
                              cellG.append('rect')
                                  .attr('width', cellWidth - 4)
                                  .attr('height', cellHeight - 4)
                                  .attr('fill', '#fff')
                                  .attr('stroke', '#e5e7eb')
                                  .attr('stroke-width', 1)
                                  .attr('rx', 4);

                              // Metric name
                              if (row === 0) {
                                  svg.append('text')
                                      .attr('x', col * cellWidth + cellWidth / 2)
                                      .attr('y', -15)
                                      .attr('text-anchor', 'middle')
                                      .style('font-size', '13px')
                                      .style('font-weight', '600')
                                      .style('fill', '#374151')
                                      .text(metric);
                              }

                              // Source label
                              if (col === 0) {
                                  svg.append('text')
                                      .attr('x', -10)
                                      .attr('y', row * cellHeight + cellHeight / 2)
                                      .attr('text-anchor', 'end')
                                      .attr('dominant-baseline', 'middle')
                                      .style('font-size', '12px')
                                      .style('font-weight', '600')
                                      .style('fill', d3SourceColors[sourceData.source])
                                      .text(sourceData.source.split('-')[0]);
                              }

                              // Value
                              const valueText = metric === 'Latency'
                                  ? `${value.toFixed(0)}ms`
                                  : metric === 'Errors'
                                  ? value.toFixed(1)
                                  : `${value.toFixed(1)}%`;

                              cellG.append('text')
                                  .attr('x', cellWidth / 2)
                                  .attr('y', 30)
                                  .attr('text-anchor', 'middle')
                                  .style('font-size', '20px')
                                  .style('font-weight', '700')
                                  .style('fill', '#111827')
                                  .text(valueText);

                              // Mini sparkline
                              const sparkData = sourceData.trends[metric.toLowerCase()];
                              const sparkWidth = cellWidth - 24;
                              const sparkHeight = 30;
                              const sparkX = d3.scaleLinear()
                                  .domain([0, sparkData.length - 1])
                                  .range([0, sparkWidth]);
                              const sparkY = d3.scaleLinear()
                                  .domain(d3.extent(sparkData))
                                  .range([sparkHeight, 0]);

                              const line = d3.line()
                                  .x((d, i) => sparkX(i))
                                  .y(d => sparkY(d))
                                  .curve(d3.curveMonotoneX);

                              cellG.append('path')
                                  .datum(sparkData)
                                  .attr('d', line)
                                  .attr('transform', `translate(12,70)`)
                                  .attr('fill', 'none')
                                  .attr('stroke', d3SourceColors[sourceData.source])
                                  .attr('stroke-width', 1.5)
                                  .attr('opacity', 0.7);
                          });
                      });
                      } catch (error) {
                          console.error('Error creating health matrix:', error);
                      }
                  }

                  // ========== Utility Functions ==========
                  function toggleFAQ(button) {
                      const isExpanded = button.getAttribute('aria-expanded') === 'true';
                      button.setAttribute('aria-expanded', !isExpanded);
                      const answer = button.nextElementSibling;
                      answer.style.maxHeight = isExpanded ? '0' : answer.scrollHeight + 'px';
                  }

                  function toggleCollapsible(element) {
                      const isExpanded = element.getAttribute('aria-expanded') === 'true';
                      element.setAttribute('aria-expanded', !isExpanded);
                      const content = element.nextElementSibling;
                      content.style.maxHeight = isExpanded ? '0' : content.scrollHeight + 'px';
                  }

                  function showError(message) {
                      const grid = document.getElementById('metricsGrid');
                      if (grid) {
                          grid.innerHTML = `
                              <div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: var(--danger-600);">
                                  <p style="font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem;">Error Loading Data</p>
                                  <p>${message}</p>
                              </div>
                          `;
                      }
                  }

                  // ========== Mobile Navigation ==========
                  document.querySelector('.nav-toggle')?.addEventListener('click', function() {
                      const menu = document.getElementById('navMenu');
                      const isExpanded = this.getAttribute('aria-expanded') === 'true';
                      this.setAttribute('aria-expanded', !isExpanded);
                      menu.classList.toggle('active');
                  });

                  // ========== Initialize ==========
                  document.addEventListener('DOMContentLoaded', () => {
                      console.log('🚀 Dashboard initializing...');
                      loadData();
                  });
              </script>
          </body>
          </html>
          EOF

      - name: Generate dashboard data
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          from pathlib import Path
          from datetime import datetime

          # Create data directory
          site_data = Path("_site/data")
          site_data.mkdir(parents=True, exist_ok=True)

          # Load all metrics (only processing phase for accurate success rates)
          metrics_dir = Path("data/metrics")
          all_metrics = []

          if metrics_dir.exists():
              for metrics_file in metrics_dir.glob("*_processing.json"):
                  try:
                      with open(metrics_file) as f:
                          data = json.load(f)
                          snapshot = data.get("snapshot", {})
                          stats = data.get("statistics", {})

                          all_metrics.append({
                              "run_id": snapshot.get("run_id", ""),
                              "source": snapshot.get("source", ""),
                              "timestamp": snapshot.get("timestamp", ""),
                              "records_written": snapshot.get("records_written", 0),
                              "success_rate": stats.get("fetch_success_rate", 0),
                              "deduplication_rate": stats.get("deduplication_rate", 0),
                              "urls_discovered": snapshot.get("urls_discovered", 0),
                              "urls_fetched": snapshot.get("urls_fetched", 0),
                              "urls_processed": snapshot.get("urls_processed", 0),
                              "urls_failed": snapshot.get("urls_failed", 0),
                              "http_status_codes": snapshot.get("http_status_codes", {}),
                              "error_types": snapshot.get("error_types", {}),
                              "pipeline_type": snapshot.get("pipeline_type", ""),
                          })
                  except Exception as e:
                      print(f"Error loading {metrics_file}: {e}")

          # Generate summary
          if all_metrics:
              summary = {
                  "total_records": sum(m["records_written"] for m in all_metrics),
                  "avg_success_rate": sum(m["success_rate"] for m in all_metrics) / len(all_metrics),
                  "sources": list(set(m["source"] for m in all_metrics)),
                  "last_update": max(m["timestamp"] for m in all_metrics),
                  "total_runs": len(all_metrics)
              }
          else:
              summary = {
                  "total_records": 0,
                  "avg_success_rate": 0,
                  "sources": [],
                  "last_update": datetime.now().isoformat(),
                  "total_runs": 0
              }

          # Save summary
          with open(site_data / "summary.json", "w") as f:
              json.dump(summary, f, indent=2)

          # Save all metrics for chart rendering
          with open(site_data / "all_metrics.json", "w") as f:
              json.dump(all_metrics, f, indent=2)

          # Copy reports
          import shutil
          reports_dir = Path("data/reports")
          if reports_dir.exists():
              site_reports = Path("_site/reports")
              site_reports.mkdir(exist_ok=True)

              report_list = []
              for report in reports_dir.glob("*_final_quality_report.md"):
                  # Copy report
                  shutil.copy(report, site_reports / report.name)

                  report_list.append({
                      "name": report.stem.replace("_final_quality_report", ""),
                      "filename": report.name
                  })

              # Save report list
              with open(site_data / "reports.json", "w") as f:
                  json.dump(report_list, f, indent=2)
          else:
              # Create empty reports list if no reports exist
              with open(site_data / "reports.json", "w") as f:
                  json.dump([], f, indent=2)

          print(f"✅ Generated dashboard data: {len(all_metrics)} metrics, {summary['total_records']} total records")

          # List generated files for debugging
          import os
          print("\n📁 Generated files:")
          for root, dirs, files in os.walk("_site"):
              for file in files:
                  filepath = os.path.join(root, file)
                  size = os.path.getsize(filepath)
                  print(f"  - {filepath} ({size} bytes)")
          PYTHON_SCRIPT

      - name: Verify build artifacts
        run: |
          echo "📁 Checking _site directory structure:"
          ls -la _site/
          echo ""
          echo "📁 Checking data directory:"
          ls -la _site/data/ || echo "No data directory"
          echo ""
          echo "📋 Checking summary.json:"
          if [ -f _site/data/summary.json ]; then
            cat _site/data/summary.json
          else
            echo "ERROR: summary.json not found!"
          fi
          echo ""
          echo "📋 Checking all_metrics.json:"
          if [ -f _site/data/all_metrics.json ]; then
            echo "all_metrics.json exists ($(wc -l < _site/data/all_metrics.json) lines)"
            head -20 _site/data/all_metrics.json
          else
            echo "ERROR: all_metrics.json not found!"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
