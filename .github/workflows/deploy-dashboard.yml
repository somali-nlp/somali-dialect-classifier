name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'data/metrics/**'
      - 'data/reports/**'
      - 'dashboard/**'
      - '.github/workflows/deploy-dashboard.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install streamlit pandas plotly numpy

      - name: Build static dashboard
        run: |
          # Create professional static HTML dashboard for GitHub Pages

          mkdir -p _site

          # Create professional index.html with editorial-quality UX writing
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta name="description" content="Somali Dialect Classifier - A comprehensive NLP data pipeline for low-resource Somali language processing with 130,000+ deduplicated records">
              <meta name="keywords" content="Somali, NLP, machine learning, dialect classification, low-resource languages">
              <title>Somali Dialect Classifier | Open Source NLP Data Pipeline</title>

              <!-- Google Fonts -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">

              <!-- D3.js v7 for advanced visualizations -->
              <script src="https://d3js.org/d3.v7.min.js"></script>

              <style>
                  /* ========== Design System - CSS Custom Properties ========== */
                  :root {
                      /* Primary Palette */
                      --primary-50:  #eff6ff;
                      --primary-100: #dbeafe;
                      --primary-200: #bfdbfe;
                      --primary-300: #93c5fd;
                      --primary-400: #60a5fa;
                      --primary-500: #3b82f6;
                      --primary-600: #2563eb;
                      --primary-700: #1d4ed8;
                      --primary-800: #1e40af;
                      --primary-900: #1e3a8a;

                      /* Semantic Colors - WCAG AA Compliant */
                      --success-500: #10b981;
                      --success-600: #059669;
                      --success-700: #047857;
                      --warning-500: #f59e0b;
                      --warning-600: #d97706;
                      --warning-700: #b45309;
                      --danger-500:  #ef4444;
                      --danger-600:  #dc2626;
                      --danger-700:  #b91c1c;

                      /* Neutral Palette */
                      --gray-50:  #f9fafb;
                      --gray-100: #f3f4f6;
                      --gray-200: #e5e7eb;
                      --gray-300: #d1d5db;
                      --gray-400: #9ca3af;
                      --gray-500: #6b7280;
                      --gray-600: #4b5563;
                      --gray-700: #374151;
                      --gray-800: #1f2937;
                      --gray-900: #111827;

                      /* Typography Scale (1.25 - Major Third) */
                      --text-xs:   0.75rem;   /* 12px */
                      --text-sm:   0.875rem;  /* 14px */
                      --text-base: 1rem;      /* 16px */
                      --text-lg:   1.125rem;  /* 18px */
                      --text-xl:   1.25rem;   /* 20px */
                      --text-2xl:  1.563rem;  /* 25px */
                      --text-3xl:  1.953rem;  /* 31px */
                      --text-4xl:  2.441rem;  /* 39px */
                      --text-5xl:  3.052rem;  /* 49px */

                      /* Font Families */
                      --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
                      --font-mono: 'Fira Code', 'SF Mono', Consolas, monospace;

                      /* Font Weights */
                      --font-normal:   400;
                      --font-medium:   500;
                      --font-semibold: 600;
                      --font-bold:     700;

                      /* Line Heights */
                      --leading-tight:  1.25;
                      --leading-snug:   1.375;
                      --leading-normal: 1.5;
                      --leading-relaxed: 1.625;

                      /* Spacing System (8px base) */
                      --space-1:  0.25rem;  /* 4px */
                      --space-2:  0.5rem;   /* 8px */
                      --space-3:  0.75rem;  /* 12px */
                      --space-4:  1rem;     /* 16px */
                      --space-5:  1.25rem;  /* 20px */
                      --space-6:  1.5rem;   /* 24px */
                      --space-8:  2rem;     /* 32px */
                      --space-10: 2.5rem;   /* 40px */
                      --space-12: 3rem;     /* 48px */
                      --space-16: 4rem;     /* 64px */
                      --space-20: 5rem;     /* 80px */

                      /* Border Radius */
                      --radius-sm: 0.25rem;  /* 4px */
                      --radius-md: 0.5rem;   /* 8px */
                      --radius-lg: 0.75rem;  /* 12px */
                      --radius-xl: 1rem;     /* 16px */

                      /* Shadows */
                      --shadow-sm:  0 1px 2px 0 rgba(0, 0, 0, 0.05);
                      --shadow-md:  0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      --shadow-lg:  0 10px 15px -3px rgba(0, 0, 0, 0.1);
                      --shadow-xl:  0 20px 25px -5px rgba(0, 0, 0, 0.1);
                  }

                  /* ========== Base Styles ========== */
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }

                  html {
                      scroll-behavior: smooth;
                  }

                  body {
                      font-family: var(--font-sans);
                      font-size: var(--text-base);
                      line-height: var(--leading-normal);
                      color: var(--gray-900);
                      background: var(--gray-50);
                      -webkit-font-smoothing: antialiased;
                      -moz-osx-font-smoothing: grayscale;
                  }

                  /* ========== Accessibility: Skip Link ========== */
                  .skip-link {
                      position: absolute;
                      top: -40px;
                      left: 0;
                      background: var(--primary-600);
                      color: white;
                      padding: var(--space-2) var(--space-4);
                      text-decoration: none;
                      font-weight: var(--font-semibold);
                      z-index: 100;
                      border-radius: 0 0 var(--radius-md) 0;
                  }

                  .skip-link:focus {
                      top: 0;
                  }

                  /* ========== Accessibility: Focus Indicators ========== */
                  *:focus {
                      outline: 2px solid var(--primary-600);
                      outline-offset: 2px;
                  }

                  *:focus:not(:focus-visible) {
                      outline: none;
                  }

                  *:focus-visible {
                      outline: 3px solid var(--primary-600);
                      outline-offset: 3px;
                  }

                  button:focus-visible,
                  a:focus-visible {
                      outline: 3px solid var(--primary-600);
                      outline-offset: 3px;
                      box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);
                  }

                  /* ========== Hero Section ========== */
                  .hero {
                      background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-800) 100%);
                      color: white;
                      padding: var(--space-20) var(--space-6);
                      text-align: center;
                      position: relative;
                      overflow: hidden;
                  }

                  .hero::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: url('data:image/svg+xml,<svg width="60" height="60" xmlns="http://www.w3.org/2000/svg"><circle cx="30" cy="30" r="1.5" fill="rgba(255,255,255,0.1)"/></svg>');
                      opacity: 0.4;
                      z-index: 0;
                  }

                  .hero-content {
                      max-width: 1000px;
                      margin: 0 auto;
                      position: relative;
                      z-index: 1;
                  }

                  .hero-title {
                      font-size: var(--text-5xl);
                      font-weight: var(--font-bold);
                      letter-spacing: -0.025em;
                      margin-bottom: var(--space-4);
                      line-height: var(--leading-tight);
                  }

                  .hero-badge {
                      display: inline-block;
                      background: rgba(255, 255, 255, 0.2);
                      padding: var(--space-1) var(--space-3);
                      border-radius: 9999px;
                      font-size: var(--text-sm);
                      font-weight: var(--font-semibold);
                      margin-left: var(--space-2);
                      vertical-align: middle;
                      border: 1px solid rgba(255, 255, 255, 0.3);
                  }

                  .hero-subtitle {
                      font-size: var(--text-xl);
                      line-height: var(--leading-relaxed);
                      margin-bottom: var(--space-12);
                      color: rgba(255, 255, 255, 0.95);
                      max-width: 800px;
                      margin-left: auto;
                      margin-right: auto;
                  }

                  .hero-subtitle strong {
                      color: white;
                      font-weight: var(--font-semibold);
                  }

                  /* Hero Stats */
                  .hero-stats {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                      gap: var(--space-8);
                      margin: var(--space-12) auto;
                      max-width: 600px;
                  }

                  .hero-stat {
                      text-align: center;
                  }

                  .hero-stat-value {
                      display: block;
                      font-size: var(--text-4xl);
                      font-weight: var(--font-bold);
                      font-family: var(--font-mono);
                      color: white;
                      margin-bottom: var(--space-2);
                  }

                  .hero-stat-label {
                      display: block;
                      font-size: var(--text-sm);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: rgba(255, 255, 255, 0.8);
                      font-weight: var(--font-medium);
                  }

                  /* Hero CTAs */
                  .hero-cta {
                      display: flex;
                      justify-content: center;
                      gap: var(--space-4);
                      flex-wrap: wrap;
                      margin-top: var(--space-8);
                  }

                  /* Button Styles */
                  .btn {
                      display: inline-block;
                      padding: var(--space-3) var(--space-6);
                      font-weight: var(--font-semibold);
                      text-decoration: none;
                      border-radius: var(--radius-lg);
                      transition: all 0.2s ease;
                      font-size: var(--text-base);
                      cursor: pointer;
                      border: 2px solid transparent;
                      min-width: 140px;
                      text-align: center;
                  }

                  .btn-primary {
                      background: white;
                      color: var(--primary-700);
                      border-color: white;
                  }

                  .btn-primary:hover {
                      background: var(--gray-50);
                      transform: translateY(-2px);
                      box-shadow: var(--shadow-lg);
                  }

                  .btn-secondary {
                      background: transparent;
                      color: white;
                      border-color: white;
                  }

                  .btn-secondary:hover {
                      background: white;
                      color: var(--primary-700);
                      transform: translateY(-2px);
                  }

                  .btn-tertiary {
                      background: rgba(255, 255, 255, 0.1);
                      color: white;
                      border-color: rgba(255, 255, 255, 0.3);
                  }

                  .btn-tertiary:hover {
                      background: rgba(255, 255, 255, 0.2);
                      transform: translateY(-2px);
                  }

                  /* ========== Container & Layout ========== */
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: var(--space-8) var(--space-6);
                  }

                  section {
                      margin-bottom: var(--space-16);
                  }

                  h2 {
                      font-size: var(--text-3xl);
                      font-weight: var(--font-bold);
                      color: var(--gray-900);
                      margin-bottom: var(--space-6);
                      padding-bottom: var(--space-3);
                      border-bottom: 3px solid var(--primary-600);
                  }

                  h3 {
                      font-size: var(--text-xl);
                      font-weight: var(--font-semibold);
                      color: var(--gray-800);
                      margin-bottom: var(--space-4);
                  }

                  p {
                      margin-bottom: var(--space-4);
                      color: var(--gray-600);
                  }

                  /* ========== Metrics Grid ========== */
                  .metrics-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: var(--space-6);
                      margin: var(--space-8) 0;
                  }

                  .metric-card {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-6);
                      box-shadow: var(--shadow-sm);
                      transition: all 0.2s ease;
                  }

                  .metric-card:hover {
                      box-shadow: var(--shadow-md);
                      transform: translateY(-2px);
                      border-color: var(--primary-300);
                  }

                  .metric-card.clickable {
                      cursor: pointer;
                  }

                  .metric-card.clickable:active {
                      transform: translateY(0);
                  }

                  .metric-card-header {
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      margin-bottom: var(--space-4);
                  }

                  .metric-card-title {
                      font-size: var(--text-sm);
                      font-weight: var(--font-semibold);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: var(--gray-600);
                  }

                  .metric-card-icon {
                      width: 40px;
                      height: 40px;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      background: var(--primary-50);
                      border-radius: 50%;
                      color: var(--primary-600);
                  }

                  .metric-card-value {
                      font-size: var(--text-4xl);
                      font-weight: var(--font-bold);
                      color: var(--primary-600);
                      font-family: var(--font-mono);
                      line-height: var(--leading-tight);
                      margin-bottom: var(--space-3);
                  }

                  .metric-card-footer {
                      font-size: var(--text-sm);
                      color: var(--gray-600);
                  }

                  .metric-label {
                      font-size: var(--text-sm);
                      font-weight: var(--font-semibold);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: var(--gray-600);
                      margin-bottom: var(--space-3);
                  }

                  .metric-value {
                      font-size: var(--text-4xl);
                      font-weight: var(--font-bold);
                      color: var(--primary-600);
                      font-family: var(--font-mono);
                      line-height: var(--leading-tight);
                  }

                  .status-indicator {
                      display: inline-flex;
                      align-items: center;
                      padding: var(--space-1) var(--space-3);
                      border-radius: 9999px;
                      font-size: var(--text-xs);
                      font-weight: var(--font-semibold);
                      margin-top: var(--space-3);
                  }

                  .status-success {
                      background-color: #d1fae5;
                      color: var(--success-700);
                  }

                  .status-warning {
                      background-color: #fef3c7;
                      color: var(--warning-700);
                  }

                  .status-info {
                      background-color: var(--primary-100);
                      color: var(--primary-700);
                  }

                  /* ========== Cards ========== */
                  .card {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      margin-bottom: var(--space-6);
                      box-shadow: var(--shadow-sm);
                  }

                  /* ========== Charts ========== */
                  .charts-section {
                      display: grid;
                      grid-template-columns: 1fr;
                      gap: var(--space-8);
                      margin: var(--space-8) 0;
                  }

                  .chart-container {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      box-shadow: var(--shadow-sm);
                      min-height: 400px;
                  }

                  .chart-title {
                      font-size: var(--text-lg);
                      font-weight: var(--font-semibold);
                      color: var(--gray-900);
                      margin-bottom: var(--space-6);
                      padding-bottom: var(--space-3);
                      border-bottom: 1px solid var(--gray-200);
                  }

                  .chart-canvas {
                      position: relative;
                      height: 350px;
                      width: 100%;
                  }

                  .charts-grid-2 {
                      display: grid;
                      grid-template-columns: repeat(2, 1fr);
                      gap: var(--space-8);
                      margin: var(--space-8) 0;
                  }

                  /* ========== Loading States ========== */
                  .loading-spinner {
                      border: 3px solid var(--gray-200);
                      border-top: 3px solid var(--primary-600);
                      border-radius: 50%;
                      width: 40px;
                      height: 40px;
                      animation: spin 1s linear infinite;
                      margin: var(--space-8) auto;
                  }

                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }

                  .loading-container {
                      text-align: center;
                      padding: var(--space-12) var(--space-4);
                      color: var(--gray-600);
                  }

                  /* ========== Empty States ========== */
                  .empty-state {
                      text-align: center;
                      padding: var(--space-16) var(--space-8);
                      color: var(--gray-600);
                  }

                  .empty-state-icon {
                      font-size: var(--text-5xl);
                      margin-bottom: var(--space-4);
                      opacity: 0.5;
                  }

                  .empty-state-title {
                      font-size: var(--text-xl);
                      font-weight: var(--font-semibold);
                      color: var(--gray-800);
                      margin-bottom: var(--space-2);
                  }

                  .empty-state-text {
                      color: var(--gray-600);
                      margin-bottom: 0;
                  }

                  /* ========== Features List ========== */
                  .feature-list {
                      list-style: none;
                      display: grid;
                      gap: var(--space-4);
                      margin-top: var(--space-4);
                  }

                  .feature-list li {
                      padding-left: var(--space-6);
                      position: relative;
                      color: var(--gray-700);
                  }

                  .feature-list li::before {
                      content: "";
                      position: absolute;
                      left: 0;
                      top: 0.5rem;
                      width: 6px;
                      height: 6px;
                      background: var(--primary-600);
                      border-radius: 50%;
                  }

                  /* ========== Reports ========== */
                  .report-list {
                      display: grid;
                      gap: var(--space-3);
                      margin-top: var(--space-4);
                  }

                  .report-link {
                      display: flex;
                      align-items: center;
                      padding: var(--space-4) var(--space-5);
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-left: 4px solid var(--primary-600);
                      border-radius: var(--radius-md);
                      text-decoration: none;
                      color: var(--gray-800);
                      font-weight: var(--font-medium);
                      transition: all 0.2s ease;
                  }

                  .report-link:hover {
                      background: var(--primary-50);
                      border-left-color: var(--primary-700);
                      transform: translateX(4px);
                      box-shadow: var(--shadow-sm);
                  }

                  /* ========== Collapsible Sections ========== */
                  .collapsible {
                      cursor: pointer;
                      user-select: none;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .collapsible::after {
                      content: '▼';
                      font-size: var(--text-sm);
                      color: var(--gray-600);
                      transition: transform 0.2s ease;
                  }

                  .collapsible.collapsed::after {
                      transform: rotate(-90deg);
                  }

                  .collapsible-content {
                      max-height: 1000px;
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  .collapsible-content.collapsed {
                      max-height: 0;
                  }

                  /* ========== Sticky Navigation ========== */
                  .main-nav {
                      position: sticky;
                      top: 0;
                      background: white;
                      border-bottom: 1px solid var(--gray-200);
                      z-index: 50;
                      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
                      transition: box-shadow 0.2s ease;
                  }

                  .main-nav.scrolled {
                      box-shadow: var(--shadow-md);
                  }

                  .nav-container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: var(--space-4) var(--space-6);
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .nav-logo {
                      font-size: var(--text-lg);
                      font-weight: var(--font-bold);
                      color: var(--primary-600);
                      text-decoration: none;
                      display: flex;
                      align-items: center;
                  }

                  .nav-logo:hover {
                      color: var(--primary-700);
                  }

                  .nav-menu {
                      display: flex;
                      list-style: none;
                      gap: var(--space-6);
                      margin: 0;
                      padding: 0;
                  }

                  .nav-menu li {
                      margin: 0;
                  }

                  .nav-menu a {
                      text-decoration: none;
                      color: var(--gray-700);
                      font-weight: var(--font-medium);
                      font-size: var(--text-sm);
                      padding: var(--space-2) var(--space-3);
                      border-radius: var(--radius-md);
                      transition: all 0.2s ease;
                      display: block;
                  }

                  .nav-menu a:hover {
                      background: var(--primary-50);
                      color: var(--primary-700);
                  }

                  .nav-menu a.active {
                      background: var(--primary-600);
                      color: white;
                  }

                  .nav-cta {
                      background: var(--primary-600);
                      color: white !important;
                      padding: 10px 20px !important;
                      margin-left: var(--space-3);
                      box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
                      position: relative;
                      overflow: hidden;
                  }

                  .nav-cta::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: -100%;
                      width: 100%;
                      height: 100%;
                      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                      transition: left 0.5s ease;
                  }

                  .nav-cta:hover {
                      background: var(--primary-700) !important;
                      color: white !important;
                      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
                      transform: translateY(-1px);
                  }

                  .nav-cta:hover::before {
                      left: 100%;
                  }

                  /* Mobile hamburger menu */
                  .nav-toggle {
                      display: none;
                      background: none;
                      border: none;
                      cursor: pointer;
                      padding: var(--space-2);
                      color: var(--gray-700);
                  }

                  .nav-toggle:focus {
                      outline: 2px solid var(--primary-600);
                      outline-offset: 2px;
                  }

                  .hamburger {
                      display: block;
                      width: 24px;
                      height: 2px;
                      background: currentColor;
                      position: relative;
                      transition: all 0.3s ease;
                  }

                  .hamburger::before,
                  .hamburger::after {
                      content: '';
                      position: absolute;
                      width: 24px;
                      height: 2px;
                      background: currentColor;
                      transition: all 0.3s ease;
                  }

                  .hamburger::before {
                      top: -8px;
                  }

                  .hamburger::after {
                      top: 8px;
                  }

                  .nav-toggle[aria-expanded="true"] .hamburger {
                      background: transparent;
                  }

                  .nav-toggle[aria-expanded="true"] .hamburger::before {
                      top: 0;
                      transform: rotate(45deg);
                  }

                  .nav-toggle[aria-expanded="true"] .hamburger::after {
                      top: 0;
                      transform: rotate(-45deg);
                  }

                  /* Navbar aliases for HTML class names */
                  .navbar {
                      position: sticky;
                      top: 0;
                      background: white;
                      border-bottom: 1px solid var(--gray-200);
                      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
                      z-index: 1000;
                      transition: box-shadow 0.3s ease;
                  }

                  .navbar-content {
                      max-width: 1440px;
                      margin: 0 auto;
                      padding: var(--space-4) var(--space-6);
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                  }

                  .navbar-brand {
                      font-size: 1.25rem;
                      font-weight: 600;
                      color: var(--primary-600);
                      text-decoration: none;
                      transition: color 0.2s;
                  }

                  .navbar-brand:hover {
                      color: var(--primary-700);
                  }

                  /* ========== Data Export Buttons ========== */
                  .export-buttons {
                      display: flex;
                      gap: var(--space-3);
                      margin-bottom: var(--space-6);
                      flex-wrap: wrap;
                  }

                  .btn-export {
                      display: inline-flex;
                      align-items: center;
                      gap: var(--space-2);
                      padding: var(--space-2) var(--space-4);
                      background: var(--gray-100);
                      color: var(--gray-700);
                      border: 1px solid var(--gray-300);
                      border-radius: var(--radius-md);
                      font-size: var(--text-sm);
                      font-weight: var(--font-medium);
                      cursor: pointer;
                      transition: all 0.2s ease;
                  }

                  .btn-export:hover {
                      background: var(--gray-200);
                      border-color: var(--gray-400);
                  }

                  .btn-export:active {
                      transform: translateY(1px);
                  }

                  /* ========== Responsive Data Tables ========== */
                  .data-table-container {
                      overflow-x: auto;
                      margin: var(--space-4) 0;
                  }

                  .data-table {
                      width: 100%;
                      border-collapse: collapse;
                      font-size: var(--text-sm);
                  }

                  .data-table th,
                  .data-table td {
                      padding: var(--space-3) var(--space-4);
                      text-align: left;
                      border-bottom: 1px solid var(--gray-200);
                  }

                  .data-table th {
                      background: var(--gray-50);
                      font-weight: var(--font-semibold);
                      color: var(--gray-700);
                  }

                  .data-table tbody tr:hover {
                      background: var(--gray-50);
                  }

                  /* Card layout for mobile */
                  .table-card {
                      display: none;
                  }

                  /* ========== Contribution Section ========== */
                  .contribute-section {
                      background: linear-gradient(135deg, var(--primary-50) 0%, var(--primary-100) 100%);
                      border-radius: var(--radius-xl);
                      padding: var(--space-12) var(--space-8);
                      margin: var(--space-16) 0;
                      text-align: center;
                  }

                  .contribute-section h2 {
                      color: var(--primary-900);
                      border: none;
                      margin-bottom: var(--space-4);
                  }

                  .contribute-section > p {
                      color: var(--gray-900);
                      font-size: var(--text-lg);
                      margin-bottom: var(--space-10);
                      max-width: 600px;
                      margin-left: auto;
                      margin-right: auto;
                  }

                  .contribute-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                      gap: var(--space-6);
                      margin-top: var(--space-8);
                  }

                  .contribute-card {
                      background: white;
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      box-shadow: var(--shadow-sm);
                      transition: all 0.3s ease;
                      border: 2px solid transparent;
                  }

                  .contribute-card:hover {
                      transform: translateY(-4px);
                      box-shadow: var(--shadow-lg);
                      border-color: var(--primary-300);
                  }

                  .contribute-card h3 {
                      color: var(--primary-700);
                      margin-bottom: var(--space-3);
                      font-size: var(--text-xl);
                  }

                  .contribute-card p {
                      color: var(--gray-600);
                      margin-bottom: var(--space-5);
                      line-height: var(--leading-relaxed);
                  }

                  .contribute-card .btn {
                      width: 100%;
                  }

                  .contribute-icon {
                      font-size: var(--text-4xl);
                      margin-bottom: var(--space-4);
                  }

                  /* ========== Footer ========== */
                  .footer {
                      margin-top: var(--space-20);
                      padding: var(--space-8) 0;
                      border-top: 1px solid var(--gray-200);
                      text-align: center;
                      color: var(--gray-600);
                      font-size: var(--text-sm);
                  }

                  /* ========== Responsive Design ========== */
                  @media (max-width: 768px) {
                      /* Mobile Navigation */
                      .nav-toggle {
                          display: block;
                      }

                      .nav-menu {
                          position: absolute;
                          top: 100%;
                          left: 0;
                          right: 0;
                          background: white;
                          flex-direction: column;
                          gap: 0;
                          border-bottom: 1px solid var(--gray-200);
                          box-shadow: var(--shadow-md);
                          max-height: 0;
                          overflow: hidden;
                          transition: max-height 0.3s ease;
                      }

                      .nav-menu.open {
                          max-height: 400px;
                      }

                      .nav-menu li {
                          border-bottom: 1px solid var(--gray-100);
                      }

                      .nav-menu a {
                          padding: var(--space-4) var(--space-6);
                          border-radius: 0;
                      }

                      /* Responsive Tables - Card Layout */
                      .data-table {
                          display: none;
                      }

                      .table-card {
                          display: block;
                          background: white;
                          border: 1px solid var(--gray-200);
                          border-radius: var(--radius-lg);
                          padding: var(--space-4);
                          margin-bottom: var(--space-4);
                      }

                      .table-card-row {
                          display: flex;
                          justify-content: space-between;
                          padding: var(--space-2) 0;
                          border-bottom: 1px solid var(--gray-100);
                      }

                      .table-card-row:last-child {
                          border-bottom: none;
                      }

                      .table-card-label {
                          font-weight: var(--font-semibold);
                          color: var(--gray-700);
                          font-size: var(--text-sm);
                      }

                      .table-card-value {
                          color: var(--gray-600);
                          font-size: var(--text-sm);
                      }

                      /* Hero Section */
                      .hero {
                          padding: var(--space-12) var(--space-4);
                      }

                      .hero-title {
                          font-size: var(--text-3xl);
                      }

                      .hero-badge {
                          display: block;
                          margin-left: 0;
                          margin-top: var(--space-2);
                      }

                      .hero-subtitle {
                          font-size: var(--text-base);
                      }

                      .hero-stats {
                          grid-template-columns: 1fr;
                          gap: var(--space-6);
                      }

                      .hero-cta {
                          flex-direction: column;
                      }

                      .btn {
                          width: 100%;
                      }

                      .metrics-grid {
                          grid-template-columns: 1fr;
                      }

                      .metric-value {
                          font-size: var(--text-3xl);
                      }

                      .charts-grid-2 {
                          grid-template-columns: 1fr;
                      }

                      .chart-container {
                          padding: var(--space-6);
                          min-height: 350px;
                      }

                      .chart-canvas {
                          height: 300px;
                      }

                      h2 {
                          font-size: var(--text-2xl);
                      }

                      .contribute-grid {
                          grid-template-columns: 1fr;
                      }
                  }

                  @media (max-width: 480px) {
                      .hero-title {
                          font-size: var(--text-2xl);
                      }

                      .hero-stat-value {
                          font-size: var(--text-3xl);
                      }

                      .container {
                          padding: var(--space-6) var(--space-4);
                      }
                  }

                  /* ========== Tooltip Styles ========== */
                  .tooltip {
                      position: relative;
                      display: inline-block;
                  }

                  .tooltip-trigger {
                      display: inline-flex;
                      align-items: center;
                      justify-content: center;
                      width: 18px;
                      height: 18px;
                      border-radius: 50%;
                      background: var(--primary-100);
                      color: var(--primary-600);
                      font-size: var(--text-xs);
                      font-weight: var(--font-bold);
                      cursor: help;
                      margin-left: var(--space-2);
                      transition: all 0.2s ease;
                  }

                  .tooltip-trigger:hover,
                  .tooltip-trigger:focus {
                      background: var(--primary-600);
                      color: white;
                      transform: scale(1.1);
                  }

                  .tooltip-content {
                      position: absolute;
                      bottom: 100%;
                      left: 50%;
                      transform: translateX(-50%) translateY(-8px);
                      background: var(--gray-900);
                      color: white;
                      padding: var(--space-3) var(--space-4);
                      border-radius: var(--radius-md);
                      font-size: var(--text-sm);
                      line-height: var(--leading-relaxed);
                      white-space: nowrap;
                      opacity: 0;
                      visibility: hidden;
                      transition: all 0.2s ease;
                      z-index: 100;
                      box-shadow: var(--shadow-lg);
                      min-width: 200px;
                      max-width: 320px;
                      white-space: normal;
                  }

                  .tooltip-content::after {
                      content: '';
                      position: absolute;
                      top: 100%;
                      left: 50%;
                      transform: translateX(-50%);
                      border: 6px solid transparent;
                      border-top-color: var(--gray-900);
                  }

                  .tooltip-trigger:hover + .tooltip-content,
                  .tooltip-trigger:focus + .tooltip-content {
                      opacity: 1;
                      visibility: visible;
                  }

                  /* ========== Modal Styles ========== */
                  .modal {
                      display: none;
                      position: fixed;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: rgba(0, 0, 0, 0.6);
                      z-index: 1000;
                      padding: var(--space-4);
                      overflow-y: auto;
                      backdrop-filter: blur(4px);
                  }

                  .modal.open {
                      display: flex;
                      align-items: center;
                      justify-content: center;
                  }

                  .modal-content {
                      background: white;
                      border-radius: var(--radius-xl);
                      max-width: 900px;
                      width: 100%;
                      max-height: 90vh;
                      overflow-y: auto;
                      box-shadow: var(--shadow-xl);
                      animation: modalSlideIn 0.3s ease;
                  }

                  @keyframes modalSlideIn {
                      from {
                          transform: translateY(40px);
                          opacity: 0;
                      }
                      to {
                          transform: translateY(0);
                          opacity: 1;
                      }
                  }

                  .modal-header {
                      padding: var(--space-8);
                      border-bottom: 1px solid var(--gray-200);
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .modal-title {
                      font-size: var(--text-2xl);
                      font-weight: var(--font-bold);
                      color: var(--gray-900);
                      margin: 0;
                  }

                  .modal-close {
                      background: var(--gray-100);
                      border: none;
                      width: 40px;
                      height: 40px;
                      border-radius: 50%;
                      cursor: pointer;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      font-size: var(--text-xl);
                      color: var(--gray-600);
                      transition: all 0.2s ease;
                  }

                  .modal-close:hover {
                      background: var(--gray-200);
                      color: var(--gray-900);
                  }

                  .modal-body {
                      padding: var(--space-8);
                  }

                  /* ========== Funnel Chart Styles ========== */
                  .funnel-container {
                      background: white;
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      margin: var(--space-6) 0;
                  }

                  .funnel-stage {
                      position: relative;
                      margin-bottom: var(--space-6);
                  }

                  .funnel-stage-header {
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      margin-bottom: var(--space-3);
                  }

                  .funnel-stage-title {
                      font-size: var(--text-lg);
                      font-weight: var(--font-semibold);
                      color: var(--gray-900);
                  }

                  .funnel-stage-value {
                      font-size: var(--text-xl);
                      font-weight: var(--font-bold);
                      font-family: var(--font-mono);
                  }

                  .funnel-bar {
                      height: 60px;
                      border-radius: var(--radius-md);
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      padding: 0 var(--space-6);
                      color: white;
                      font-weight: var(--font-semibold);
                      box-shadow: var(--shadow-sm);
                      transition: all 0.3s ease;
                  }

                  .funnel-bar:hover {
                      transform: translateX(4px);
                      box-shadow: var(--shadow-md);
                  }

                  .funnel-bar.stage-discovered {
                      background: linear-gradient(135deg, var(--primary-500), var(--primary-600));
                  }

                  .funnel-bar.stage-fetched {
                      background: linear-gradient(135deg, var(--success-500), var(--success-600));
                  }

                  .funnel-bar.stage-processed {
                      background: linear-gradient(135deg, #10b981, #059669);
                  }

                  .funnel-bar.stage-failed {
                      background: linear-gradient(135deg, var(--danger-500), var(--danger-600));
                  }

                  .funnel-arrow {
                      text-align: center;
                      color: var(--gray-400);
                      font-size: var(--text-2xl);
                      margin: var(--space-2) 0;
                  }

                  .funnel-dropoff {
                      display: inline-flex;
                      align-items: center;
                      gap: var(--space-2);
                      padding: var(--space-1) var(--space-3);
                      background: rgba(255, 255, 255, 0.2);
                      border-radius: 9999px;
                      font-size: var(--text-sm);
                  }

                  /* ========== Breakdown Table Styles ========== */
                  .breakdown-table {
                      width: 100%;
                      border-collapse: collapse;
                      margin: var(--space-6) 0;
                  }

                  .breakdown-table th {
                      background: var(--gray-50);
                      padding: var(--space-4);
                      text-align: left;
                      font-weight: var(--font-semibold);
                      color: var(--gray-700);
                      border-bottom: 2px solid var(--gray-200);
                  }

                  .breakdown-table td {
                      padding: var(--space-4);
                      border-bottom: 1px solid var(--gray-100);
                  }

                  .breakdown-table tbody tr:hover {
                      background: var(--gray-50);
                  }

                  .progress-bar-container {
                      width: 100%;
                      height: 8px;
                      background: var(--gray-200);
                      border-radius: 9999px;
                      overflow: hidden;
                      margin-top: var(--space-2);
                  }

                  .progress-bar {
                      height: 100%;
                      border-radius: 9999px;
                      transition: width 0.3s ease;
                  }

                  .progress-bar.good {
                      background: var(--success-500);
                  }

                  .progress-bar.warning {
                      background: var(--warning-500);
                  }

                  .progress-bar.poor {
                      background: var(--danger-500);
                  }

                  /* ========== FAQ Styles ========== */
                  .faq-container {
                      margin-top: var(--space-8);
                  }

                  .faq-item {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      margin-bottom: var(--space-4);
                      overflow: hidden;
                  }

                  .faq-question {
                      width: 100%;
                      padding: var(--space-5);
                      background: none;
                      border: none;
                      text-align: left;
                      font-size: var(--text-base);
                      font-weight: var(--font-semibold);
                      color: var(--gray-900);
                      cursor: pointer;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      transition: background 0.2s ease;
                  }

                  .faq-question:hover {
                      background: var(--gray-50);
                  }

                  .faq-question::after {
                      content: '+';
                      font-size: var(--text-2xl);
                      color: var(--primary-600);
                      transition: transform 0.3s ease;
                  }

                  .faq-question.open::after {
                      content: '−';
                  }

                  .faq-answer {
                      max-height: 0;
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  .faq-answer.open {
                      max-height: 500px;
                  }

                  .faq-answer-content {
                      padding: 0 var(--space-5) var(--space-5) var(--space-5);
                      color: var(--gray-600);
                      line-height: var(--leading-relaxed);
                  }

                  .faq-answer-content ul {
                      margin-left: var(--space-6);
                      margin-top: var(--space-2);
                  }

                  .faq-answer-content li {
                      margin-bottom: var(--space-2);
                  }

                  .faq-answer-content code {
                      background: var(--gray-100);
                      padding: var(--space-1) var(--space-2);
                      border-radius: var(--radius-sm);
                      font-family: var(--font-mono);
                      font-size: var(--text-sm);
                      color: var(--primary-700);
                  }

                  /* ========== Print Styles ========== */
                  @media print {
                      .skip-link,
                      .hero-cta,
                      .btn,
                      .modal {
                          display: none;
                      }

                      .hero {
                          background: white;
                          color: black;
                          border-bottom: 2px solid black;
                      }

                      .chart-container {
                          page-break-inside: avoid;
                      }
                  }

                  /* ========== D3.js Visualization Styles ========== */

                  /* Paul Tol's Colorblind-Safe Palette for D3.js */
                  :root {
                      --d3-color-blue: #4477AA;
                      --d3-color-red: #EE6677;
                      --d3-color-green: #228833;
                      --d3-color-yellow: #CCBB44;
                      --d3-color-cyan: #66CCEE;
                      --d3-color-purple: #AA3377;
                      --d3-color-grey: #BBBBBB;
                  }

                  /* D3.js Visualization Containers */
                  .d3-viz-container {
                      width: 100%;
                      min-height: 400px;
                      position: relative;
                  }

                  .viz-container {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-6);
                      box-shadow: var(--shadow-sm);
                  }

                  .viz-grid-2 {
                      display: grid;
                      grid-template-columns: repeat(2, 1fr);
                      gap: var(--space-6);
                      margin: var(--space-6) 0;
                  }

                  @media (max-width: 968px) {
                      .viz-grid-2 {
                          grid-template-columns: 1fr;
                      }
                  }

                  /* Bubble Timeline */
                  .bubble {
                      cursor: pointer;
                      transition: opacity 0.2s ease;
                  }

                  .bubble:hover {
                      opacity: 1 !important;
                  }

                  .connection-line {
                      fill: none;
                      stroke: var(--gray-500);
                      stroke-width: 1;
                      opacity: 0.3;
                  }

                  .swim-lane-label {
                      font-size: 0.875rem;
                      font-weight: 500;
                      fill: var(--gray-600);
                  }

                  .anomaly-annotation {
                      font-size: 11px;
                      fill: var(--danger-600);
                      font-weight: 600;
                  }

                  /* Radial Comparison */
                  .arc {
                      cursor: pointer;
                      transition: opacity 0.3s ease;
                  }

                  .arc:hover {
                      opacity: 0.8;
                  }

                  .arc-label {
                      font-size: 0.875rem;
                      font-weight: 500;
                      pointer-events: none;
                  }

                  .sparkline {
                      fill: none;
                      stroke-width: 1.5;
                  }

                  /* Horizon Charts */
                  .horizon-band {
                      opacity: 0.9;
                  }

                  .horizon-label {
                      font-size: 0.875rem;
                      font-weight: 500;
                      fill: var(--gray-900);
                  }

                  .baseline {
                      stroke: var(--gray-500);
                      stroke-width: 1;
                      stroke-dasharray: 2, 2;
                      opacity: 0.5;
                  }

                  /* Hexbin Heatmap */
                  .hexagon {
                      stroke: #fff;
                      stroke-width: 1;
                      cursor: pointer;
                      transition: opacity 0.2s ease;
                  }

                  .hexagon:hover {
                      opacity: 1;
                      stroke-width: 2;
                  }

                  .quadrant-label {
                      font-size: 14px;
                      font-weight: 600;
                      fill: var(--gray-500);
                      opacity: 0.6;
                  }

                  .scatter-point {
                      fill-opacity: 0.6;
                      stroke: #fff;
                      stroke-width: 1;
                  }

                  /* Streamgraph */
                  .stream-layer {
                      opacity: 0.85;
                      transition: opacity 0.3s ease;
                  }

                  .stream-layer:hover {
                      opacity: 1;
                  }

                  /* Health Matrix */
                  .health-cell {
                      cursor: pointer;
                  }

                  .health-metric-label {
                      font-size: 11px;
                      font-weight: 500;
                      fill: var(--gray-900);
                  }

                  .health-value {
                      font-size: 18px;
                      font-weight: 700;
                  }

                  .health-sparkline {
                      fill: none;
                      stroke-width: 2;
                  }

                  /* D3.js Axes */
                  .axis text {
                      font-size: 0.875rem;
                      fill: var(--gray-600);
                  }

                  .axis path,
                  .axis line {
                      stroke: var(--gray-300);
                  }

                  .axis-label {
                      font-size: 0.875rem;
                      font-weight: 500;
                      fill: var(--gray-900);
                  }

                  /* D3.js Tooltips */
                  .d3-tooltip {
                      position: absolute;
                      background: rgba(0, 0, 0, 0.9);
                      color: white;
                      padding: 12px 16px;
                      border-radius: 8px;
                      font-size: 0.875rem;
                      pointer-events: none;
                      z-index: 1000;
                      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
                      max-width: 300px;
                  }

                  .d3-tooltip strong {
                      display: block;
                      margin-bottom: 4px;
                      color: var(--d3-color-cyan);
                  }

                  .d3-tooltip .metric {
                      margin: 4px 0;
                  }

                  /* D3.js Legend */
                  .legend {
                      font-size: 0.875rem;
                  }

                  .legend-item {
                      cursor: pointer;
                  }

                  .legend-item rect,
                  .legend-item circle {
                      transition: opacity 0.2s ease;
                  }

                  .legend-item:hover rect,
                  .legend-item:hover circle {
                      opacity: 0.7;
                  }

                  .legend-label {
                      fill: var(--gray-900);
                  }

                  /* Hit Area for Touch Targets */
                  .hit-area {
                      fill: transparent;
                      stroke: none;
                      cursor: pointer;
                  }

                  /* SVG Focus Styles */
                  svg *:focus {
                      outline: 3px solid var(--primary-600);
                      outline-offset: 2px;
                  }

                  /* Active/Pressed States for D3.js Elements */
                  .bubble:active,
                  .arc:active,
                  .hexagon:active,
                  .stream-layer:active,
                  .health-cell:active {
                      transform: scale(0.97);
                      transition: transform 0.1s ease-out;
                  }

                  /* Mobile Responsive for D3.js */
                  @media (max-width: 768px) {
                      .d3-viz-container {
                          min-height: 300px;
                      }

                      .horizon-label {
                          font-size: 10px;
                      }

                      .horizon-label.truncate {
                          max-width: 80px;
                          overflow: hidden;
                          text-overflow: ellipsis;
                          white-space: nowrap;
                      }
                  }

                  /* D3.js Feature Badges */
                  .d3-feature-badges {
                      display: flex;
                      flex-wrap: wrap;
                      gap: 8px;
                      margin-bottom: 16px;
                  }

                  .d3-feature-badge {
                      background: var(--primary-50);
                      color: var(--primary-700);
                      padding: 4px 12px;
                      border-radius: 16px;
                      font-size: 0.75rem;
                      font-weight: 500;
                      white-space: nowrap;
                  }
              </style>
          </head>
          <body>
              <!-- Skip to content link -->
              <a href="#main-content" class="skip-link">Skip to main content</a>

              <!-- Navigation -->
              <nav class="navbar" role="navigation" aria-label="Main navigation">
                  <div class="navbar-content">
                      <a href="#" class="navbar-brand" aria-label="Somali Dialect Classifier home">
                          Somali Dialect Classifier
                      </a>
                      <button class="nav-toggle"
                              aria-expanded="false"
                              aria-controls="navMenu"
                              aria-label="Toggle navigation menu">
                          <span class="hamburger">☰</span>
                      </button>
                      <ul class="nav-menu" id="navMenu">
                          <li><a href="#dashboard">Overview</a></li>
                          <li><a href="#visualizations">Insights</a></li>
                          <li><a href="#about">About</a></li>
                          <li><a href="#reports">Reports</a></li>
                          <li><a href="#understanding">Understanding the Metrics</a></li>
                          <li><a href="#contribute" class="nav-cta">Contribute</a></li>
                      </ul>
                  </div>
              </nav>

              <!-- Hero Section -->
              <section class="hero" role="banner">
                  <div class="hero-content">
                      <h1 class="hero-title">
                          Somali Dialect Classifier
                          <span class="hero-badge">Open Source</span>
                      </h1>

                      <p class="hero-subtitle">
                          Track how Wikipedia, BBC Somali, HuggingFace MC4, and Språkbanken sources contribute to
                          <strong>130,000+ deduplicated Somali language records</strong>—Africa's largest open dialect corpus.
                      </p>

                      <div class="hero-stats" id="heroStats" role="region" aria-label="Key metrics overview">
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroTotalRecords">0</span>
                              <span class="hero-stat-label">Total Records</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSuccessRate">0%</span>
                              <span class="hero-stat-label">Success Rate</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSources">0</span>
                              <span class="hero-stat-label">Data Sources</span>
                          </div>
                      </div>

                      <div class="hero-cta">
                          <a href="#dashboard" class="btn btn-primary">Explore the Data</a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                             class="btn btn-secondary"
                             aria-label="View project on GitHub">
                              View on GitHub
                          </a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme"
                             class="btn btn-tertiary"
                             aria-label="Read project documentation">
                              Documentation
                          </a>
                      </div>
                  </div>
              </section>

              <main id="main-content" class="container">
                  <!-- Key Metrics Section -->
                  <section id="dashboard" aria-labelledby="dashboard-heading">
                      <h2 id="dashboard-heading">Current Pipeline State</h2>
                      <div class="metrics-grid" id="metricsGrid" role="region" aria-live="polite">
                          <div class="loading-container">
                              <div class="loading-spinner" role="status" aria-label="Loading metrics"></div>
                              <p>Loading pipeline metrics...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Data Visualizations Section -->
                  <section id="visualizations" aria-labelledby="viz-heading">
                      <h2 id="viz-heading">Data Collection & Processing Insights</h2>

                      <div class="section-intro">
                          <p>
                              Watch how raw web content transforms into structured language datasets. These interactive
                              visualizations track source performance, processing speed, and quality metrics across
                              130,000+ Somali text records.
                          </p>
                      </div>

                      <!-- Bubble Timeline -->
                      <div class="viz-container">
                          <h3 class="viz-title">Collection Timeline: When Did We Gather Data?</h3>
                          <p class="viz-subtitle">
                              Track collection velocity across Wikipedia, BBC Somali, HuggingFace, and Språkbanken. Larger bubbles show higher-volume periods, colors distinguish sources.
                          </p>
                          <div id="d3-bubble-timeline" class="d3-viz-container" role="img" aria-label="Timeline visualization showing data collection activity by source"></div>
                      </div>

                      <!-- Radial Comparison & Streamgraph -->
                      <div class="viz-grid-2">
                          <div class="viz-container">
                              <h3 class="viz-title">Which Sources Deliver the Most Data?</h3>
                              <p class="viz-subtitle">
                                  Radial comparison of total record contributions by source, with embedded trend sparklines showing collection momentum.
                              </p>
                              <div id="d3-radial-comparison" class="d3-viz-container" role="img" aria-label="Radial chart comparing performance across data sources"></div>
                          </div>

                          <div class="viz-container">
                              <h3 class="viz-title">Dataset Growth: Cumulative Records Over Time</h3>
                              <p class="viz-subtitle">
                                  Watch the dataset expand as each source contributes records. Hover to see exact counts, dates, and cumulative totals at any point in the timeline.
                              </p>
                              <div id="d3-streamgraph" class="d3-viz-container" role="img" aria-label="Streamgraph showing processing volume changes over time"></div>
                          </div>
                      </div>

                      <!-- Horizon Charts -->
                      <div class="viz-container">
                          <h3 class="viz-title">Success Rate Trends: Performance Against 90% Baseline</h3>
                          <p class="viz-subtitle">
                              Horizon charts reveal how each source performs against the 90% success threshold. Green areas exceed targets, red areas signal processing issues requiring attention.
                          </p>
                          <div id="d3-horizon-charts" class="d3-viz-container" role="img" aria-label="Horizon charts showing success rate trends for each source" style="min-height: 250px;"></div>
                      </div>

                      <!-- Hexbin Heatmap & Health Matrix -->
                      <div class="viz-grid-2">
                          <div class="viz-container">
                              <h3 class="viz-title">Speed vs. Quality: How Sources Compare</h3>
                              <p class="viz-subtitle">
                                  Scatter plot correlating success rates with deduplication rates. Bubble size represents total records collected. Zoomed to actual data range for clarity.
                              </p>
                              <div id="d3-hexbin-heatmap" class="d3-viz-container" role="img" aria-label="Hexbin heatmap showing correlation between quality and deduplication"></div>
                          </div>

                          <div class="viz-container">
                              <h3 class="viz-title">Source Quality at a Glance: Uptime, Success, Records, Dedup</h3>
                              <p class="viz-subtitle">
                                  Quick health check across all sources. Each cell shows current value, status indicator, and sparkline trend. Color-coded for rapid diagnostics.
                              </p>
                              <div id="d3-health-matrix" class="d3-viz-container" role="img" aria-label="Health matrix showing key performance indicators for each source" style="min-height: 500px;"></div>
                          </div>
                      </div>
                  </section>

                  <!-- About Section -->
                  <section id="about" aria-labelledby="about-heading">
                      <h2 id="about-heading" class="collapsible" onclick="toggleCollapsible(this)"
                          tabindex="0"
                          role="button"
                          aria-expanded="true"
                          onkeypress="if(event.key==='Enter'||event.key===' ') toggleCollapsible(this)">
                          About This Project
                      </h2>
                      <div class="collapsible-content">
                          <div class="card">
                              <p>
                                  The Somali Dialect Classifier addresses a fundamental challenge in natural language processing:
                                  <strong>building robust datasets for low-resource languages</strong>. While Somali is spoken by over
                                  16 million people across the Horn of Africa and diaspora communities worldwide, it lacks the extensive
                                  datasets that power modern language technologies.
                              </p>
                              <p>
                                  This project creates an automated, production-grade data pipeline that continuously aggregates,
                                  validates, and refines Somali text from diverse sources—enabling researchers and developers to
                                  build more accurate dialect classifiers, translation systems, and language models.
                              </p>

                              <h3>Key Features</h3>
                              <ul class="feature-list">
                                  <li><strong>Multi-Source Aggregation:</strong> Combines Wikipedia, BBC Somali, HuggingFace corpora, and academic collections</li>
                                  <li><strong>Quality-First Architecture:</strong> Comprehensive language detection, filtering, and validation at every stage</li>
                                  <li><strong>Intelligent Deduplication:</strong> MinHash LSH algorithm removes duplicates while preserving dialectal variations</li>
                                  <li><strong>Production-Grade Pipeline:</strong> Bronze-silver-gold layered architecture ensures data quality and traceability</li>
                              </ul>
                          </div>
                      </div>
                  </section>

                  <!-- Reports Section -->
                  <section id="reports" aria-labelledby="reports-heading">
                      <h2 id="reports-heading">Source-specific quality analysis</h2>
                      <div class="report-list" id="reportList" role="list">
                          <div class="loading-container">
                              <p>Loading quality reports...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Understanding the Metrics Section -->
                  <section id="understanding" aria-labelledby="understanding-heading">
                      <h2 id="understanding-heading">Understanding the Metrics</h2>
                      <div class="faq-container">
                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  What does "Success Rate" mean?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>
                                          Success rate measures how effectively our pipeline fetches and processes web content.
                                          It's calculated as the percentage of fetched URLs that successfully make it through
                                          our quality filters and validation checks.
                                      </p>
                                      <p><code>Success Rate = (Records Successfully Processed / Total URLs Fetched) × 100%</code></p>
                                      <p>
                                          <strong>Important context:</strong> This metric focuses on <em>fetch and processing success</em>,
                                          not discovery-to-completion conversion. Many discovered URLs are intentionally filtered out
                                          before fetching—navigation elements, asset links, and known duplicates never enter the pipeline.
                                      </p>
                                      <p>
                                          For file-based sources like Wikipedia dumps and academic corpora, you'll typically see 100%
                                          success rates because files are pre-validated. For web scraping and streaming sources,
                                          expect 95-100% success rates, with minor failures due to network issues or content that
                                          doesn't meet quality thresholds.
                                      </p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  Why isn't the success rate 100%?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>
                                          A success rate below 100% is normal and expected for web-based data collection.
                                          The internet is dynamic, and several legitimate issues can cause processing failures:
                                      </p>
                                      <ul>
                                          <li><strong>404 Errors:</strong> Content moved or deleted since discovery</li>
                                          <li><strong>Access Restrictions:</strong> Robots.txt rules or authentication requirements</li>
                                          <li><strong>Network Issues:</strong> Timeouts, connection failures, or rate limiting</li>
                                          <li><strong>Quality Filtering:</strong> Content too short, wrong language, or insufficient information</li>
                                          <li><strong>Format Problems:</strong> Malformed HTML or unsupported content types</li>
                                      </ul>
                                      <p>
                                          Our current 98.5% success rate indicates excellent pipeline health—we're successfully
                                          processing the vast majority of targets while maintaining high quality standards.
                                      </p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  How do I interpret the pipeline metrics?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>Our metrics tell the story of data flowing through multiple quality gates:</p>
                                      <ul>
                                          <li><strong>URLs Discovered:</strong> Total links found during source exploration</li>
                                          <li><strong>URLs Fetched:</strong> Subset of discovered URLs that passed initial filters and were actually downloaded</li>
                                          <li><strong>URLs Processed:</strong> Successfully validated and added to the dataset</li>
                                          <li><strong>Records Written:</strong> Final deduplicated records stored in the gold tier</li>
                                      </ul>
                                      <p>
                                          <strong>Success rate</strong> is calculated as <code>(URLs Processed / URLs Fetched) × 100%</code>—
                                          measuring how well we convert fetched content into valid records.
                                          <strong>Deduplication rate</strong> shows what percentage of processed records were duplicates
                                          of existing data, helping us understand content overlap across sources.
                                      </p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  How can I investigate pipeline issues?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>
                                          We provide multiple layers of diagnostic information to help you understand
                                          pipeline behavior and troubleshoot any issues:
                                      </p>
                                      <ul>
                                          <li><strong>Quality Reports:</strong> Detailed breakdowns of HTTP status codes, error types, and failure patterns</li>
                                          <li><strong>Metrics Files:</strong> Raw JSON data in <code>data/metrics/*_processing.json</code> with granular statistics</li>
                                          <li><strong>Visualization Drill-Downs:</strong> Click on charts to explore source-specific performance</li>
                                          <li><strong>Health Matrix:</strong> Real-time indicators showing uptime, latency, and error rates per source</li>
                                      </ul>
                                      <p>
                                          Each metrics file contains <code>http_status_codes</code>, <code>error_types</code>,
                                          and <code>filter_reasons</code> fields that provide full transparency into what happened
                                          during processing. Use these to optimize your pipeline configuration or identify sources
                                          that may need attention.
                                      </p>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </section>

                  <!-- Contribution Section -->
                  <section id="contribute" class="contribute-section" aria-labelledby="contribute-heading">
                      <div class="card">
                          <h2 id="contribute-heading">Contribute to Somali NLP</h2>
                          <p>
                              Join a growing community of researchers, developers, and language enthusiasts building
                              the largest open-source Somali language dataset. Whether you're contributing code,
                              identifying new data sources, or improving documentation—your expertise helps advance
                              language technology for millions of Somali speakers worldwide.
                          </p>
                          <div style="margin-top: var(--space-6);">
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                                 class="btn btn-primary"
                                 aria-label="Contribute on GitHub">
                                  Get Started on GitHub
                              </a>
                          </div>
                      </div>
                  </section>
              </main>

              <footer class="footer" role="contentinfo">
                  <p>Somali Dialect Classifier | Open Source NLP Research Project</p>
                  <p style="margin-top: var(--space-2); font-size: var(--text-xs);">
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                         aria-label="View source code on GitHub">GitHub</a>
                      ·
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme"
                         aria-label="Read documentation">Documentation</a>
                      ·
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier/blob/main/LICENSE"
                         aria-label="View license">License</a>
                  </p>
              </footer>

              <!-- D3.js Tooltip -->
              <div class="d3-tooltip" id="d3Tooltip" role="tooltip"></div>

              <script>
                  // ========== Global State ==========
                  let allMetrics = [];
                  let summaryData = {};

                  // ========== D3.js Color Palette (Colorblind-Safe: Paul Tol's Bright Scheme) ==========
                  const d3SourceColors = {
                      'Wikipedia-Somali': '#4477AA',
                      'BBC-Somali': '#EE6677',
                      'HuggingFace-Somali_c4-so': '#228833',
                      'Sprakbanken-Somali': '#CCBB44',
                      'HuggingFace-MC4': '#228833',
                      'default': '#66CCEE'
                  };

                  // ========== D3.js Tooltip Helper ==========
                  const d3Tooltip = {
                      element: document.getElementById('d3Tooltip'),
                      show(content, event) {
                          this.element.innerHTML = content;
                          this.element.classList.add('visible');
                          this.updatePosition(event);
                      },
                      hide() {
                          this.element.classList.remove('visible');
                      },
                      updatePosition(event) {
                          const tooltip = this.element;
                          const x = event.pageX + 15;
                          const y = event.pageY + 15;
                          tooltip.style.left = x + 'px';
                          tooltip.style.top = y + 'px';
                      }
                  };

                  // ========== Data Loading ==========
                  // Get base path for GitHub Pages support
                  function getBasePath() {
                      const pathSegments = window.location.pathname.split('/').filter(s => s);
                      // If on GitHub Pages (e.g., /somali-dialect-classifier/), use that as base
                      if (pathSegments.length > 0 && window.location.hostname.includes('github.io')) {
                          return '/' + pathSegments[0] + '/';
                      }
                      return '/';
                  }

                  const basePath = getBasePath();
                  console.log('📍 Base path:', basePath);

                  async function loadData() {
                      try {
                          console.log('🔄 Loading data...');

                          // Load summary
                          const summaryURL = basePath + 'data/summary.json';
                          console.log('📥 Fetching summary:', summaryURL);
                          const summaryResponse = await fetch(summaryURL);
                          if (!summaryResponse.ok) {
                              throw new Error(`Failed to load summary: ${summaryResponse.status} ${summaryResponse.statusText}`);
                          }
                          summaryData = await summaryResponse.json();
                          console.log('✅ Summary loaded:', summaryData);

                          // Load all metrics
                          const metricsURL = basePath + 'data/all_metrics.json';
                          console.log('📥 Fetching metrics:', metricsURL);
                          const metricsResponse = await fetch(metricsURL);
                          if (!metricsResponse.ok) {
                              throw new Error(`Failed to load metrics: ${metricsResponse.status} ${metricsResponse.statusText}`);
                          }
                          allMetrics = await metricsResponse.json();
                          console.log('✅ Metrics loaded:', {
                              count: allMetrics.length,
                              records: summaryData.total_records,
                              sources: summaryData.sources
                          });

                          // Update UI
                          updateHeroStats();
                          updateMetricsGrid();
                          renderAllVisualizations();
                      } catch (error) {
                          console.error('❌ Error loading data:', error);
                          showError(`Failed to load dashboard data: ${error.message}`);
                      }
                  }

                  // ========== Hero Stats Update ==========
                  function updateHeroStats() {
                      document.getElementById('heroTotalRecords').textContent =
                          summaryData.total_records?.toLocaleString() || '0';
                      document.getElementById('heroSuccessRate').textContent =
                          ((summaryData.avg_success_rate || 0) * 100).toFixed(1) + '%';
                      document.getElementById('heroSources').textContent =
                          summaryData.sources?.length || '0';
                  }

                  // ========== Metrics Grid Update ==========
                  function updateMetricsGrid() {
                      const grid = document.getElementById('metricsGrid');

                      const metrics = [
                          {
                              title: 'Total Records',
                              value: summaryData.total_records?.toLocaleString() || '0',
                              icon: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                  <polyline points="14 2 14 8 20 8"></polyline>
                                  <line x1="16" y1="13" x2="8" y2="13"></line>
                                  <line x1="16" y1="17" x2="8" y2="17"></line>
                                  <polyline points="10 9 9 9 8 9"></polyline>
                              </svg>`,
                              footer: 'Deduplicated and validated'
                          },
                          {
                              title: 'Success Rate',
                              value: ((summaryData.avg_success_rate || 0) * 100).toFixed(1) + '%',
                              icon: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                  <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
                              </svg>`,
                              footer: 'Processing efficiency'
                          },
                          {
                              title: 'Data Sources',
                              value: summaryData.sources?.length || '0',
                              icon: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                  <ellipse cx="12" cy="5" rx="9" ry="3"></ellipse>
                                  <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path>
                                  <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path>
                              </svg>`,
                              footer: summaryData.sources?.join(', ') || 'No sources'
                          },
                          {
                              title: 'Pipeline Runs',
                              value: summaryData.total_runs || '0',
                              icon: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                  <polyline points="16 18 22 12 16 6"></polyline>
                                  <polyline points="8 6 2 12 8 18"></polyline>
                              </svg>`,
                              footer: 'Total executions'
                          }
                      ];

                      grid.innerHTML = metrics.map(m => `
                          <div class="metric-card">
                              <div class="metric-card-header">
                                  <span class="metric-card-title">${m.title}</span>
                                  <div class="metric-card-icon">${m.icon}</div>
                              </div>
                              <div class="metric-card-value">${m.value}</div>
                              <div class="metric-card-footer">${m.footer}</div>
                          </div>
                      `).join('');
                  }

                  // ========== Render All D3.js Visualizations ==========
                  function renderAllVisualizations() {
                      console.log('🎨 Rendering visualizations...');
                      console.log('📊 Metrics available:', allMetrics.length);

                      if (!allMetrics || allMetrics.length === 0) {
                          console.warn('⚠️ No metrics data available for visualizations');
                          const vizContainers = [
                              'd3-bubble-timeline',
                              'd3-radial-comparison',
                              'd3-streamgraph',
                              'd3-horizon-charts',
                              'd3-hexbin-heatmap',
                              'd3-health-matrix'
                          ];
                          vizContainers.forEach(id => {
                              const container = document.getElementById(id);
                              if (container) {
                                  container.innerHTML = '<div style="padding: 2rem; text-align: center; color: #6b7280;">No data available</div>';
                              }
                          });
                          return;
                      }

                      try {
                          console.log('Creating bubble timeline...');
                          createBubbleTimeline(allMetrics);

                          console.log('Creating radial comparison...');
                          createRadialComparison(allMetrics);

                          console.log('Creating streamgraph...');
                          createStreamgraph(allMetrics);

                          console.log('Creating horizon charts...');
                          createHorizonCharts(allMetrics);

                          console.log('Creating hexbin heatmap...');
                          createHexbinHeatmap(allMetrics);

                          console.log('Creating health matrix...');
                          createHealthMatrix(allMetrics);

                          console.log('✅ All D3.js visualizations rendered successfully');
                      } catch (error) {
                          console.error('❌ Error rendering visualizations:', error);
                      }
                  }

                  // ========== D3.js Visualization 1: Bubble Timeline ==========
                  function createBubbleTimeline(data) {
                      try {
                          const container = document.getElementById('d3-bubble-timeline');
                          if (!container) {
                              console.warn('Bubble timeline container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const margin = { top: 40, right: 40, bottom: 100, left: 40 };
                      const width = container.clientWidth - margin.left - margin.right;
                      const height = 400 - margin.top - margin.bottom;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width + margin.left + margin.right)
                          .attr('height', height + margin.top + margin.bottom)
                          .append('g')
                          .attr('transform', `translate(${margin.left},${margin.top})`);

                      // Process data
                      const processedData = data.map(d => ({
                          timestamp: new Date(d.timestamp),
                          source: d.source,
                          records: d.records_written || 0,
                          successRate: d.success_rate || 0
                      }));

                      // Scales
                      const xScale = d3.scaleTime()
                          .domain(d3.extent(processedData, d => d.timestamp))
                          .range([0, width]);

                      // Create vertical bands for each source (no axis labels)
                      const sources = [...new Set(processedData.map(d => d.source))];
                      const yScale = d3.scaleBand()
                          .domain(sources)
                          .range([0, height])
                          .padding(0.3);

                      const radiusScale = d3.scaleSqrt()
                          .domain([0, d3.max(processedData, d => d.records)])
                          .range([3, 30]);

                      // X-axis only (no Y-axis)
                      svg.append('g')
                          .attr('transform', `translate(0,${height})`)
                          .call(d3.axisBottom(xScale).ticks(6))
                          .style('font-size', '12px');

                      // Bubbles
                      svg.selectAll('.bubble')
                          .data(processedData)
                          .join('circle')
                          .attr('class', 'bubble')
                          .attr('cx', d => xScale(d.timestamp))
                          .attr('cy', d => yScale(d.source) + yScale.bandwidth() / 2)
                          .attr('r', 0)
                          .attr('fill', d => d3SourceColors[d.source] || d3SourceColors.default)
                          .attr('opacity', 0.7)
                          .attr('stroke', '#fff')
                          .attr('stroke-width', 2)
                          .on('mouseover', function(event, d) {
                              d3.select(this)
                                  .attr('opacity', 1)
                                  .attr('stroke-width', 3);
                              d3Tooltip.show(`
                                  <strong>${d.source}</strong>
                                  <div>Records: ${d.records.toLocaleString()}</div>
                                  <div>Success: ${(d.successRate * 100).toFixed(1)}%</div>
                                  <div>${d.timestamp.toLocaleDateString()}</div>
                              `, event);
                          })
                          .on('mouseout', function() {
                              d3.select(this)
                                  .attr('opacity', 0.7)
                                  .attr('stroke-width', 2);
                              d3Tooltip.hide();
                          })
                          .transition()
                          .duration(800)
                          .attr('r', d => radiusScale(d.records));

                      // Add color legend below chart
                      const legendY = height + 50;
                      const legend = svg.append('g')
                          .attr('class', 'legend')
                          .attr('transform', `translate(0, ${legendY})`);

                      const legendItemWidth = width / sources.length;
                      sources.forEach((source, i) => {
                          const legendItem = legend.append('g')
                              .attr('transform', `translate(${i * legendItemWidth}, 0)`);

                          legendItem.append('circle')
                              .attr('cx', 0)
                              .attr('cy', 0)
                              .attr('r', 6)
                              .attr('fill', d3SourceColors[source] || d3SourceColors.default)
                              .attr('stroke', '#fff')
                              .attr('stroke-width', 2);

                          legendItem.append('text')
                              .attr('x', 12)
                              .attr('y', 4)
                              .text(source)
                              .style('font-size', '12px')
                              .style('fill', '#374151');
                      });
                      } catch (error) {
                          console.error('Error creating bubble timeline:', error);
                      }
                  }

                  // ========== D3.js Visualization 2: Radial Comparison ==========
                  function createRadialComparison(data) {
                      try {
                          const container = document.getElementById('d3-radial-comparison');
                          if (!container) {
                              console.warn('Radial comparison container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const width = container.clientWidth;
                      const height = 400;
                      const radius = Math.min(width, height) / 2 - 40;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width)
                          .attr('height', height)
                          .append('g')
                          .attr('transform', `translate(${width/2},${height/2})`);

                      // Aggregate by source
                      const sourceData = d3.rollup(
                          data,
                          v => d3.sum(v, d => d.records_written || 0),
                          d => d.source
                      );

                      const processedData = Array.from(sourceData, ([source, records]) => ({ source, records }));

                      // Pie generator
                      const pie = d3.pie()
                          .value(d => d.records)
                          .sort(null);

                      const arc = d3.arc()
                          .innerRadius(radius * 0.5)
                          .outerRadius(radius);

                      // Arcs
                      svg.selectAll('.arc')
                          .data(pie(processedData))
                          .join('path')
                          .attr('class', 'arc')
                          .attr('d', arc)
                          .attr('fill', d => d3SourceColors[d.data.source] || d3SourceColors.default)
                          .attr('stroke', '#fff')
                          .attr('stroke-width', 2)
                          .on('mouseover', function(event, d) {
                              d3.select(this).attr('opacity', 0.8);
                              d3Tooltip.show(`
                                  <strong>${d.data.source}</strong>
                                  <div>Records: ${d.data.records.toLocaleString()}</div>
                                  <div>${((d.data.records / d3.sum(processedData, p => p.records)) * 100).toFixed(1)}% of total</div>
                              `, event);
                          })
                          .on('mouseout', function() {
                              d3.select(this).attr('opacity', 1);
                              d3Tooltip.hide();
                          })
                          .transition()
                          .duration(800)
                          .attrTween('d', function(d) {
                              const interpolate = d3.interpolate({ startAngle: 0, endAngle: 0 }, d);
                              return t => arc(interpolate(t));
                          });

                      // External legend instead of labels on chart
                      const total = d3.sum(processedData, p => p.records);

                      // Position legend to the right of donut
                      const legendX = radius + 60;
                      const legendY = -radius + 20;

                      const legend = svg.append('g')
                          .attr('class', 'radial-legend')
                          .attr('transform', `translate(${legendX}, ${legendY})`);

                      legend.append('text')
                          .attr('x', 0)
                          .attr('y', -10)
                          .style('font-size', '12px')
                          .style('font-weight', '600')
                          .style('fill', '#374151')
                          .text('Data Sources');

                      // Sort by records descending for legend
                      const sortedData = [...processedData].sort((a, b) => b.records - a.records);

                      sortedData.forEach((d, i) => {
                          const legendItem = legend.append('g')
                              .attr('transform', `translate(0, ${i * 32})`);

                          // Color box
                          legendItem.append('rect')
                              .attr('x', 0)
                              .attr('y', 0)
                              .attr('width', 14)
                              .attr('height', 14)
                              .attr('fill', d3SourceColors[d.source] || d3SourceColors.default)
                              .attr('rx', 2);

                          // Source name
                          legendItem.append('text')
                              .attr('x', 20)
                              .attr('y', 7)
                              .attr('dominant-baseline', 'middle')
                              .style('font-size', '11px')
                              .style('fill', '#374151')
                              .style('font-weight', '500')
                              .text(d.source);

                          // Records count and percentage
                          legendItem.append('text')
                              .attr('x', 20)
                              .attr('y', 20)
                              .attr('dominant-baseline', 'middle')
                              .style('font-size', '10px')
                              .style('fill', '#6b7280')
                              .text(`${d.records.toLocaleString()} (${((d.records / total) * 100).toFixed(1)}%)`);
                      });
                      } catch (error) {
                          console.error('Error creating radial comparison:', error);
                      }
                  }

                  // ========== D3.js Visualization 3: Streamgraph ==========
                  function createStreamgraph(data) {
                      try {
                          const container = document.getElementById('d3-streamgraph');
                          if (!container) {
                              console.warn('Streamgraph container not found');
                              return;
                          }

                          container.innerHTML = '';

                      const margin = { top: 20, right: 40, bottom: 40, left: 40 };
                      const width = container.clientWidth - margin.left - margin.right;
                      const height = 350 - margin.top - margin.bottom;

                      const svg = d3.select(container)
                          .append('svg')
                          .attr('width', width + margin.left + margin.right)
                          .attr('height', height + margin.top + margin.bottom)
                          .append('g')
                          .attr('transform', `translate(${margin.left},${margin.top})`);

                      // Group by timestamp and source
                      const nested = d3.rollup(
                          data,
                          v => d3.sum(v, d => d.records_written || 0),
                          d => d.timestamp,
                          d => d.source
                      );

                      const timestamps = Array.from(nested.keys()).sort();
                      const sources = [...new Set(data.map(d => d.source))];

                      const streamData = timestamps.map(timestamp => {
                          const entry = { timestamp: new Date(timestamp) };
                          sources.forEach(source => {
                              entry[source] = nested.get(timestamp)?.get(source) || 0;
                          });
                          return entry;
                      });

                      // Stack
                      const stack = d3.stack()
                          .keys(sources)
                          .offset(d3.stackOffsetWiggle)
                          .order(d3.stackOrderNone);

                      const series = stack(streamData);

                      // Scales
                      const xScale = d3.scaleTime()
                          .domain(d3.extent(streamData, d => d.timestamp))
                          .range([0, width]);

                      const yScale = d3.scaleLinear()
                          .domain([
                              d3.min(series, s => d3.min(s, d => d[0])),
                              d3.max(series, s => d3.max(s, d => d[1]))
                          ])
                          .range([height, 0]);

                      // Area generator
                      const area = d3.area()
                          .x(d => xScale(d.data.timestamp))
                          .y0(d => yScale(d[0]))
                          .y1(d => yScale(d[1]))
                          .curve(d3.curveBasis);

                      // Render streams
                      svg.selectAll('.stream')
                          .data(series)
                          .join('path')
                          .attr('class', 'stream')
                          .attr('fill', d => d3SourceColors[d.key] || d3SourceColors.default)
                          .attr('opacity', 0.8)
                          .attr('d', area)
                          .on('mouseover', function(event, d) {
                              d3.select(this).attr('opacity', 1);

                              // Find closest data point immediately on hover
                              const [mouseX] = d3.pointer(event);
                              const timestamp = xScale.invert(mouseX);
                              const bisect = d3.bisector(p => p.data.timestamp).left;
                              const index = Math.min(bisect(d, timestamp), d.length - 1);

                              if (index >= 0 && index < d.length) {
                                  const point = d[index];
                                  const records = point.data[d.key] || 0;
                                  const date = point.data.timestamp;

                                  // Calculate cumulative total up to this point
                                  const cumulativeRecords = d.slice(0, index + 1)
                                      .reduce((sum, p) => sum + (p.data[d.key] || 0), 0);

                                  d3Tooltip.show(`
                                      <strong>${d.key}</strong>
                                      <div style="margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255,255,255,0.2);">
                                          <div><strong>Date:</strong> ${date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</div>
                                          <div><strong>Records:</strong> ${records.toLocaleString()}</div>
                                          <div><strong>Cumulative:</strong> ${cumulativeRecords.toLocaleString()}</div>
                                      </div>
                                  `, event);
                              }
                          })
                          .on('mousemove', function(event, d) {
                              // Update tooltip as mouse moves
                              const [mouseX] = d3.pointer(event);
                              const timestamp = xScale.invert(mouseX);
                              const bisect = d3.bisector(p => p.data.timestamp).left;
                              const index = Math.min(bisect(d, timestamp), d.length - 1);

                              if (index >= 0 && index < d.length) {
                                  const point = d[index];
                                  const records = point.data[d.key] || 0;
                                  const date = point.data.timestamp;
                                  const cumulativeRecords = d.slice(0, index + 1)
                                      .reduce((sum, p) => sum + (p.data[d.key] || 0), 0);

                                  d3Tooltip.show(`
                                      <strong>${d.key}</strong>
                                      <div style="margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255,255,255,0.2);">
                                          <div><strong>Date:</strong> ${date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</div>
                                          <div><strong>Records:</strong> ${records.toLocaleString()}</div>
                                          <div><strong>Cumulative:</strong> ${cumulativeRecords.toLocaleString()}</div>
                                      </div>
                                  `, event);
                                  d3Tooltip.updatePosition(event);
                              }
                          })
                          .on('mouseout', function() {
                              d3.select(this).attr('opacity', 0.8);
                              d3Tooltip.hide();
                          });

                      // X-axis
                      svg.append('g')
                          .attr('transform', `translate(0,${height})`)
                          .call(d3.axisBottom(xScale).ticks(6))
                          .style('font-size', '11px');

                      // Add legend below streamgraph
                      const legendY = height + 50;
                      const legend = svg.append('g')
                          .attr('class', 'streamgraph-legend')
                          .attr('transform', `translate(0, ${legendY})`);

                      legend.append('text')
                          .attr('x', 0)
                          .attr('y', -15)
                          .style('font-size', '11px')
                          .style('font-weight', '600')
                          .style('fill', '#6b7280')
                          .text('Data Sources:');

                      const legendItemWidth = width / sources.length;
                      sources.forEach((source, i) => {
                          const legendItem = legend.append('g')
                              .attr('transform', `translate(${i * legendItemWidth}, 0)`);

                          legendItem.append('rect')
                              .attr('x', 0)
                              .attr('y', -6)
                              .attr('width', 12)
                              .attr('height', 12)
                              .attr('fill', d3SourceColors[source] || d3SourceColors.default)
                              .attr('rx', 2);

                          legendItem.append('text')
                              .attr('x', 18)
                              .attr('y', 2)
                              .attr('dominant-baseline', 'middle')
                              .style('font-size', '11px')
                              .style('fill', '#374151')
                              .text(source);
                      });

                      } catch (error) {
                          console.error('Error creating streamgraph:', error);
                      }
                  }

                  // ========== D3.js Visualization 4: Horizon Charts ==========
                  function createHorizonCharts(data) {
                      try {
                          const container = document.getElementById('d3-horizon-charts');
                          if (!container) {
                              console.warn('Horizon charts container not found');
                              return;
                          }

                          container.innerHTML = '';

                          const sources = [...new Set(data.map(d => d.source))];
                          const margin = { top: 10, right: 120, bottom: 50, left: 120 };
                          const width = container.clientWidth - margin.left - margin.right;
                          const bandHeight = 50;
                          const height = sources.length * bandHeight + margin.top + margin.bottom;

                          const svg = d3.select(container)
                              .append('svg')
                              .attr('width', width + margin.left + margin.right)
                              .attr('height', height)
                              .attr('role', 'img')
                              .attr('aria-label', 'Horizon charts showing success rate trends')
                              .append('g')
                              .attr('transform', `translate(${margin.left},${margin.top})`);

                          const baseline = 0.85; // 85% baseline for better visibility with high-performing sources

                          sources.forEach((source, i) => {
                              const sourceData = data
                                  .filter(d => d.source === source)
                                  .map(d => ({
                                      timestamp: new Date(d.timestamp),
                                      successRate: d.success_rate || 0
                                  }))
                                  .filter(d => !isNaN(d.timestamp.getTime()))
                                  .sort((a, b) => a.timestamp - b.timestamp);

                              if (sourceData.length === 0) return;

                              const xScale = d3.scaleTime()
                                  .domain(d3.extent(sourceData, d => d.timestamp))
                                  .range([0, width])
                                  .nice();

                              // Calculate max deviation for proper scaling
                              const maxDeviation = d3.max(sourceData, d => Math.abs(d.successRate - baseline)) || 0.1;

                              const yScale = d3.scaleLinear()
                                  .domain([baseline - maxDeviation, baseline + maxDeviation])
                                  .range([bandHeight, 0]);

                              const g = svg.append('g')
                                  .attr('transform', `translate(0,${i * bandHeight})`);

                              // Background
                              g.append('rect')
                                  .attr('width', width)
                                  .attr('height', bandHeight)
                                  .attr('fill', '#f9fafb')
                                  .attr('stroke', '#e5e7eb')
                                  .attr('stroke-width', 1);

                              // Baseline reference line
                              g.append('line')
                                  .attr('x1', 0)
                                  .attr('x2', width)
                                  .attr('y1', bandHeight / 2)
                                  .attr('y2', bandHeight / 2)
                                  .attr('stroke', '#9ca3af')
                                  .attr('stroke-width', 1)
                                  .attr('stroke-dasharray', '2,2')
                                  .attr('opacity', 0.5);

                              // Area for success rates ABOVE baseline (green)
                              const areaAbove = d3.area()
                                  .x(d => xScale(d.timestamp))
                                  .y0(bandHeight / 2)
                                  .y1(d => {
                                      const val = d.successRate >= baseline ?
                                          yScale(d.successRate) : bandHeight / 2;
                                      return Math.max(0, Math.min(bandHeight, val));
                                  })
                                  .curve(d3.curveMonotoneX);

                              g.append('path')
                                  .datum(sourceData)
                                  .attr('d', areaAbove)
                                  .attr('fill', '#10b981')
                                  .attr('opacity', 0.7);

                              // Area for success rates BELOW baseline (red)
                              const areaBelow = d3.area()
                                  .x(d => xScale(d.timestamp))
                                  .y0(bandHeight / 2)
                                  .y1(d => {
                                      const val = d.successRate < baseline ?
                                          yScale(d.successRate) : bandHeight / 2;
                                      return Math.max(0, Math.min(bandHeight, val));
                                  })
                                  .curve(d3.curveMonotoneX);

                              g.append('path')
                                  .datum(sourceData)
                                  .attr('d', areaBelow)
                                  .attr('fill', '#ef4444')
                                  .attr('opacity', 0.7);

                              // Line for actual values
                              const line = d3.line()
                                  .x(d => xScale(d.timestamp))
                                  .y(d => {
                                      const val = yScale(d.successRate);
                                      return Math.max(0, Math.min(bandHeight, val));
                                  })
                                  .curve(d3.curveMonotoneX);

                              g.append('path')
                                  .datum(sourceData)
                                  .attr('d', line)
                                  .attr('fill', 'none')
                                  .attr('stroke', d3SourceColors[source] || d3SourceColors.default)
                                  .attr('stroke-width', 2);

                              // Source label (left)
                              g.append('text')
                                  .attr('x', -10)
                                  .attr('y', bandHeight / 2)
                                  .attr('text-anchor', 'end')
                                  .attr('dominant-baseline', 'middle')
                                  .style('font-size', '11px')
                                  .style('font-weight', '600')
                                  .style('fill', d3SourceColors[source])
                                  .text(source.split('-')[0]);

                              // Average success rate (right)
                              const avgRate = d3.mean(sourceData, d => d.successRate);
                              g.append('text')
                                  .attr('x', width + 10)
                                  .attr('y', bandHeight / 2)
                                  .attr('text-anchor', 'start')
                                  .attr('dominant-baseline', 'middle')
                                  .style('font-size', '11px')
                                  .style('font-weight', '600')
                                  .style('fill', avgRate >= baseline ? '#10b981' : '#ef4444')
                                  .text(`${(avgRate * 100).toFixed(1)}%`);

                              // Add X-axis only for the last chart
                              if (i === sources.length - 1) {
                                  const xAxis = d3.axisBottom(xScale)
                                      .ticks(5)
                                      .tickFormat(d3.timeFormat('%b %d'));

                                  g.append('g')
                                      .attr('transform', `translate(0,${bandHeight})`)
                                      .call(xAxis)
                                      .style('font-size', '11px')
                                      .style('color', '#6b7280');
                              }
                          });

                          // Add legend
                          const legend = svg.append('g')
                              .attr('transform', `translate(0, ${sources.length * bandHeight + 10})`);

                          legend.append('text')
                              .attr('x', 0)
                              .attr('y', 0)
                              .style('font-size', '11px')
                              .style('fill', '#6b7280')
                              .text('Baseline: 90% |');

                          legend.append('rect')
                              .attr('x', 70)
                              .attr('y', -8)
                              .attr('width', 15)
                              .attr('height', 10)
                              .attr('fill', '#10b981')
                              .attr('opacity', 0.7);

                          legend.append('text')
                              .attr('x', 90)
                              .attr('y', 0)
                              .style('font-size', '11px')
                              .style('fill', '#6b7280')
                              .text('Above baseline |');

                          legend.append('rect')
                              .attr('x', 190)
                              .attr('y', -8)
                              .attr('width', 15)
                              .attr('height', 10)
                              .attr('fill', '#ef4444')
                              .attr('opacity', 0.7);

                          legend.append('text')
                              .attr('x', 210)
                              .attr('y', 0)
                              .style('font-size', '11px')
                              .style('fill', '#6b7280')
                              .text('Below baseline');

                          // Add explanatory annotation for high-performing sources
                          svg.append('text')
                              .attr('x', width / 2)
                              .attr('y', height + 35)
                              .attr('text-anchor', 'middle')
                              .style('font-size', '11px')
                              .style('fill', '#10b981')
                              .style('font-weight', '600')
                              .text('All sources performing above baseline with minimal variance');

                      } catch (error) {
                          console.error('Error creating horizon charts:', error);
                          const container = document.getElementById('d3-horizon-charts');
                          if (container) {
                              container.innerHTML = '<div style="padding: 2rem; text-align: center; color: #ef4444;">Error rendering visualization</div>';
                          }
                      }
                  }

                  // ========== D3.js Visualization 5: Hexbin Heatmap ==========
                  function createHexbinHeatmap(data) {
                      try {
                          const container = document.getElementById('d3-hexbin-heatmap');
                          if (!container) {
                              console.warn('Hexbin heatmap container not found');
                              return;
                          }

                          container.innerHTML = '';

                          const margin = { top: 40, right: 80, bottom: 70, left: 80 };
                          const width = container.clientWidth - margin.left - margin.right;
                          const height = 400 - margin.top - margin.bottom;

                          const svg = d3.select(container)
                              .append('svg')
                              .attr('width', width + margin.left + margin.right)
                              .attr('height', height + margin.top + margin.bottom)
                              .attr('role', 'img')
                              .attr('aria-label', 'Scatter plot showing correlation between success rate and deduplication rate')
                              .append('g')
                              .attr('transform', `translate(${margin.left},${margin.top})`);

                          // Process data
                          const processedData = data
                              .filter(d =>
                                  d.success_rate !== undefined &&
                                  d.deduplication_rate !== undefined &&
                                  !isNaN(d.success_rate) &&
                                  !isNaN(d.deduplication_rate)
                              )
                              .map(d => ({
                                  successRate: (d.success_rate || 0) * 100,
                                  dedupRate: (d.deduplication_rate || 0) * 100,
                                  source: d.source,
                                  records: d.records_written || 0
                              }));

                          if (processedData.length === 0) {
                              container.innerHTML = '<div style="padding: 2rem; text-align: center; color: #6b7280;">Insufficient data for correlation analysis</div>';
                              return;
                          }

                          // Calculate actual data ranges
                          const successExtent = d3.extent(processedData, d => d.successRate);
                          const dedupExtent = d3.extent(processedData, d => d.dedupRate);

                          // Check if all dedup rates are zero
                          if (dedupExtent[0] === 0 && dedupExtent[1] === 0) {
                              container.innerHTML = `
                                  <div style="padding: 2rem; text-align: center; color: #6b7280; max-width: 600px; margin: 0 auto;">
                                      <div style="font-weight: 600; font-size: 1.1em; margin-bottom: 0.75rem; color: #374151;">
                                          Deduplication Tracking Not Yet Available
                                      </div>
                                      <div style="font-size: 0.95em; line-height: 1.6;">
                                          This visualization will show the correlation between success rate and deduplication rate
                                          once deduplication metrics are implemented in the data pipeline.
                                      </div>
                                      <div style="margin-top: 1rem; padding: 0.75rem; background: #f3f4f6; border-radius: 6px; font-size: 0.9em; color: #6b7280;">
                                          <strong>Current Status:</strong> All sources showing 0% deduplication (tracking not active)
                                      </div>
                                  </div>
                              `;
                              return;
                          }

                          // Add 10% padding to ranges for better visualization
                          const successRange = successExtent[1] - successExtent[0];
                          const dedupRange = dedupExtent[1] - dedupExtent[0];

                          const successPadding = Math.max(successRange * 0.1, 5);
                          const dedupPadding = Math.max(dedupRange * 0.1, 5);

                          // ADAPTIVE SCALES: Zoom to actual data range
                          const xScale = d3.scaleLinear()
                              .domain([
                                  Math.max(0, successExtent[0] - successPadding),
                                  Math.min(100, successExtent[1] + successPadding)
                              ])
                              .range([0, width])
                              .nice();

                          const yScale = d3.scaleLinear()
                              .domain([
                                  Math.max(0, dedupExtent[0] - dedupPadding),
                                  Math.min(100, dedupExtent[1] + dedupPadding)
                              ])
                              .range([height, 0])
                              .nice();

                          const sizeScale = d3.scaleSqrt()
                              .domain([0, d3.max(processedData, d => d.records)])
                              .range([6, 30]);

                          // Reference grid
                          const gridLines = svg.append('g')
                              .attr('class', 'grid')
                              .attr('opacity', 0.1);

                          xScale.ticks(5).forEach(tick => {
                              gridLines.append('line')
                                  .attr('x1', xScale(tick))
                                  .attr('x2', xScale(tick))
                                  .attr('y1', 0)
                                  .attr('y2', height)
                                  .attr('stroke', '#666');
                          });

                          yScale.ticks(5).forEach(tick => {
                              gridLines.append('line')
                                  .attr('x1', 0)
                                  .attr('x2', width)
                                  .attr('y1', yScale(tick))
                                  .attr('y2', yScale(tick))
                                  .attr('stroke', '#666');
                          });

                          // Data points
                          svg.selectAll('.data-point')
                              .data(processedData)
                              .join('circle')
                              .attr('class', 'data-point')
                              .attr('cx', d => xScale(d.successRate))
                              .attr('cy', d => yScale(d.dedupRate))
                              .attr('r', 0)
                              .attr('fill', d => d3SourceColors[d.source] || d3SourceColors.default)
                              .attr('opacity', 0.7)
                              .attr('stroke', '#fff')
                              .attr('stroke-width', 2)
                              .style('cursor', 'pointer')
                              .on('mouseover', function(event, d) {
                                  d3.select(this)
                                      .attr('opacity', 1)
                                      .attr('stroke-width', 3);
                                  d3Tooltip.show(`
                                      <strong>${d.source}</strong>
                                      <div style="margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255,255,255,0.2);">
                                          <div><strong>Success Rate:</strong> ${d.successRate.toFixed(1)}%</div>
                                          <div><strong>Dedup Rate:</strong> ${d.dedupRate.toFixed(1)}%</div>
                                          <div><strong>Records:</strong> ${d.records.toLocaleString()}</div>
                                      </div>
                                  `, event);
                              })
                              .on('mousemove', (event) => d3Tooltip.updatePosition(event))
                              .on('mouseout', function() {
                                  d3.select(this)
                                      .attr('opacity', 0.7)
                                      .attr('stroke-width', 2);
                                  d3Tooltip.hide();
                              })
                              .transition()
                              .duration(800)
                              .delay((d, i) => i * 30)
                              .attr('r', d => sizeScale(d.records));

                          // Axes
                          const xAxis = d3.axisBottom(xScale)
                              .ticks(5)
                              .tickFormat(d => `${d}%`);

                          const yAxis = d3.axisLeft(yScale)
                              .ticks(5)
                              .tickFormat(d => `${d}%`);

                          svg.append('g')
                              .attr('transform', `translate(0,${height})`)
                              .call(xAxis)
                              .style('font-size', '11px')
                              .style('color', '#374151');

                          svg.append('g')
                              .call(yAxis)
                              .style('font-size', '11px')
                              .style('color', '#374151');

                          // Axis labels
                          svg.append('text')
                              .attr('x', width / 2)
                              .attr('y', height + 50)
                              .attr('text-anchor', 'middle')
                              .style('font-size', '13px')
                              .style('font-weight', '600')
                              .style('fill', '#374151')
                              .text('Success Rate (%)');

                          svg.append('text')
                              .attr('transform', 'rotate(-90)')
                              .attr('x', -height / 2)
                              .attr('y', -55)
                              .attr('text-anchor', 'middle')
                              .style('font-size', '13px')
                              .style('font-weight', '600')
                              .style('fill', '#374151')
                              .text('Deduplication Rate (%)');

                          // Add zoom info label
                          svg.append('text')
                              .attr('x', width)
                              .attr('y', -10)
                              .attr('text-anchor', 'end')
                              .style('font-size', '10px')
                              .style('fill', '#6b7280')
                              .style('font-style', 'italic')
                              .text(`Zoomed to data range: ${successExtent[0].toFixed(0)}-${successExtent[1].toFixed(0)}% × ${dedupExtent[0].toFixed(0)}-${dedupExtent[1].toFixed(0)}%`);

                      } catch (error) {
                          console.error('Error creating hexbin heatmap:', error);
                          const container = document.getElementById('d3-hexbin-heatmap');
                          if (container) {
                              container.innerHTML = '<div style="padding: 2rem; text-align: center; color: #ef4444;">Error rendering visualization</div>';
                          }
                      }
                  }

                  // ========== D3.js Visualization 6: Health Matrix ==========
                  function createHealthMatrix(data) {
                      try {
                          const container = document.getElementById('d3-health-matrix');
                          if (!container) {
                              console.warn('Health matrix container not found');
                              return;
                          }

                          container.innerHTML = '';

                          const sources = [...new Set(data.map(d => d.source))];
                          const metrics = ['Uptime', 'Avg Success', 'Total Records', 'Dedup Rate'];

                          const healthData = sources.map(source => {
                              const sourceMetrics = data.filter(d => d.source === source);
                              const avgSuccess = d3.mean(sourceMetrics, d => d.success_rate || 0) || 0;
                              const totalRecords = d3.sum(sourceMetrics, d => d.records_written || 0);
                              const avgDedup = d3.mean(sourceMetrics, d => d.deduplication_rate || 0) || 0;
                              const uptime = sourceMetrics.length > 0 ?
                                  (sourceMetrics.filter(m => m.success_rate > 0.8).length / sourceMetrics.length) : 0;

                              return {
                                  source,
                                  color: d3SourceColors[source] || d3SourceColors.default,
                                  metrics: {
                                      'Uptime': uptime * 100,
                                      'Avg Success': avgSuccess * 100,
                                      'Total Records': totalRecords,
                                      'Dedup Rate': avgDedup * 100
                                  },
                                  trends: {
                                      uptime: sourceMetrics.slice(-10).map(m => (m.success_rate || 0) * 100),
                                      'avg success': sourceMetrics.slice(-10).map(m => (m.success_rate || 0) * 100),
                                      'total records': sourceMetrics.slice(-10).map(m => m.records_written || 0),
                                      'dedup rate': sourceMetrics.slice(-10).map(m => (m.deduplication_rate || 0) * 100)
                                  }
                              };
                          });

                          // RESPONSIVE SIZING
                          const availableWidth = Math.min(container.clientWidth, 1200);
                          const margin = { top: 80, right: 20, bottom: 20, left: 20 };
                          const cellWidth = Math.min(180, (availableWidth - margin.left - margin.right) / metrics.length);
                          const cellHeight = 160; // Increased from 140 for sparkline visibility

                          const width = metrics.length * cellWidth;
                          const height = sources.length * cellHeight + margin.top + margin.bottom;

                          const svg = d3.select(container)
                              .append('svg')
                              .attr('width', width + margin.left + margin.right)
                              .attr('height', height)
                              .attr('role', 'img')
                              .attr('aria-label', 'Health matrix showing key performance indicators')
                              .style('display', 'block')
                              .style('margin', '0 auto')
                              .append('g')
                              .attr('transform', `translate(${margin.left},${margin.top})`);

                          // Legend at top (replaces Y-axis labels)
                          const legend = svg.append('g')
                              .attr('class', 'source-legend')
                              .attr('transform', `translate(0, -50)`);

                          const legendItemWidth = width / sources.length;
                          sources.forEach((source, i) => {
                              const legendItem = legend.append('g')
                                  .attr('transform', `translate(${i * legendItemWidth}, 5)`);

                              legendItem.append('rect')
                                  .attr('x', 0)
                                  .attr('y', 0)
                                  .attr('width', 12)
                                  .attr('height', 12)
                                  .attr('fill', d3SourceColors[source] || d3SourceColors.default)
                                  .attr('rx', 2);

                              legendItem.append('text')
                                  .attr('x', 18)
                                  .attr('y', 6)
                                  .attr('dominant-baseline', 'middle')
                                  .style('font-size', '11px')
                                  .style('fill', '#374151')
                                  .text(source);
                          });

                          // Matrix cells
                          healthData.forEach((sourceData, row) => {
                              metrics.forEach((metric, col) => {
                                  const value = sourceData.metrics[metric];
                                  const cellG = svg.append('g')
                                      .attr('transform', `translate(${col * cellWidth},${row * cellHeight})`);

                                  // Color indicator on LEFT EDGE
                                  cellG.append('rect')
                                      .attr('x', 0)
                                      .attr('y', 0)
                                      .attr('width', 4)
                                      .attr('height', cellHeight - 8)
                                      .attr('fill', sourceData.color)
                                      .attr('rx', 2);

                                  // Cell background
                                  cellG.append('rect')
                                      .attr('x', 6)
                                      .attr('y', 0)
                                      .attr('width', cellWidth - 10)
                                      .attr('height', cellHeight - 8)
                                      .attr('fill', '#fff')
                                      .attr('stroke', '#e5e7eb')
                                      .attr('stroke-width', 1)
                                      .attr('rx', 4);

                                  // Metric name (column header - only on first row)
                                  if (row === 0) {
                                      svg.append('text')
                                          .attr('x', col * cellWidth + cellWidth / 2)
                                          .attr('y', -20)
                                          .attr('text-anchor', 'middle')
                                          .style('font-size', '13px')
                                          .style('font-weight', '600')
                                          .style('fill', '#374151')
                                          .text(metric);
                                  }

                                  // Value display
                                  const valueText = metric === 'Total Records'
                                      ? value.toLocaleString()
                                      : `${value.toFixed(1)}%`;

                                  cellG.append('text')
                                      .attr('x', cellWidth / 2)
                                      .attr('y', 35)
                                      .attr('text-anchor', 'middle')
                                      .style('font-size', '20px')
                                      .style('font-weight', '700')
                                      .style('fill', '#111827')
                                      .text(valueText);

                                  // Status indicator
                                  let status, statusColor;
                                  if (metric === 'Total Records') {
                                      status = value > 1000 ? 'High' : value > 100 ? 'Medium' : 'Low';
                                      statusColor = value > 1000 ? '#10b981' : value > 100 ? '#f59e0b' : '#6b7280';
                                  } else {
                                      status = value >= 90 ? 'Excellent' : value >= 75 ? 'Good' : 'Needs Attention';
                                      statusColor = value >= 90 ? '#10b981' : value >= 75 ? '#f59e0b' : '#ef4444';
                                  }

                                  cellG.append('text')
                                      .attr('x', cellWidth / 2)
                                      .attr('y', 55)
                                      .attr('text-anchor', 'middle')
                                      .style('font-size', '11px')
                                      .style('font-weight', '600')
                                      .style('fill', statusColor)
                                      .text(status);

                                  // Sparkline
                                  const trendKey = metric.toLowerCase();
                                  const sparkData = sourceData.trends[trendKey] || [];

                                  if (sparkData.length > 0) {
                                      const sparkWidth = cellWidth - 40;
                                      const sparkHeight = 35;
                                      const sparkX = d3.scaleLinear()
                                          .domain([0, sparkData.length - 1])
                                          .range([0, sparkWidth]);
                                      const sparkY = d3.scaleLinear()
                                          .domain([
                                              (d3.min(sparkData) || 0) * 0.95,  // Start from 95% of min
                                              (d3.max(sparkData) || 100) * 1.05  // Go to 105% of max
                                          ])
                                          .range([sparkHeight, 0]);

                                      const line = d3.line()
                                          .x((d, i) => sparkX(i))
                                          .y(d => sparkY(d))
                                          .curve(d3.curveMonotoneX);

                                      cellG.append('path')
                                          .datum(sparkData)
                                          .attr('d', line)
                                          .attr('transform', `translate(20,${cellHeight - 55})`)
                                          .attr('fill', 'none')
                                          .attr('stroke', sourceData.color)
                                          .attr('stroke-width', 2)
                                          .attr('opacity', 0.7);

                                      // Sparkline area fill
                                      const area = d3.area()
                                          .x((d, i) => sparkX(i))
                                          .y0(sparkHeight)
                                          .y1(d => sparkY(d))
                                          .curve(d3.curveMonotoneX);

                                      cellG.append('path')
                                          .datum(sparkData)
                                          .attr('d', area)
                                          .attr('transform', `translate(20,${cellHeight - 55})`)
                                          .attr('fill', sourceData.color)
                                          .attr('opacity', 0.15);
                                  }
                              });
                          });

                      } catch (error) {
                          console.error('Error creating health matrix:', error);
                          const container = document.getElementById('d3-health-matrix');
                          if (container) {
                              container.innerHTML = '<div style="padding: 2rem; text-align: center; color: #ef4444;">Error rendering visualization</div>';
                          }
                      }
                  }

                  // ========== Utility Functions ==========
                  function toggleFAQ(button) {
                      const isExpanded = button.getAttribute('aria-expanded') === 'true';
                      button.setAttribute('aria-expanded', !isExpanded);
                      const answer = button.nextElementSibling;
                      answer.style.maxHeight = isExpanded ? '0' : answer.scrollHeight + 'px';
                  }

                  function toggleCollapsible(element) {
                      const isExpanded = element.getAttribute('aria-expanded') === 'true';
                      element.setAttribute('aria-expanded', !isExpanded);
                      const content = element.nextElementSibling;
                      content.style.maxHeight = isExpanded ? '0' : content.scrollHeight + 'px';
                  }

                  function showError(message) {
                      const grid = document.getElementById('metricsGrid');
                      if (grid) {
                          grid.innerHTML = `
                              <div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: var(--danger-600);">
                                  <p style="font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem;">Error Loading Data</p>
                                  <p>${message}</p>
                              </div>
                          `;
                      }
                  }

                  // ========== Mobile Navigation ==========
                  document.querySelector('.nav-toggle')?.addEventListener('click', function() {
                      const menu = document.getElementById('navMenu');
                      const isExpanded = this.getAttribute('aria-expanded') === 'true';
                      this.setAttribute('aria-expanded', !isExpanded);
                      menu.classList.toggle('open');
                  });

                  // ========== Scroll-Spy Navigation ==========
                  const sections = document.querySelectorAll('section[id]');
                  const navLinks = document.querySelectorAll('.nav-menu a[href^="#"]');

                  const observerOptions = {
                      root: null,
                      rootMargin: '-20% 0px -70% 0px',
                      threshold: 0
                  };

                  const observer = new IntersectionObserver((entries) => {
                      entries.forEach(entry => {
                          if (entry.isIntersecting) {
                              const id = entry.target.getAttribute('id');
                              navLinks.forEach(link => {
                                  link.classList.remove('active');
                                  if (link.getAttribute('href') === `#${id}`) {
                                      link.classList.add('active');
                                  }
                              });
                          }
                      });
                  }, observerOptions);

                  sections.forEach(section => observer.observe(section));

                  // ========== Initialize ==========
                  document.addEventListener('DOMContentLoaded', () => {
                      console.log('🚀 Dashboard initializing...');
                      loadData();
                  });
              </script>
          </body>
          </html>
          EOF

      - name: Generate dashboard data
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          from pathlib import Path
          from datetime import datetime

          # Create data directory
          site_data = Path("_site/data")
          site_data.mkdir(parents=True, exist_ok=True)

          # Load all metrics (only processing phase for accurate success rates)
          metrics_dir = Path("data/metrics")
          all_metrics = []

          if metrics_dir.exists():
              for metrics_file in metrics_dir.glob("*_processing.json"):
                  try:
                      with open(metrics_file) as f:
                          data = json.load(f)
                          snapshot = data.get("snapshot", {})
                          stats = data.get("statistics", {})

                          all_metrics.append({
                              "run_id": snapshot.get("run_id", ""),
                              "source": snapshot.get("source", ""),
                              "timestamp": snapshot.get("timestamp", ""),
                              "records_written": snapshot.get("records_written", 0),
                              "success_rate": stats.get("fetch_success_rate", 0),
                              "deduplication_rate": stats.get("deduplication_rate", 0),
                              "urls_discovered": snapshot.get("urls_discovered", 0),
                              "urls_fetched": snapshot.get("urls_fetched", 0),
                              "urls_processed": snapshot.get("urls_processed", 0),
                              "urls_failed": snapshot.get("urls_failed", 0),
                              "http_status_codes": snapshot.get("http_status_codes", {}),
                              "error_types": snapshot.get("error_types", {}),
                              "pipeline_type": snapshot.get("pipeline_type", ""),
                          })
                  except Exception as e:
                      print(f"Error loading {metrics_file}: {e}")

          # Generate summary
          if all_metrics:
              summary = {
                  "total_records": sum(m["records_written"] for m in all_metrics),
                  "avg_success_rate": sum(m["success_rate"] for m in all_metrics) / len(all_metrics),
                  "sources": list(set(m["source"] for m in all_metrics)),
                  "last_update": max(m["timestamp"] for m in all_metrics),
                  "total_runs": len(all_metrics)
              }
          else:
              summary = {
                  "total_records": 0,
                  "avg_success_rate": 0,
                  "sources": [],
                  "last_update": datetime.now().isoformat(),
                  "total_runs": 0
              }

          # Save summary
          with open(site_data / "summary.json", "w") as f:
              json.dump(summary, f, indent=2)

          # Save all metrics for chart rendering
          with open(site_data / "all_metrics.json", "w") as f:
              json.dump(all_metrics, f, indent=2)

          # Copy reports
          import shutil
          reports_dir = Path("data/reports")
          if reports_dir.exists():
              site_reports = Path("_site/reports")
              site_reports.mkdir(exist_ok=True)

              report_list = []
              for report in reports_dir.glob("*_final_quality_report.md"):
                  # Copy report
                  shutil.copy(report, site_reports / report.name)

                  report_list.append({
                      "name": report.stem.replace("_final_quality_report", ""),
                      "filename": report.name
                  })

              # Save report list
              with open(site_data / "reports.json", "w") as f:
                  json.dump(report_list, f, indent=2)
          else:
              # Create empty reports list if no reports exist
              with open(site_data / "reports.json", "w") as f:
                  json.dump([], f, indent=2)

          print(f"✅ Generated dashboard data: {len(all_metrics)} metrics, {summary['total_records']} total records")

          # List generated files for debugging
          import os
          print("\n📁 Generated files:")
          for root, dirs, files in os.walk("_site"):
              for file in files:
                  filepath = os.path.join(root, file)
                  size = os.path.getsize(filepath)
                  print(f"  - {filepath} ({size} bytes)")
          PYTHON_SCRIPT

      - name: Verify build artifacts
        run: |
          echo "📁 Checking _site directory structure:"
          ls -la _site/
          echo ""
          echo "📁 Checking data directory:"
          ls -la _site/data/ || echo "No data directory"
          echo ""
          echo "📋 Checking summary.json:"
          if [ -f _site/data/summary.json ]; then
            cat _site/data/summary.json
          else
            echo "ERROR: summary.json not found!"
          fi
          echo ""
          echo "📋 Checking all_metrics.json:"
          if [ -f _site/data/all_metrics.json ]; then
            echo "all_metrics.json exists ($(wc -l < _site/data/all_metrics.json) lines)"
            head -20 _site/data/all_metrics.json
          else
            echo "ERROR: all_metrics.json not found!"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
