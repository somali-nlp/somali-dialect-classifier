name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'data/metrics/**'
      - 'data/reports/**'
      - 'dashboard/**'
      - '.github/workflows/deploy-dashboard.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install streamlit pandas plotly numpy

      - name: Build static dashboard
        run: |
          # Create professional static HTML dashboard for GitHub Pages

          mkdir -p _site

          # Create professional index.html
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta name="description" content="Somali Dialect Classifier - A comprehensive NLP data pipeline for low-resource Somali language processing">
              <title>Somali Dialect Classifier | NLP Data Pipeline</title>

              <!-- Google Fonts -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">

              <style>
                  :root {
                      --color-primary: #2563eb;
                      --color-primary-dark: #1e40af;
                      --color-success: #059669;
                      --color-warning: #d97706;
                      --color-danger: #dc2626;
                      --color-bg: #f9fafb;
                      --color-bg-elevated: #ffffff;
                      --color-text: #111827;
                      --color-text-secondary: #6b7280;
                      --color-border: #e5e7eb;
                      --color-border-light: #f3f4f6;
                      --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
                      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
                      --radius: 8px;
                      --font-body: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      --font-mono: 'Fira Code', 'Consolas', monospace;
                  }

                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }

                  body {
                      font-family: var(--font-body);
                      font-size: 16px;
                      line-height: 1.6;
                      color: var(--color-text);
                      background: var(--color-bg);
                      -webkit-font-smoothing: antialiased;
                      -moz-osx-font-smoothing: grayscale;
                  }

                  .header {
                      background: var(--color-bg-elevated);
                      border-bottom: 1px solid var(--color-border);
                      padding: 2rem 1.5rem;
                      box-shadow: var(--shadow-sm);
                  }

                  .header-content {
                      max-width: 1200px;
                      margin: 0 auto;
                  }

                  .header h1 {
                      font-size: 2rem;
                      font-weight: 700;
                      color: var(--color-text);
                      margin-bottom: 0.5rem;
                      letter-spacing: -0.025em;
                  }

                  .header .subtitle {
                      font-size: 1.125rem;
                      color: var(--color-text-secondary);
                      font-weight: 400;
                  }

                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem 1.5rem;
                  }

                  section {
                      margin-bottom: 3rem;
                  }

                  h2 {
                      font-size: 1.5rem;
                      font-weight: 700;
                      color: var(--color-text);
                      margin-bottom: 1rem;
                      padding-bottom: 0.5rem;
                      border-bottom: 2px solid var(--color-primary);
                  }

                  h3 {
                      font-size: 1.25rem;
                      font-weight: 600;
                      color: var(--color-text);
                      margin-bottom: 0.75rem;
                  }

                  p {
                      margin-bottom: 1rem;
                      color: var(--color-text-secondary);
                  }

                  .metrics-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 1.5rem;
                      margin: 2rem 0;
                  }

                  .metric-card {
                      background: var(--color-bg-elevated);
                      border: 1px solid var(--color-border);
                      border-radius: var(--radius);
                      padding: 1.5rem;
                      box-shadow: var(--shadow-sm);
                      transition: all 0.2s ease;
                  }

                  .metric-card:hover {
                      box-shadow: var(--shadow-md);
                      transform: translateY(-2px);
                  }

                  .metric-label {
                      font-size: 0.875rem;
                      font-weight: 600;
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: var(--color-text-secondary);
                      margin-bottom: 0.5rem;
                  }

                  .metric-value {
                      font-size: 2.25rem;
                      font-weight: 700;
                      color: var(--color-primary);
                      font-family: var(--font-mono);
                  }

                  .status-indicator {
                      display: inline-flex;
                      align-items: center;
                      padding: 0.25rem 0.75rem;
                      border-radius: 9999px;
                      font-size: 0.875rem;
                      font-weight: 600;
                  }

                  .status-success {
                      background-color: #d1fae5;
                      color: var(--color-success);
                  }

                  .status-warning {
                      background-color: #fef3c7;
                      color: var(--color-warning);
                  }

                  .status-info {
                      background-color: #dbeafe;
                      color: var(--color-primary);
                  }

                  .card {
                      background: var(--color-bg-elevated);
                      border: 1px solid var(--color-border);
                      border-radius: var(--radius);
                      padding: 2rem;
                      margin-bottom: 1.5rem;
                      box-shadow: var(--shadow-sm);
                  }

                  .feature-list {
                      list-style: none;
                      display: grid;
                      gap: 1rem;
                      margin-top: 1rem;
                  }

                  .feature-list li {
                      padding-left: 1.5rem;
                      position: relative;
                      color: var(--color-text-secondary);
                  }

                  .feature-list li::before {
                      content: "";
                      position: absolute;
                      left: 0;
                      top: 0.5rem;
                      width: 6px;
                      height: 6px;
                      background: var(--color-primary);
                      border-radius: 50%;
                  }

                  .btn {
                      display: inline-block;
                      padding: 0.75rem 1.5rem;
                      font-weight: 600;
                      text-decoration: none;
                      border-radius: var(--radius);
                      transition: all 0.2s ease;
                      font-size: 1rem;
                  }

                  .btn-primary {
                      background: var(--color-primary);
                      color: white;
                  }

                  .btn-primary:hover {
                      background: var(--color-primary-dark);
                      box-shadow: var(--shadow-md);
                  }

                  .btn-secondary {
                      background: var(--color-bg-elevated);
                      color: var(--color-primary);
                      border: 1px solid var(--color-primary);
                  }

                  .btn-secondary:hover {
                      background: var(--color-primary);
                      color: white;
                  }

                  .action-buttons {
                      display: flex;
                      gap: 1rem;
                      margin-top: 1.5rem;
                      flex-wrap: wrap;
                  }

                  .report-list {
                      display: grid;
                      gap: 0.75rem;
                      margin-top: 1rem;
                  }

                  .report-link {
                      display: flex;
                      align-items: center;
                      padding: 1rem 1.25rem;
                      background: var(--color-bg);
                      border: 1px solid var(--color-border);
                      border-left: 4px solid var(--color-primary);
                      border-radius: var(--radius);
                      text-decoration: none;
                      color: var(--color-text);
                      font-weight: 500;
                      transition: all 0.2s ease;
                  }

                  .report-link:hover {
                      background: var(--color-bg-elevated);
                      border-left-color: var(--color-primary-dark);
                      transform: translateX(4px);
                      box-shadow: var(--shadow-sm);
                  }

                  .loading-spinner {
                      border: 3px solid var(--color-border-light);
                      border-top: 3px solid var(--color-primary);
                      border-radius: 50%;
                      width: 40px;
                      height: 40px;
                      animation: spin 1s linear infinite;
                      margin: 2rem auto;
                  }

                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }

                  .loading-container {
                      text-align: center;
                      padding: 3rem 1rem;
                      color: var(--color-text-secondary);
                  }

                  .footer {
                      margin-top: 4rem;
                      padding: 2rem 0;
                      border-top: 1px solid var(--color-border);
                      text-align: center;
                      color: var(--color-text-secondary);
                      font-size: 0.875rem;
                  }

                  @media (max-width: 768px) {
                      .header h1 {
                          font-size: 1.5rem;
                      }

                      .header .subtitle {
                          font-size: 1rem;
                      }

                      .metrics-grid {
                          grid-template-columns: 1fr;
                      }

                      .metric-value {
                          font-size: 1.875rem;
                      }

                      .action-buttons {
                          flex-direction: column;
                      }

                      .btn {
                          width: 100%;
                          text-align: center;
                      }
                  }
              </style>
          </head>
          <body>
              <header class="header">
                  <div class="header-content">
                      <h1>Somali Dialect Classifier</h1>
                      <p class="subtitle">Comprehensive NLP Data Pipeline for Somali Language Processing</p>
                  </div>
              </header>

              <main class="container">
                  <section id="about">
                      <h2>About This Project</h2>
                      <div class="card">
                          <p>
                              The Somali Dialect Classifier addresses a critical challenge in natural language processing:
                              <strong>data scarcity for low-resource languages</strong>. Somali, spoken by over 16 million people,
                              lacks the extensive datasets available for languages like English or Spanish, making it difficult
                              to build effective NLP models for dialect classification and language understanding.
                          </p>
                          <p>
                              This project builds a comprehensive, automated data pipeline that aggregates high-quality Somali
                              text data from multiple sources, enabling researchers and developers to train robust dialect
                              classification models and advance Somali NLP capabilities.
                          </p>

                          <h3>Key Features</h3>
                          <ul class="feature-list">
                              <li><strong>Multi-Source Data Collection:</strong> Aggregates data from 4+ diverse sources including Wikipedia Somali, BBC Somali, and specialized datasets from Hugging Face</li>
                              <li><strong>Quality-First Architecture:</strong> Implements comprehensive quality metrics, content filtering, and language detection to ensure data integrity</li>
                              <li><strong>Intelligent Deduplication:</strong> Uses MinHash LSH algorithms to eliminate duplicate content across sources while preserving unique dialect examples</li>
                              <li><strong>Production-Grade Pipeline:</strong> Bronze-silver-gold data architecture with automated processing, error handling, and monitoring</li>
                              <li><strong>Research-Ready Datasets:</strong> Generates clean, deduplicated silver datasets with quality reports and statistics for immediate use in model training</li>
                          </ul>

                          <h3>Technical Highlights</h3>
                          <ul class="feature-list">
                              <li>130,000+ high-quality Somali text records collected and processed</li>
                              <li>Automated pipeline with CI/CD integration via GitHub Actions</li>
                              <li>Comprehensive quality metrics tracking (success rates, deduplication rates, content statistics)</li>
                              <li>Modular processor architecture supporting easy integration of new data sources</li>
                              <li>Silver dataset with metadata for dialect classification and language modeling tasks</li>
                          </ul>
                      </div>
                  </section>

                  <section id="metrics">
                      <h2>Pipeline Status</h2>
                      <div class="metrics-grid" id="metricsGrid">
                          <div class="loading-container">
                              <div class="loading-spinner"></div>
                              <p>Loading pipeline metrics...</p>
                          </div>
                      </div>
                  </section>

                  <section id="reports">
                      <h2>Quality Reports</h2>
                      <div class="report-list" id="reportList">
                          <div class="loading-container">
                              <p>Loading quality reports...</p>
                          </div>
                      </div>
                  </section>

                  <section id="actions">
                      <h2>Get Started</h2>
                      <div class="card">
                          <p>Explore the codebase, run the pipeline locally, or contribute to advancing Somali NLP research.</p>
                          <div class="action-buttons">
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier" class="btn btn-primary">
                                  View on GitHub
                              </a>
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme" class="btn btn-secondary">
                                  Documentation
                              </a>
                          </div>
                      </div>
                  </section>
              </main>

              <footer class="footer">
                  <p>Somali Dialect Classifier | Open Source NLP Research Project</p>
              </footer>

              <script>
                  // Configuration
                  const MAX_RETRIES = 3;
                  let metricsRetries = 0;

                  // Format large numbers with commas
                  function formatNumber(num) {
                      return num.toLocaleString('en-US');
                  }

                  // Format dates consistently
                  function formatDate(isoString) {
                      try {
                          const date = new Date(isoString);
                          return date.toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric'
                          });
                      } catch (e) {
                          return 'N/A';
                      }
                  }

                  // Load and display pipeline metrics
                  async function loadMetrics() {
                      try {
                          const response = await fetch('data/summary.json');

                          if (!response.ok) {
                              throw new Error('Failed to load metrics');
                          }

                          const data = await response.json();
                          const grid = document.getElementById('metricsGrid');

                          if (!grid) return;

                          const totalRecords = data.total_records || 0;
                          const successRate = data.avg_success_rate || 0;
                          const sources = data.sources || [];
                          const lastUpdate = data.last_update;
                          const totalRuns = data.total_runs || 0;

                          grid.innerHTML = `
                              <div class="metric-card">
                                  <div class="metric-label">Total Records</div>
                                  <div class="metric-value">${formatNumber(totalRecords)}</div>
                                  <div class="status-indicator status-success">Active</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Success Rate</div>
                                  <div class="metric-value">${(successRate * 100).toFixed(1)}%</div>
                                  <div class="status-indicator status-info">Monitored</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Data Sources</div>
                                  <div class="metric-value">${sources.length}</div>
                                  <div class="status-indicator status-success">Integrated</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Last Updated</div>
                                  <div class="metric-value" style="font-size: 1.25rem;">${formatDate(lastUpdate)}</div>
                                  <div class="status-indicator status-info">${totalRuns} Runs</div>
                              </div>
                          `;
                      } catch (error) {
                          console.error('Error loading metrics:', error);

                          metricsRetries++;
                          if (metricsRetries < MAX_RETRIES) {
                              setTimeout(loadMetrics, 1000);
                          } else {
                              const grid = document.getElementById('metricsGrid');
                              if (grid) {
                                  grid.innerHTML = `
                                      <div class="loading-container">
                                          <p>No metrics available yet. Run the pipeline to generate data.</p>
                                          <div class="status-indicator status-warning">Awaiting Data</div>
                                      </div>
                                  `;
                              }
                          }
                      }
                  }

                  // Load and display quality reports
                  async function loadReports() {
                      try {
                          const response = await fetch('data/reports.json');

                          if (!response.ok) {
                              throw new Error('Failed to load reports');
                          }

                          const reports = await response.json();
                          const list = document.getElementById('reportList');

                          if (!list) return;

                          if (!reports || reports.length === 0) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>No quality reports available yet.</p>
                                  </div>
                              `;
                              return;
                          }

                          list.innerHTML = reports.slice(0, 10).map(report => `
                              <a href="reports/${report.filename}" class="report-link">
                                  ${report.name || 'Quality Report'}
                              </a>
                          `).join('');
                      } catch (error) {
                          console.error('Error loading reports:', error);

                          const list = document.getElementById('reportList');
                          if (list) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>Quality reports will appear after pipeline execution.</p>
                                  </div>
                              `;
                          }
                      }
                  }

                  // Initialize dashboard
                  document.addEventListener('DOMContentLoaded', function() {
                      loadMetrics();
                      loadReports();
                  });
              </script>
          </body>
          </html>
          EOF

      - name: Generate dashboard data
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          from pathlib import Path
          from datetime import datetime

          # Create data directory
          site_data = Path("_site/data")
          site_data.mkdir(parents=True, exist_ok=True)

          # Load all metrics
          metrics_dir = Path("data/metrics")
          all_metrics = []

          if metrics_dir.exists():
              for metrics_file in metrics_dir.glob("*.json"):
                  try:
                      with open(metrics_file) as f:
                          data = json.load(f)
                          snapshot = data.get("snapshot", {})
                          stats = data.get("statistics", {})

                          all_metrics.append({
                              "run_id": snapshot.get("run_id", ""),
                              "source": snapshot.get("source", ""),
                              "timestamp": snapshot.get("timestamp", ""),
                              "records_written": snapshot.get("records_written", 0),
                              "success_rate": stats.get("fetch_success_rate", 0),
                          })
                  except Exception as e:
                      print(f"Error loading {metrics_file}: {e}")

          # Generate summary
          if all_metrics:
              summary = {
                  "total_records": sum(m["records_written"] for m in all_metrics),
                  "avg_success_rate": sum(m["success_rate"] for m in all_metrics) / len(all_metrics),
                  "sources": list(set(m["source"] for m in all_metrics)),
                  "last_update": max(m["timestamp"] for m in all_metrics),
                  "total_runs": len(all_metrics)
              }
          else:
              summary = {
                  "total_records": 0,
                  "avg_success_rate": 0,
                  "sources": [],
                  "last_update": datetime.now().isoformat(),
                  "total_runs": 0
              }

          # Save summary
          with open(site_data / "summary.json", "w") as f:
              json.dump(summary, f, indent=2)

          # Copy reports
          import shutil
          reports_dir = Path("data/reports")
          if reports_dir.exists():
              site_reports = Path("_site/reports")
              site_reports.mkdir(exist_ok=True)

              report_list = []
              for report in reports_dir.glob("*_final_quality_report.md"):
                  # Copy report
                  shutil.copy(report, site_reports / report.name)

                  report_list.append({
                      "name": report.stem.replace("_final_quality_report", ""),
                      "filename": report.name
                  })

              # Save report list
              with open(site_data / "reports.json", "w") as f:
                  json.dump(report_list, f, indent=2)
          else:
              # Create empty reports list if no reports exist
              with open(site_data / "reports.json", "w") as f:
                  json.dump([], f, indent=2)

          print(f"Generated dashboard data: {len(all_metrics)} metrics, {summary['total_records']} total records")

          # List generated files for debugging
          import os
          for root, dirs, files in os.walk("_site"):
              for file in files:
                  print(f"  - {os.path.join(root, file)}")
          PYTHON_SCRIPT

      - name: Verify build artifacts
        run: |
          echo "📁 Checking _site directory structure:"
          ls -la _site/
          echo ""
          echo "📁 Checking data directory:"
          ls -la _site/data/ || echo "No data directory"
          echo ""
          echo "📋 Checking summary.json:"
          if [ -f _site/data/summary.json ]; then
            head -5 _site/data/summary.json
          else
            echo "ERROR: summary.json not found!"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "### 🚀 Dashboard Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Dashboard URL**: https://${{ github.repository_owner }}.github.io/somali-dialect-classifier/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To run the interactive dashboard locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "streamlit run dashboard/app.py" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
