name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'data/metrics/**'
      - 'data/reports/**'
      - 'dashboard/**'
      - '.github/workflows/deploy-dashboard.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install streamlit pandas plotly numpy

      - name: Build static dashboard
        run: |
          # Create professional static HTML dashboard for GitHub Pages

          mkdir -p _site

          # Create professional index.html with UX/UI improvements
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta name="description" content="Somali Dialect Classifier - A comprehensive NLP data pipeline for low-resource Somali language processing with 130,000+ deduplicated records">
              <meta name="keywords" content="Somali, NLP, machine learning, dialect classification, low-resource languages">
              <title>Somali Dialect Classifier | Open Source NLP Data Pipeline</title>

              <!-- Google Fonts -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">

              <!-- Chart.js for data visualizations -->
              <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
              <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

              <style>
                  /* ========== Design System - CSS Custom Properties ========== */
                  :root {
                      /* Primary Palette */
                      --primary-50:  #eff6ff;
                      --primary-100: #dbeafe;
                      --primary-200: #bfdbfe;
                      --primary-300: #93c5fd;
                      --primary-400: #60a5fa;
                      --primary-500: #3b82f6;
                      --primary-600: #2563eb;
                      --primary-700: #1d4ed8;
                      --primary-800: #1e40af;
                      --primary-900: #1e3a8a;

                      /* Semantic Colors - WCAG AA Compliant */
                      --success-500: #10b981;
                      --success-600: #059669;
                      --success-700: #047857;
                      --warning-500: #f59e0b;
                      --warning-600: #d97706;
                      --warning-700: #b45309;
                      --danger-500:  #ef4444;
                      --danger-600:  #dc2626;
                      --danger-700:  #b91c1c;

                      /* Neutral Palette */
                      --gray-50:  #f9fafb;
                      --gray-100: #f3f4f6;
                      --gray-200: #e5e7eb;
                      --gray-300: #d1d5db;
                      --gray-400: #9ca3af;
                      --gray-500: #6b7280;
                      --gray-600: #4b5563;
                      --gray-700: #374151;
                      --gray-800: #1f2937;
                      --gray-900: #111827;

                      /* Typography Scale (1.25 - Major Third) */
                      --text-xs:   0.75rem;   /* 12px */
                      --text-sm:   0.875rem;  /* 14px */
                      --text-base: 1rem;      /* 16px */
                      --text-lg:   1.125rem;  /* 18px */
                      --text-xl:   1.25rem;   /* 20px */
                      --text-2xl:  1.563rem;  /* 25px */
                      --text-3xl:  1.953rem;  /* 31px */
                      --text-4xl:  2.441rem;  /* 39px */
                      --text-5xl:  3.052rem;  /* 49px */

                      /* Font Families */
                      --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
                      --font-mono: 'Fira Code', 'SF Mono', Consolas, monospace;

                      /* Font Weights */
                      --font-normal:   400;
                      --font-medium:   500;
                      --font-semibold: 600;
                      --font-bold:     700;

                      /* Line Heights */
                      --leading-tight:  1.25;
                      --leading-snug:   1.375;
                      --leading-normal: 1.5;
                      --leading-relaxed: 1.625;

                      /* Spacing System (8px base) */
                      --space-1:  0.25rem;  /* 4px */
                      --space-2:  0.5rem;   /* 8px */
                      --space-3:  0.75rem;  /* 12px */
                      --space-4:  1rem;     /* 16px */
                      --space-5:  1.25rem;  /* 20px */
                      --space-6:  1.5rem;   /* 24px */
                      --space-8:  2rem;     /* 32px */
                      --space-10: 2.5rem;   /* 40px */
                      --space-12: 3rem;     /* 48px */
                      --space-16: 4rem;     /* 64px */
                      --space-20: 5rem;     /* 80px */

                      /* Border Radius */
                      --radius-sm: 0.25rem;  /* 4px */
                      --radius-md: 0.5rem;   /* 8px */
                      --radius-lg: 0.75rem;  /* 12px */
                      --radius-xl: 1rem;     /* 16px */

                      /* Shadows */
                      --shadow-sm:  0 1px 2px 0 rgba(0, 0, 0, 0.05);
                      --shadow-md:  0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      --shadow-lg:  0 10px 15px -3px rgba(0, 0, 0, 0.1);
                      --shadow-xl:  0 20px 25px -5px rgba(0, 0, 0, 0.1);
                  }

                  /* ========== Base Styles ========== */
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }

                  html {
                      scroll-behavior: smooth;
                  }

                  body {
                      font-family: var(--font-sans);
                      font-size: var(--text-base);
                      line-height: var(--leading-normal);
                      color: var(--gray-900);
                      background: var(--gray-50);
                      -webkit-font-smoothing: antialiased;
                      -moz-osx-font-smoothing: grayscale;
                  }

                  /* ========== Accessibility: Skip Link ========== */
                  .skip-link {
                      position: absolute;
                      top: -40px;
                      left: 0;
                      background: var(--primary-600);
                      color: white;
                      padding: var(--space-2) var(--space-4);
                      text-decoration: none;
                      font-weight: var(--font-semibold);
                      z-index: 100;
                      border-radius: 0 0 var(--radius-md) 0;
                  }

                  .skip-link:focus {
                      top: 0;
                  }

                  /* ========== Accessibility: Focus Indicators ========== */
                  *:focus {
                      outline: 2px solid var(--primary-600);
                      outline-offset: 2px;
                  }

                  *:focus:not(:focus-visible) {
                      outline: none;
                  }

                  *:focus-visible {
                      outline: 3px solid var(--primary-600);
                      outline-offset: 3px;
                  }

                  button:focus-visible,
                  a:focus-visible {
                      outline: 3px solid var(--primary-600);
                      outline-offset: 3px;
                      box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);
                  }

                  /* ========== Hero Section ========== */
                  .hero {
                      background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-800) 100%);
                      color: white;
                      padding: var(--space-20) var(--space-6);
                      text-align: center;
                      position: relative;
                      overflow: hidden;
                  }

                  .hero::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: url('data:image/svg+xml,<svg width="60" height="60" xmlns="http://www.w3.org/2000/svg"><circle cx="30" cy="30" r="1.5" fill="rgba(255,255,255,0.1)"/></svg>');
                      opacity: 0.4;
                      z-index: 0;
                  }

                  .hero-content {
                      max-width: 1000px;
                      margin: 0 auto;
                      position: relative;
                      z-index: 1;
                  }

                  .hero-title {
                      font-size: var(--text-5xl);
                      font-weight: var(--font-bold);
                      letter-spacing: -0.025em;
                      margin-bottom: var(--space-4);
                      line-height: var(--leading-tight);
                  }

                  .hero-badge {
                      display: inline-block;
                      background: rgba(255, 255, 255, 0.2);
                      padding: var(--space-1) var(--space-3);
                      border-radius: 9999px;
                      font-size: var(--text-sm);
                      font-weight: var(--font-semibold);
                      margin-left: var(--space-2);
                      vertical-align: middle;
                      border: 1px solid rgba(255, 255, 255, 0.3);
                  }

                  .hero-subtitle {
                      font-size: var(--text-xl);
                      line-height: var(--leading-relaxed);
                      margin-bottom: var(--space-12);
                      color: rgba(255, 255, 255, 0.95);
                      max-width: 800px;
                      margin-left: auto;
                      margin-right: auto;
                  }

                  .hero-subtitle strong {
                      color: white;
                      font-weight: var(--font-semibold);
                  }

                  /* Hero Stats */
                  .hero-stats {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                      gap: var(--space-8);
                      margin: var(--space-12) auto;
                      max-width: 600px;
                  }

                  .hero-stat {
                      text-align: center;
                  }

                  .hero-stat-value {
                      display: block;
                      font-size: var(--text-4xl);
                      font-weight: var(--font-bold);
                      font-family: var(--font-mono);
                      color: white;
                      margin-bottom: var(--space-2);
                  }

                  .hero-stat-label {
                      display: block;
                      font-size: var(--text-sm);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: rgba(255, 255, 255, 0.8);
                      font-weight: var(--font-medium);
                  }

                  /* Hero CTAs */
                  .hero-cta {
                      display: flex;
                      justify-content: center;
                      gap: var(--space-4);
                      flex-wrap: wrap;
                      margin-top: var(--space-8);
                  }

                  /* Button Styles */
                  .btn {
                      display: inline-block;
                      padding: var(--space-3) var(--space-6);
                      font-weight: var(--font-semibold);
                      text-decoration: none;
                      border-radius: var(--radius-lg);
                      transition: all 0.2s ease;
                      font-size: var(--text-base);
                      cursor: pointer;
                      border: 2px solid transparent;
                      min-width: 140px;
                      text-align: center;
                  }

                  .btn-primary {
                      background: white;
                      color: var(--primary-700);
                      border-color: white;
                  }

                  .btn-primary:hover {
                      background: var(--gray-50);
                      transform: translateY(-2px);
                      box-shadow: var(--shadow-lg);
                  }

                  .btn-secondary {
                      background: transparent;
                      color: white;
                      border-color: white;
                  }

                  .btn-secondary:hover {
                      background: white;
                      color: var(--primary-700);
                      transform: translateY(-2px);
                  }

                  .btn-tertiary {
                      background: rgba(255, 255, 255, 0.1);
                      color: white;
                      border-color: rgba(255, 255, 255, 0.3);
                  }

                  .btn-tertiary:hover {
                      background: rgba(255, 255, 255, 0.2);
                      transform: translateY(-2px);
                  }

                  /* ========== Container & Layout ========== */
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: var(--space-8) var(--space-6);
                  }

                  section {
                      margin-bottom: var(--space-16);
                  }

                  h2 {
                      font-size: var(--text-3xl);
                      font-weight: var(--font-bold);
                      color: var(--gray-900);
                      margin-bottom: var(--space-6);
                      padding-bottom: var(--space-3);
                      border-bottom: 3px solid var(--primary-600);
                  }

                  h3 {
                      font-size: var(--text-xl);
                      font-weight: var(--font-semibold);
                      color: var(--gray-800);
                      margin-bottom: var(--space-4);
                  }

                  p {
                      margin-bottom: var(--space-4);
                      color: var(--gray-600);
                  }

                  /* ========== Metrics Grid ========== */
                  .metrics-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: var(--space-6);
                      margin: var(--space-8) 0;
                  }

                  .metric-card {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-6);
                      box-shadow: var(--shadow-sm);
                      transition: all 0.2s ease;
                  }

                  .metric-card:hover {
                      box-shadow: var(--shadow-md);
                      transform: translateY(-2px);
                      border-color: var(--primary-300);
                  }

                  .metric-label {
                      font-size: var(--text-sm);
                      font-weight: var(--font-semibold);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: var(--gray-600);
                      margin-bottom: var(--space-3);
                  }

                  .metric-value {
                      font-size: var(--text-4xl);
                      font-weight: var(--font-bold);
                      color: var(--primary-600);
                      font-family: var(--font-mono);
                      line-height: var(--leading-tight);
                  }

                  .status-indicator {
                      display: inline-flex;
                      align-items: center;
                      padding: var(--space-1) var(--space-3);
                      border-radius: 9999px;
                      font-size: var(--text-xs);
                      font-weight: var(--font-semibold);
                      margin-top: var(--space-3);
                  }

                  .status-success {
                      background-color: #d1fae5;
                      color: var(--success-700);
                  }

                  .status-warning {
                      background-color: #fef3c7;
                      color: var(--warning-700);
                  }

                  .status-info {
                      background-color: var(--primary-100);
                      color: var(--primary-700);
                  }

                  /* ========== Cards ========== */
                  .card {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      margin-bottom: var(--space-6);
                      box-shadow: var(--shadow-sm);
                  }

                  /* ========== Charts ========== */
                  .charts-section {
                      display: grid;
                      grid-template-columns: 1fr;
                      gap: var(--space-8);
                      margin: var(--space-8) 0;
                  }

                  .chart-container {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      box-shadow: var(--shadow-sm);
                      min-height: 400px;
                  }

                  .chart-title {
                      font-size: var(--text-lg);
                      font-weight: var(--font-semibold);
                      color: var(--gray-900);
                      margin-bottom: var(--space-6);
                      padding-bottom: var(--space-3);
                      border-bottom: 1px solid var(--gray-200);
                  }

                  .chart-canvas {
                      position: relative;
                      height: 350px;
                      width: 100%;
                  }

                  .charts-grid-2 {
                      display: grid;
                      grid-template-columns: repeat(2, 1fr);
                      gap: var(--space-8);
                      margin: var(--space-8) 0;
                  }

                  /* ========== Loading States ========== */
                  .loading-spinner {
                      border: 3px solid var(--gray-200);
                      border-top: 3px solid var(--primary-600);
                      border-radius: 50%;
                      width: 40px;
                      height: 40px;
                      animation: spin 1s linear infinite;
                      margin: var(--space-8) auto;
                  }

                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }

                  .loading-container {
                      text-align: center;
                      padding: var(--space-12) var(--space-4);
                      color: var(--gray-600);
                  }

                  /* ========== Empty States ========== */
                  .empty-state {
                      text-align: center;
                      padding: var(--space-16) var(--space-8);
                      color: var(--gray-600);
                  }

                  .empty-state-icon {
                      font-size: var(--text-5xl);
                      margin-bottom: var(--space-4);
                      opacity: 0.5;
                  }

                  .empty-state-title {
                      font-size: var(--text-xl);
                      font-weight: var(--font-semibold);
                      color: var(--gray-800);
                      margin-bottom: var(--space-2);
                  }

                  .empty-state-text {
                      color: var(--gray-600);
                      margin-bottom: 0;
                  }

                  /* ========== Features List ========== */
                  .feature-list {
                      list-style: none;
                      display: grid;
                      gap: var(--space-4);
                      margin-top: var(--space-4);
                  }

                  .feature-list li {
                      padding-left: var(--space-6);
                      position: relative;
                      color: var(--gray-700);
                  }

                  .feature-list li::before {
                      content: "";
                      position: absolute;
                      left: 0;
                      top: 0.5rem;
                      width: 6px;
                      height: 6px;
                      background: var(--primary-600);
                      border-radius: 50%;
                  }

                  /* ========== Reports ========== */
                  .report-list {
                      display: grid;
                      gap: var(--space-3);
                      margin-top: var(--space-4);
                  }

                  .report-link {
                      display: flex;
                      align-items: center;
                      padding: var(--space-4) var(--space-5);
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-left: 4px solid var(--primary-600);
                      border-radius: var(--radius-md);
                      text-decoration: none;
                      color: var(--gray-800);
                      font-weight: var(--font-medium);
                      transition: all 0.2s ease;
                  }

                  .report-link:hover {
                      background: var(--primary-50);
                      border-left-color: var(--primary-700);
                      transform: translateX(4px);
                      box-shadow: var(--shadow-sm);
                  }

                  /* ========== Collapsible Sections ========== */
                  .collapsible {
                      cursor: pointer;
                      user-select: none;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .collapsible::after {
                      content: '\u25BC';
                      font-size: var(--text-sm);
                      color: var(--gray-600);
                      transition: transform 0.2s ease;
                  }

                  .collapsible.collapsed::after {
                      transform: rotate(-90deg);
                  }

                  .collapsible-content {
                      max-height: 1000px;
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  .collapsible-content.collapsed {
                      max-height: 0;
                  }

                  /* ========== Footer ========== */
                  .footer {
                      margin-top: var(--space-20);
                      padding: var(--space-8) 0;
                      border-top: 1px solid var(--gray-200);
                      text-align: center;
                      color: var(--gray-600);
                      font-size: var(--text-sm);
                  }

                  /* ========== Responsive Design ========== */
                  @media (max-width: 768px) {
                      .hero {
                          padding: var(--space-12) var(--space-4);
                      }

                      .hero-title {
                          font-size: var(--text-3xl);
                      }

                      .hero-badge {
                          display: block;
                          margin-left: 0;
                          margin-top: var(--space-2);
                      }

                      .hero-subtitle {
                          font-size: var(--text-base);
                      }

                      .hero-stats {
                          grid-template-columns: 1fr;
                          gap: var(--space-6);
                      }

                      .hero-cta {
                          flex-direction: column;
                      }

                      .btn {
                          width: 100%;
                      }

                      .metrics-grid {
                          grid-template-columns: 1fr;
                      }

                      .metric-value {
                          font-size: var(--text-3xl);
                      }

                      .charts-grid-2 {
                          grid-template-columns: 1fr;
                      }

                      .chart-container {
                          padding: var(--space-6);
                          min-height: 350px;
                      }

                      .chart-canvas {
                          height: 300px;
                      }

                      h2 {
                          font-size: var(--text-2xl);
                      }
                  }

                  @media (max-width: 480px) {
                      .hero-title {
                          font-size: var(--text-2xl);
                      }

                      .hero-stat-value {
                          font-size: var(--text-3xl);
                      }

                      .container {
                          padding: var(--space-6) var(--space-4);
                      }
                  }

                  /* ========== Print Styles ========== */
                  @media print {
                      .skip-link,
                      .hero-cta,
                      .btn {
                          display: none;
                      }

                      .hero {
                          background: white;
                          color: black;
                          border-bottom: 2px solid black;
                      }

                      .chart-container {
                          page-break-inside: avoid;
                      }
                  }
              </style>
          </head>
          <body>
              <!-- Skip to content link for keyboard navigation -->
              <a href="#main-content" class="skip-link">Skip to main content</a>

              <!-- Hero Section -->
              <section class="hero" role="banner">
                  <div class="hero-content">
                      <h1 class="hero-title">
                          Somali Dialect Classifier
                          <span class="hero-badge">Open Source</span>
                      </h1>

                      <p class="hero-subtitle">
                          A production-grade ML dataset for Somali language processing with
                          <strong>130,000+ deduplicated records</strong> from Wikipedia,
                          BBC News, and academic corpora.
                      </p>

                      <div class="hero-stats" id="heroStats" role="region" aria-label="Key metrics overview">
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroTotalRecords">0</span>
                              <span class="hero-stat-label">Total Records</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSuccessRate">0%</span>
                              <span class="hero-stat-label">Success Rate</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSources">0</span>
                              <span class="hero-stat-label">Data Sources</span>
                          </div>
                      </div>

                      <div class="hero-cta">
                          <a href="#dashboard" class="btn btn-primary">Explore Data</a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                             class="btn btn-secondary"
                             aria-label="View project on GitHub">
                              View on GitHub
                          </a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme"
                             class="btn btn-tertiary"
                             aria-label="Read project documentation">
                              Documentation
                          </a>
                      </div>
                  </div>
              </section>

              <main id="main-content" class="container">
                  <!-- Key Metrics Section -->
                  <section id="dashboard" aria-labelledby="dashboard-heading">
                      <h2 id="dashboard-heading">Pipeline Status</h2>
                      <div class="metrics-grid" id="metricsGrid" role="region" aria-live="polite">
                          <div class="loading-container">
                              <div class="loading-spinner" role="status" aria-label="Loading metrics"></div>
                              <p>Loading pipeline metrics...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Data Visualizations Section -->
                  <section id="visualizations" aria-labelledby="viz-heading">
                      <h2 id="viz-heading">Data Visualizations</h2>

                      <!-- Records Over Time Chart -->
                      <div class="charts-section">
                          <div class="chart-container">
                              <div class="chart-title">Records Processed Over Time</div>
                              <div class="chart-canvas" role="img" aria-label="Line chart showing records processed over time by data source">
                                  <canvas id="recordsOverTimeChart"></canvas>
                              </div>
                          </div>
                      </div>

                      <!-- Source Comparison and Success Rate Charts -->
                      <div class="charts-grid-2">
                          <div class="chart-container">
                              <div class="chart-title">Source Comparison</div>
                              <div class="chart-canvas" role="img" aria-label="Bar chart comparing total records from each data source">
                                  <canvas id="sourceComparisonChart"></canvas>
                              </div>
                          </div>
                          <div class="chart-container">
                              <div class="chart-title">Success Rate Trends</div>
                              <div class="chart-canvas" role="img" aria-label="Line chart showing success rate trends over time by source">
                                  <canvas id="successRateChart"></canvas>
                              </div>
                          </div>
                      </div>

                      <!-- Data Quality Chart -->
                      <div class="charts-section">
                          <div class="chart-container">
                              <div class="chart-title">Data Quality Metrics</div>
                              <div class="chart-canvas" role="img" aria-label="Horizontal bar chart showing data quality metrics">
                                  <canvas id="dataQualityChart"></canvas>
                              </div>
                          </div>
                      </div>
                  </section>

                  <!-- About Section (Collapsible) -->
                  <section id="about" aria-labelledby="about-heading">
                      <h2 id="about-heading" class="collapsible" onclick="toggleCollapsible(this)"
                          tabindex="0"
                          role="button"
                          aria-expanded="true"
                          onkeypress="if(event.key==='Enter'||event.key===' ') toggleCollapsible(this)">
                          About This Project
                      </h2>
                      <div class="collapsible-content">
                          <div class="card">
                              <p>
                                  The Somali Dialect Classifier addresses a critical challenge in natural language processing:
                                  <strong>data scarcity for low-resource languages</strong>. Somali, spoken by over 16 million people,
                                  lacks the extensive datasets available for languages like English or Spanish.
                              </p>
                              <p>
                                  This project builds a comprehensive, automated data pipeline that aggregates high-quality Somali
                                  text data from multiple sources for dialect classification and language modeling.
                              </p>

                              <h3>Key Features</h3>
                              <ul class="feature-list">
                                  <li><strong>Multi-Source Data Collection:</strong> Wikipedia, BBC Somali, HuggingFace, and more</li>
                                  <li><strong>Quality-First Architecture:</strong> Comprehensive filtering and language detection</li>
                                  <li><strong>Intelligent Deduplication:</strong> MinHash LSH for duplicate detection</li>
                                  <li><strong>Production-Grade Pipeline:</strong> Bronze-silver-gold architecture</li>
                              </ul>
                          </div>
                      </div>
                  </section>

                  <section id="reports" aria-labelledby="reports-heading">
                      <h2 id="reports-heading">Quality Reports</h2>
                      <div class="report-list" id="reportList" role="list">
                          <div class="loading-container">
                              <p>Loading quality reports...</p>
                          </div>
                      </div>
                  </section>
              </main>

              <footer class="footer" role="contentinfo">
                  <p>Somali Dialect Classifier | Open Source NLP Research Project</p>
              </footer>

              <script>
                  // Configuration
                  const MAX_RETRIES = 3;
                  let metricsRetries = 0;
                  let allMetricsData = [];

                  // Chart instances (for cleanup)
                  let recordsChart, sourceChart, successChart, qualityChart;

                  // Format large numbers with commas
                  function formatNumber(num) {
                      return num.toLocaleString('en-US');
                  }

                  // Format numbers with K/M suffix
                  function formatNumberShort(num) {
                      if (num >= 1000000) {
                          return (num / 1000000).toFixed(1) + 'M';
                      } else if (num >= 1000) {
                          return (num / 1000).toFixed(0) + 'K';
                      }
                      return num.toString();
                  }

                  // Format dates consistently
                  function formatDate(isoString) {
                      try {
                          const date = new Date(isoString);
                          return date.toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric'
                          });
                      } catch (e) {
                          return 'N/A';
                      }
                  }

                  // Collapsible sections with keyboard support
                  function toggleCollapsible(element) {
                      const content = element.nextElementSibling;
                      const isCollapsed = element.classList.contains('collapsed');

                      element.classList.toggle('collapsed');
                      content.classList.toggle('collapsed');
                      element.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');
                  }

                  // Update hero stats
                  function updateHeroStats(data) {
                      const totalRecords = data.total_records || 0;
                      const successRate = data.avg_success_rate || 0;
                      const sources = data.sources || [];

                      document.getElementById('heroTotalRecords').textContent = formatNumberShort(totalRecords);
                      document.getElementById('heroSuccessRate').textContent = (successRate * 100).toFixed(1) + '%';
                      document.getElementById('heroSources').textContent = sources.length;
                  }

                  // Load all detailed metrics for charts
                  async function loadAllMetrics() {
                      try {
                          const response = await fetch('data/all_metrics.json');
                          if (!response.ok) {
                              throw new Error('Failed to load detailed metrics');
                          }
                          allMetricsData = await response.json();
                          return allMetricsData;
                      } catch (error) {
                          console.error('Error loading detailed metrics:', error);
                          return [];
                      }
                  }

                  // Load and display pipeline metrics
                  async function loadMetrics() {
                      try {
                          const response = await fetch('data/summary.json');

                          if (!response.ok) {
                              throw new Error('Failed to load metrics');
                          }

                          const data = await response.json();

                          // Update hero stats
                          updateHeroStats(data);

                          const grid = document.getElementById('metricsGrid');
                          if (!grid) return;

                          const totalRecords = data.total_records || 0;
                          const successRate = data.avg_success_rate || 0;
                          const sources = data.sources || [];
                          const lastUpdate = data.last_update;
                          const totalRuns = data.total_runs || 0;

                          // Determine success indicator color
                          const successColor = successRate >= 0.9 ? 'success' : successRate >= 0.7 ? 'warning' : 'info';

                          grid.innerHTML = `
                              <div class="metric-card">
                                  <div class="metric-label">Total Records</div>
                                  <div class="metric-value">${formatNumber(totalRecords)}</div>
                                  <div class="status-indicator status-success">Active</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Success Rate</div>
                                  <div class="metric-value">${(successRate * 100).toFixed(1)}%</div>
                                  <div class="status-indicator status-${successColor}">Monitored</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Data Sources</div>
                                  <div class="metric-value">${sources.length}</div>
                                  <div class="status-indicator status-success">Integrated</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Last Updated</div>
                                  <div class="metric-value" style="font-size: 1.25rem;">${formatDate(lastUpdate)}</div>
                                  <div class="status-indicator status-info">${totalRuns} Runs</div>
                              </div>
                          `;

                          // Load detailed metrics and render charts
                          const detailedMetrics = await loadAllMetrics();
                          if (detailedMetrics && detailedMetrics.length > 0) {
                              renderCharts(detailedMetrics);
                          } else {
                              showEmptyChartStates();
                          }

                      } catch (error) {
                          console.error('Error loading metrics:', error);

                          metricsRetries++;
                          if (metricsRetries < MAX_RETRIES) {
                              setTimeout(loadMetrics, 1000);
                          } else {
                              const grid = document.getElementById('metricsGrid');
                              if (grid) {
                                  grid.innerHTML = `
                                      <div class="loading-container">
                                          <p>No metrics available yet. Run the pipeline to generate data.</p>
                                          <div class="status-indicator status-warning">Awaiting Data</div>
                                      </div>
                                  `;
                              }
                              showEmptyChartStates();
                          }
                      }
                  }

                  // Show empty states for charts
                  function showEmptyChartStates() {
                      const chartContainers = ['recordsOverTimeChart', 'sourceComparisonChart', 'successRateChart', 'dataQualityChart'];
                      chartContainers.forEach(chartId => {
                          const canvas = document.getElementById(chartId);
                          if (canvas) {
                              const container = canvas.closest('.chart-container');
                              if (container) {
                                  canvas.style.display = 'none';
                                  container.innerHTML += `
                                      <div class="empty-state">
                                          <div class="empty-state-icon">📊</div>
                                          <div class="empty-state-title">Waiting for Pipeline Data</div>
                                          <div class="empty-state-text">Charts will populate automatically when pipeline runs are available.</div>
                                      </div>
                                  `;
                              }
                          }
                      });
                  }

                  // Render all charts
                  function renderCharts(metrics) {
                      if (!metrics || metrics.length === 0) {
                          showEmptyChartStates();
                          return;
                      }

                      // Sort metrics by timestamp
                      metrics.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

                      renderRecordsOverTimeChart(metrics);
                      renderSourceComparisonChart(metrics);
                      renderSuccessRateChart(metrics);
                      renderDataQualityChart(metrics);
                  }

                  // Chart.js default options for accessibility
                  Chart.defaults.font.family = "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif";
                  Chart.defaults.color = '#6b7280';

                  // 1. Records Over Time Line Chart
                  function renderRecordsOverTimeChart(metrics) {
                      const ctx = document.getElementById('recordsOverTimeChart');
                      if (!ctx) return;

                      // Group by source
                      const sourceData = {};
                      metrics.forEach(m => {
                          if (!sourceData[m.source]) {
                              sourceData[m.source] = [];
                          }
                          sourceData[m.source].push({
                              timestamp: m.timestamp,
                              records: m.records_written
                          });
                      });

                      // Color palette (colorblind-safe)
                      const colors = {
                          'Wikipedia-Somali': '#3b82f6',
                          'BBC-Somali': '#ef4444',
                          'HuggingFace-MC4': '#10b981',
                          'Sprakbanken': '#f59e0b'
                      };

                      const datasets = Object.keys(sourceData).map(source => ({
                          label: source,
                          data: sourceData[source].map(d => ({
                              x: new Date(d.timestamp),
                              y: d.records
                          })),
                          borderColor: colors[source] || '#6b7280',
                          backgroundColor: colors[source] || '#6b7280',
                          borderWidth: 2,
                          tension: 0.4,
                          fill: false
                      }));

                      if (recordsChart) recordsChart.destroy();
                      recordsChart = new Chart(ctx, {
                          type: 'line',
                          data: { datasets },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: true,
                                      position: 'top'
                                  },
                                  tooltip: {
                                      mode: 'index',
                                      intersect: false,
                                      callbacks: {
                                          label: function(context) {
                                              return context.dataset.label + ': ' + formatNumber(context.parsed.y) + ' records';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      type: 'time',
                                      time: {
                                          unit: 'day',
                                          displayFormats: {
                                              day: 'MMM dd'
                                          }
                                      },
                                      title: {
                                          display: true,
                                          text: 'Date'
                                      }
                                  },
                                  y: {
                                      beginAtZero: true,
                                      title: {
                                          display: true,
                                          text: 'Records Processed'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return formatNumber(value);
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 2. Source Comparison Bar Chart
                  function renderSourceComparisonChart(metrics) {
                      const ctx = document.getElementById('sourceComparisonChart');
                      if (!ctx) return;

                      // Aggregate records by source
                      const sourceRecords = {};
                      metrics.forEach(m => {
                          if (!sourceRecords[m.source]) {
                              sourceRecords[m.source] = 0;
                          }
                          sourceRecords[m.source] += m.records_written;
                      });

                      const sources = Object.keys(sourceRecords);
                      const records = sources.map(s => sourceRecords[s]);

                      const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899'];

                      if (sourceChart) sourceChart.destroy();
                      sourceChart = new Chart(ctx, {
                          type: 'bar',
                          data: {
                              labels: sources,
                              datasets: [{
                                  label: 'Total Records',
                                  data: records,
                                  backgroundColor: colors.slice(0, sources.length),
                                  borderRadius: 6,
                                  borderWidth: 0
                              }]
                          },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: false
                                  },
                                  tooltip: {
                                      callbacks: {
                                          label: function(context) {
                                              return formatNumber(context.parsed.y) + ' records';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  y: {
                                      beginAtZero: true,
                                      ticks: {
                                          callback: function(value) {
                                              return formatNumber(value);
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 3. Success Rate Trends Line Chart
                  function renderSuccessRateChart(metrics) {
                      const ctx = document.getElementById('successRateChart');
                      if (!ctx) return;

                      // Group by source
                      const sourceData = {};
                      metrics.forEach(m => {
                          if (!sourceData[m.source]) {
                              sourceData[m.source] = [];
                          }
                          sourceData[m.source].push({
                              timestamp: m.timestamp,
                              success_rate: (m.success_rate || 0) * 100
                          });
                      });

                      const colors = {
                          'Wikipedia-Somali': '#3b82f6',
                          'BBC-Somali': '#ef4444',
                          'HuggingFace-MC4': '#10b981',
                          'Sprakbanken': '#f59e0b'
                      };

                      const datasets = Object.keys(sourceData).map(source => ({
                          label: source,
                          data: sourceData[source].map(d => ({
                              x: new Date(d.timestamp),
                              y: d.success_rate
                          })),
                          borderColor: colors[source] || '#6b7280',
                          backgroundColor: colors[source] || '#6b7280',
                          borderWidth: 2,
                          tension: 0.4,
                          fill: false
                      }));

                      if (successChart) successChart.destroy();
                      successChart = new Chart(ctx, {
                          type: 'line',
                          data: { datasets },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: true,
                                      position: 'top'
                                  },
                                  tooltip: {
                                      mode: 'index',
                                      intersect: false,
                                      callbacks: {
                                          label: function(context) {
                                              return context.dataset.label + ': ' + context.parsed.y.toFixed(1) + '%';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      type: 'time',
                                      time: {
                                          unit: 'day',
                                          displayFormats: {
                                              day: 'MMM dd'
                                          }
                                      },
                                      title: {
                                          display: true,
                                          text: 'Date'
                                      }
                                  },
                                  y: {
                                      min: 0,
                                      max: 100,
                                      title: {
                                          display: true,
                                          text: 'Success Rate (%)'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return value + '%';
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 4. Data Quality Horizontal Bar Chart
                  function renderDataQualityChart(metrics) {
                      const ctx = document.getElementById('dataQualityChart');
                      if (!ctx) return;

                      // Calculate average quality metrics
                      let totalSuccess = 0;
                      let totalDedup = 0;
                      let count = 0;

                      metrics.forEach(m => {
                          if (m.success_rate !== undefined) {
                              totalSuccess += m.success_rate;
                              count++;
                          }
                          if (m.deduplication_rate !== undefined) {
                              totalDedup += m.deduplication_rate;
                          }
                      });

                      const avgSuccess = count > 0 ? (totalSuccess / count) * 100 : 0;
                      const avgDedup = count > 0 ? (totalDedup / count) * 100 : 0;
                      const dataQuality = avgSuccess > 0 ? (avgSuccess * 0.7 + (100 - avgDedup) * 0.3) : 0;

                      if (qualityChart) qualityChart.destroy();
                      qualityChart = new Chart(ctx, {
                          type: 'bar',
                          data: {
                              labels: ['Success Rate', 'Deduplication Rate', 'Overall Quality'],
                              datasets: [{
                                  label: 'Quality Metrics',
                                  data: [avgSuccess, avgDedup, dataQuality],
                                  backgroundColor: ['#10b981', '#f59e0b', '#3b82f6'],
                                  borderRadius: 6,
                                  borderWidth: 0
                              }]
                          },
                          options: {
                              indexAxis: 'y',
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: false
                                  },
                                  tooltip: {
                                      callbacks: {
                                          label: function(context) {
                                              return context.parsed.x.toFixed(1) + '%';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      min: 0,
                                      max: 100,
                                      title: {
                                          display: true,
                                          text: 'Percentage (%)'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return value + '%';
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // Load and display quality reports
                  async function loadReports() {
                      try {
                          const response = await fetch('data/reports.json');

                          if (!response.ok) {
                              throw new Error('Failed to load reports');
                          }

                          const reports = await response.json();
                          const list = document.getElementById('reportList');

                          if (!list) return;

                          if (!reports || reports.length === 0) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>No quality reports available yet.</p>
                                  </div>
                              `;
                              return;
                          }

                          list.innerHTML = reports.slice(0, 10).map(report => `
                              <a href="reports/${report.filename}"
                                 class="report-link"
                                 role="listitem"
                                 aria-label="Quality report for ${report.name}">
                                  ${report.name || 'Quality Report'}
                              </a>
                          `).join('');
                      } catch (error) {
                          console.error('Error loading reports:', error);

                          const list = document.getElementById('reportList');
                          if (list) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>Quality reports will appear after pipeline execution.</p>
                                  </div>
                              `;
                          }
                      }
                  }

                  // Initialize dashboard
                  document.addEventListener('DOMContentLoaded', function() {
                      loadMetrics();
                      loadReports();
                  });
              </script>
          </body>
          </html>
          EOF

      - name: Generate dashboard data
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          from pathlib import Path
          from datetime import datetime

          # Create data directory
          site_data = Path("_site/data")
          site_data.mkdir(parents=True, exist_ok=True)

          # Load all metrics
          metrics_dir = Path("data/metrics")
          all_metrics = []

          if metrics_dir.exists():
              for metrics_file in metrics_dir.glob("*.json"):
                  try:
                      with open(metrics_file) as f:
                          data = json.load(f)
                          snapshot = data.get("snapshot", {})
                          stats = data.get("statistics", {})

                          all_metrics.append({
                              "run_id": snapshot.get("run_id", ""),
                              "source": snapshot.get("source", ""),
                              "timestamp": snapshot.get("timestamp", ""),
                              "records_written": snapshot.get("records_written", 0),
                              "success_rate": stats.get("fetch_success_rate", 0),
                              "deduplication_rate": stats.get("deduplication_rate", 0),
                          })
                  except Exception as e:
                      print(f"Error loading {metrics_file}: {e}")

          # Generate summary
          if all_metrics:
              summary = {
                  "total_records": sum(m["records_written"] for m in all_metrics),
                  "avg_success_rate": sum(m["success_rate"] for m in all_metrics) / len(all_metrics),
                  "sources": list(set(m["source"] for m in all_metrics)),
                  "last_update": max(m["timestamp"] for m in all_metrics),
                  "total_runs": len(all_metrics)
              }
          else:
              summary = {
                  "total_records": 0,
                  "avg_success_rate": 0,
                  "sources": [],
                  "last_update": datetime.now().isoformat(),
                  "total_runs": 0
              }

          # Save summary
          with open(site_data / "summary.json", "w") as f:
              json.dump(summary, f, indent=2)

          # Save all metrics for chart rendering
          with open(site_data / "all_metrics.json", "w") as f:
              json.dump(all_metrics, f, indent=2)

          # Copy reports
          import shutil
          reports_dir = Path("data/reports")
          if reports_dir.exists():
              site_reports = Path("_site/reports")
              site_reports.mkdir(exist_ok=True)

              report_list = []
              for report in reports_dir.glob("*_final_quality_report.md"):
                  # Copy report
                  shutil.copy(report, site_reports / report.name)

                  report_list.append({
                      "name": report.stem.replace("_final_quality_report", ""),
                      "filename": report.name
                  })

              # Save report list
              with open(site_data / "reports.json", "w") as f:
                  json.dump(report_list, f, indent=2)
          else:
              # Create empty reports list if no reports exist
              with open(site_data / "reports.json", "w") as f:
                  json.dump([], f, indent=2)

          print(f"Generated dashboard data: {len(all_metrics)} metrics, {summary['total_records']} total records")

          # List generated files for debugging
          import os
          for root, dirs, files in os.walk("_site"):
              for file in files:
                  print(f"  - {os.path.join(root, file)}")
          PYTHON_SCRIPT

      - name: Verify build artifacts
        run: |
          echo "📁 Checking _site directory structure:"
          ls -la _site/
          echo ""
          echo "📁 Checking data directory:"
          ls -la _site/data/ || echo "No data directory"
          echo ""
          echo "📋 Checking summary.json:"
          if [ -f _site/data/summary.json ]; then
            head -5 _site/data/summary.json
          else
            echo "ERROR: summary.json not found!"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "### 🚀 Dashboard Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Dashboard URL**: https://${{ github.repository_owner }}.github.io/somali-dialect-classifier/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To run the interactive dashboard locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "streamlit run dashboard/app.py" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
