name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'data/metrics/**'
      - 'data/reports/**'
      - 'dashboard/**'
      - '.github/workflows/deploy-dashboard.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install streamlit pandas plotly numpy

      - name: Build static dashboard
        run: |
          # Convert Streamlit app to static HTML
          # Note: For true static export, you'd use tools like streamlit-to-html
          # For now, we'll create a simple index.html that embeds the dashboard

          mkdir -p _site

          # Create index.html that loads the dashboard
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Somali NLP Pipeline Dashboard</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      margin: 0;
                      padding: 20px;
                      background: #f5f5f5;
                  }
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      background: white;
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                  }
                  h1 {
                      color: #1f2937;
                      border-bottom: 3px solid #3b82f6;
                      padding-bottom: 10px;
                  }
                  .metrics {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 20px;
                      margin: 30px 0;
                  }
                  .metric-card {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 20px;
                      border-radius: 8px;
                      text-align: center;
                  }
                  .metric-value {
                      font-size: 2em;
                      font-weight: bold;
                      margin: 10px 0;
                  }
                  .metric-label {
                      opacity: 0.9;
                      font-size: 0.9em;
                  }
                  .cta {
                      background: #3b82f6;
                      color: white;
                      padding: 15px 30px;
                      border-radius: 6px;
                      text-decoration: none;
                      display: inline-block;
                      margin-top: 20px;
                      font-weight: 600;
                  }
                  .cta:hover {
                      background: #2563eb;
                  }
                  .reports {
                      margin-top: 40px;
                  }
                  .report-link {
                      display: block;
                      padding: 15px;
                      margin: 10px 0;
                      background: #f9fafb;
                      border-left: 4px solid #3b82f6;
                      text-decoration: none;
                      color: #1f2937;
                      border-radius: 4px;
                      transition: all 0.2s;
                  }
                  .report-link:hover {
                      background: #f3f4f6;
                      transform: translateX(5px);
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>📊 Somali NLP Data Pipeline Dashboard</h1>
                  <p>Automated data collection and quality monitoring for Somali language NLP datasets.</p>

                  <div class="metrics" id="metrics">
                      <!-- Metrics will be loaded here -->
                  </div>

                  <h2>🚀 Interactive Dashboard</h2>
                  <p>For the full interactive experience with real-time charts and filters:</p>
                  <a href="https://github.com/somali-nlp/somali-dialect-classifier" class="cta">
                      View on GitHub & Run Locally
                  </a>

                  <div class="reports">
                      <h2>📄 Quality Reports</h2>
                      <div id="reports">
                          <!-- Reports will be loaded here -->
                      </div>
                  </div>

                  <hr style="margin: 40px 0; border: none; border-top: 1px solid #e5e7eb;">

                  <h2>💡 About This Project</h2>
                  <p>
                      This dashboard showcases data engineering best practices including:
                  </p>
                  <ul>
                      <li>Automated data pipeline with quality monitoring</li>
                      <li>Structured logging and metrics collection</li>
                      <li>CI/CD with GitHub Actions</li>
                      <li>Interactive visualization with Streamlit</li>
                      <li>Production-ready error handling and deduplication</li>
                  </ul>
              </div>

              <script>
                  // Load and display metrics summary
                  fetch('data/summary.json')
                      .then(response => response.json())
                      .then(data => {
                          const metricsDiv = document.getElementById('metrics');
                          metricsDiv.innerHTML = `
                              <div class="metric-card">
                                  <div class="metric-label">Total Records</div>
                                  <div class="metric-value">${data.total_records.toLocaleString()}</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Success Rate</div>
                                  <div class="metric-value">${(data.avg_success_rate * 100).toFixed(1)}%</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Data Sources</div>
                                  <div class="metric-value">${data.sources.length}</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Last Update</div>
                                  <div class="metric-value">${new Date(data.last_update).toLocaleDateString()}</div>
                              </div>
                          `;
                      })
                      .catch(err => {
                          console.error('Error loading metrics:', err);
                          document.getElementById('metrics').innerHTML =
                              '<p style="color: #6b7280;">Run a pipeline to generate metrics data.</p>';
                      });

                  // Load reports list
                  fetch('data/reports.json')
                      .then(response => response.json())
                      .then(reports => {
                          const reportsDiv = document.getElementById('reports');
                          if (reports.length === 0) {
                              reportsDiv.innerHTML = '<p style="color: #6b7280;">No reports available yet.</p>';
                          } else {
                              reportsDiv.innerHTML = reports.slice(0, 5).map(report => `
                                  <a href="reports/${report.filename}" class="report-link">
                                      📄 ${report.name}
                                  </a>
                              `).join('');
                          }
                      })
                      .catch(err => {
                          console.error('Error loading reports:', err);
                      });
              </script>
          </body>
          </html>
          EOF

      - name: Generate dashboard data
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          from pathlib import Path
          from datetime import datetime

          # Create data directory
          site_data = Path("_site/data")
          site_data.mkdir(parents=True, exist_ok=True)

          # Load all metrics
          metrics_dir = Path("data/metrics")
          all_metrics = []

          if metrics_dir.exists():
              for metrics_file in metrics_dir.glob("*.json"):
                  try:
                      with open(metrics_file) as f:
                          data = json.load(f)
                          snapshot = data.get("snapshot", {})
                          stats = data.get("statistics", {})

                          all_metrics.append({
                              "run_id": snapshot.get("run_id", ""),
                              "source": snapshot.get("source", ""),
                              "timestamp": snapshot.get("timestamp", ""),
                              "records_written": snapshot.get("records_written", 0),
                              "success_rate": stats.get("fetch_success_rate", 0),
                          })
                  except Exception as e:
                      print(f"Error loading {metrics_file}: {e}")

          # Generate summary
          if all_metrics:
              summary = {
                  "total_records": sum(m["records_written"] for m in all_metrics),
                  "avg_success_rate": sum(m["success_rate"] for m in all_metrics) / len(all_metrics),
                  "sources": list(set(m["source"] for m in all_metrics)),
                  "last_update": max(m["timestamp"] for m in all_metrics),
                  "total_runs": len(all_metrics)
              }
          else:
              summary = {
                  "total_records": 0,
                  "avg_success_rate": 0,
                  "sources": [],
                  "last_update": datetime.now().isoformat(),
                  "total_runs": 0
              }

          # Save summary
          with open(site_data / "summary.json", "w") as f:
              json.dump(summary, f, indent=2)

          # Copy reports
          import shutil
          reports_dir = Path("data/reports")
          if reports_dir.exists():
              site_reports = Path("_site/reports")
              site_reports.mkdir(exist_ok=True)

              report_list = []
              for report in reports_dir.glob("*_final_quality_report.md"):
                  # Copy report
                  shutil.copy(report, site_reports / report.name)

                  report_list.append({
                      "name": report.stem.replace("_final_quality_report", ""),
                      "filename": report.name
                  })

              # Save report list
              with open(site_data / "reports.json", "w") as f:
                  json.dump(report_list, f, indent=2)
          else:
              # Create empty reports list if no reports exist
              with open(site_data / "reports.json", "w") as f:
                  json.dump([], f, indent=2)

          print(f"Generated dashboard data: {len(all_metrics)} metrics, {summary['total_records']} total records")

          # List generated files for debugging
          import os
          for root, dirs, files in os.walk("_site"):
              for file in files:
                  print(f"  - {os.path.join(root, file)}")
          PYTHON_SCRIPT

      - name: Verify build artifacts
        run: |
          echo "📁 Checking _site directory structure:"
          ls -la _site/
          echo ""
          echo "📁 Checking data directory:"
          ls -la _site/data/ || echo "No data directory"
          echo ""
          echo "📋 Checking summary.json:"
          if [ -f _site/data/summary.json ]; then
            head -5 _site/data/summary.json
          else
            echo "ERROR: summary.json not found!"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "### 🚀 Dashboard Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Dashboard URL**: https://${{ github.repository_owner }}.github.io/somali-dialect-classifier/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To run the interactive dashboard locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "streamlit run dashboard/app.py" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
