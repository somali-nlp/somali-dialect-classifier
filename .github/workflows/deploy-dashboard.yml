name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'data/metrics/**'
      - 'data/reports/**'
      - 'dashboard/**'
      - '.github/workflows/deploy-dashboard.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install streamlit pandas plotly numpy

      - name: Build static dashboard
        run: |
          # Create professional static HTML dashboard for GitHub Pages

          mkdir -p _site

          # Create professional index.html with UX/UI improvements
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta name="description" content="Somali Dialect Classifier - A comprehensive NLP data pipeline for low-resource Somali language processing with 130,000+ deduplicated records">
              <meta name="keywords" content="Somali, NLP, machine learning, dialect classification, low-resource languages">
              <title>Somali Dialect Classifier | Open Source NLP Data Pipeline</title>

              <!-- Google Fonts -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet">

              <!-- Chart.js for data visualizations with zoom plugin -->
              <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
              <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
              <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8/hammer.min.js"></script>
              <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js"></script>

              <style>
                  /* ========== Design System - CSS Custom Properties ========== */
                  :root {
                      /* Primary Palette */
                      --primary-50:  #eff6ff;
                      --primary-100: #dbeafe;
                      --primary-200: #bfdbfe;
                      --primary-300: #93c5fd;
                      --primary-400: #60a5fa;
                      --primary-500: #3b82f6;
                      --primary-600: #2563eb;
                      --primary-700: #1d4ed8;
                      --primary-800: #1e40af;
                      --primary-900: #1e3a8a;

                      /* Semantic Colors - WCAG AA Compliant */
                      --success-500: #10b981;
                      --success-600: #059669;
                      --success-700: #047857;
                      --warning-500: #f59e0b;
                      --warning-600: #d97706;
                      --warning-700: #b45309;
                      --danger-500:  #ef4444;
                      --danger-600:  #dc2626;
                      --danger-700:  #b91c1c;

                      /* Neutral Palette */
                      --gray-50:  #f9fafb;
                      --gray-100: #f3f4f6;
                      --gray-200: #e5e7eb;
                      --gray-300: #d1d5db;
                      --gray-400: #9ca3af;
                      --gray-500: #6b7280;
                      --gray-600: #4b5563;
                      --gray-700: #374151;
                      --gray-800: #1f2937;
                      --gray-900: #111827;

                      /* Typography Scale (1.25 - Major Third) */
                      --text-xs:   0.75rem;   /* 12px */
                      --text-sm:   0.875rem;  /* 14px */
                      --text-base: 1rem;      /* 16px */
                      --text-lg:   1.125rem;  /* 18px */
                      --text-xl:   1.25rem;   /* 20px */
                      --text-2xl:  1.563rem;  /* 25px */
                      --text-3xl:  1.953rem;  /* 31px */
                      --text-4xl:  2.441rem;  /* 39px */
                      --text-5xl:  3.052rem;  /* 49px */

                      /* Font Families */
                      --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
                      --font-mono: 'Fira Code', 'SF Mono', Consolas, monospace;

                      /* Font Weights */
                      --font-normal:   400;
                      --font-medium:   500;
                      --font-semibold: 600;
                      --font-bold:     700;

                      /* Line Heights */
                      --leading-tight:  1.25;
                      --leading-snug:   1.375;
                      --leading-normal: 1.5;
                      --leading-relaxed: 1.625;

                      /* Spacing System (8px base) */
                      --space-1:  0.25rem;  /* 4px */
                      --space-2:  0.5rem;   /* 8px */
                      --space-3:  0.75rem;  /* 12px */
                      --space-4:  1rem;     /* 16px */
                      --space-5:  1.25rem;  /* 20px */
                      --space-6:  1.5rem;   /* 24px */
                      --space-8:  2rem;     /* 32px */
                      --space-10: 2.5rem;   /* 40px */
                      --space-12: 3rem;     /* 48px */
                      --space-16: 4rem;     /* 64px */
                      --space-20: 5rem;     /* 80px */

                      /* Border Radius */
                      --radius-sm: 0.25rem;  /* 4px */
                      --radius-md: 0.5rem;   /* 8px */
                      --radius-lg: 0.75rem;  /* 12px */
                      --radius-xl: 1rem;     /* 16px */

                      /* Shadows */
                      --shadow-sm:  0 1px 2px 0 rgba(0, 0, 0, 0.05);
                      --shadow-md:  0 4px 6px -1px rgba(0, 0, 0, 0.1);
                      --shadow-lg:  0 10px 15px -3px rgba(0, 0, 0, 0.1);
                      --shadow-xl:  0 20px 25px -5px rgba(0, 0, 0, 0.1);
                  }

                  /* ========== Base Styles ========== */
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }

                  html {
                      scroll-behavior: smooth;
                  }

                  body {
                      font-family: var(--font-sans);
                      font-size: var(--text-base);
                      line-height: var(--leading-normal);
                      color: var(--gray-900);
                      background: var(--gray-50);
                      -webkit-font-smoothing: antialiased;
                      -moz-osx-font-smoothing: grayscale;
                  }

                  /* ========== Accessibility: Skip Link ========== */
                  .skip-link {
                      position: absolute;
                      top: -40px;
                      left: 0;
                      background: var(--primary-600);
                      color: white;
                      padding: var(--space-2) var(--space-4);
                      text-decoration: none;
                      font-weight: var(--font-semibold);
                      z-index: 100;
                      border-radius: 0 0 var(--radius-md) 0;
                  }

                  .skip-link:focus {
                      top: 0;
                  }

                  /* ========== Accessibility: Focus Indicators ========== */
                  *:focus {
                      outline: 2px solid var(--primary-600);
                      outline-offset: 2px;
                  }

                  *:focus:not(:focus-visible) {
                      outline: none;
                  }

                  *:focus-visible {
                      outline: 3px solid var(--primary-600);
                      outline-offset: 3px;
                  }

                  button:focus-visible,
                  a:focus-visible {
                      outline: 3px solid var(--primary-600);
                      outline-offset: 3px;
                      box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);
                  }

                  /* ========== Hero Section ========== */
                  .hero {
                      background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-800) 100%);
                      color: white;
                      padding: var(--space-20) var(--space-6);
                      text-align: center;
                      position: relative;
                      overflow: hidden;
                  }

                  .hero::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: url('data:image/svg+xml,<svg width="60" height="60" xmlns="http://www.w3.org/2000/svg"><circle cx="30" cy="30" r="1.5" fill="rgba(255,255,255,0.1)"/></svg>');
                      opacity: 0.4;
                      z-index: 0;
                  }

                  .hero-content {
                      max-width: 1000px;
                      margin: 0 auto;
                      position: relative;
                      z-index: 1;
                  }

                  .hero-title {
                      font-size: var(--text-5xl);
                      font-weight: var(--font-bold);
                      letter-spacing: -0.025em;
                      margin-bottom: var(--space-4);
                      line-height: var(--leading-tight);
                  }

                  .hero-badge {
                      display: inline-block;
                      background: rgba(255, 255, 255, 0.2);
                      padding: var(--space-1) var(--space-3);
                      border-radius: 9999px;
                      font-size: var(--text-sm);
                      font-weight: var(--font-semibold);
                      margin-left: var(--space-2);
                      vertical-align: middle;
                      border: 1px solid rgba(255, 255, 255, 0.3);
                  }

                  .hero-subtitle {
                      font-size: var(--text-xl);
                      line-height: var(--leading-relaxed);
                      margin-bottom: var(--space-12);
                      color: rgba(255, 255, 255, 0.95);
                      max-width: 800px;
                      margin-left: auto;
                      margin-right: auto;
                  }

                  .hero-subtitle strong {
                      color: white;
                      font-weight: var(--font-semibold);
                  }

                  /* Hero Stats */
                  .hero-stats {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                      gap: var(--space-8);
                      margin: var(--space-12) auto;
                      max-width: 600px;
                  }

                  .hero-stat {
                      text-align: center;
                  }

                  .hero-stat-value {
                      display: block;
                      font-size: var(--text-4xl);
                      font-weight: var(--font-bold);
                      font-family: var(--font-mono);
                      color: white;
                      margin-bottom: var(--space-2);
                  }

                  .hero-stat-label {
                      display: block;
                      font-size: var(--text-sm);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: rgba(255, 255, 255, 0.8);
                      font-weight: var(--font-medium);
                  }

                  /* Hero CTAs */
                  .hero-cta {
                      display: flex;
                      justify-content: center;
                      gap: var(--space-4);
                      flex-wrap: wrap;
                      margin-top: var(--space-8);
                  }

                  /* Button Styles */
                  .btn {
                      display: inline-block;
                      padding: var(--space-3) var(--space-6);
                      font-weight: var(--font-semibold);
                      text-decoration: none;
                      border-radius: var(--radius-lg);
                      transition: all 0.2s ease;
                      font-size: var(--text-base);
                      cursor: pointer;
                      border: 2px solid transparent;
                      min-width: 140px;
                      text-align: center;
                  }

                  .btn-primary {
                      background: white;
                      color: var(--primary-700);
                      border-color: white;
                  }

                  .btn-primary:hover {
                      background: var(--gray-50);
                      transform: translateY(-2px);
                      box-shadow: var(--shadow-lg);
                  }

                  .btn-secondary {
                      background: transparent;
                      color: white;
                      border-color: white;
                  }

                  .btn-secondary:hover {
                      background: white;
                      color: var(--primary-700);
                      transform: translateY(-2px);
                  }

                  .btn-tertiary {
                      background: rgba(255, 255, 255, 0.1);
                      color: white;
                      border-color: rgba(255, 255, 255, 0.3);
                  }

                  .btn-tertiary:hover {
                      background: rgba(255, 255, 255, 0.2);
                      transform: translateY(-2px);
                  }

                  /* ========== Container & Layout ========== */
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: var(--space-8) var(--space-6);
                  }

                  section {
                      margin-bottom: var(--space-16);
                  }

                  h2 {
                      font-size: var(--text-3xl);
                      font-weight: var(--font-bold);
                      color: var(--gray-900);
                      margin-bottom: var(--space-6);
                      padding-bottom: var(--space-3);
                      border-bottom: 3px solid var(--primary-600);
                  }

                  h3 {
                      font-size: var(--text-xl);
                      font-weight: var(--font-semibold);
                      color: var(--gray-800);
                      margin-bottom: var(--space-4);
                  }

                  p {
                      margin-bottom: var(--space-4);
                      color: var(--gray-600);
                  }

                  /* ========== Metrics Grid ========== */
                  .metrics-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: var(--space-6);
                      margin: var(--space-8) 0;
                  }

                  .metric-card {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-6);
                      box-shadow: var(--shadow-sm);
                      transition: all 0.2s ease;
                  }

                  .metric-card:hover {
                      box-shadow: var(--shadow-md);
                      transform: translateY(-2px);
                      border-color: var(--primary-300);
                  }

                  .metric-card.clickable {
                      cursor: pointer;
                  }

                  .metric-card.clickable:active {
                      transform: translateY(0);
                  }

                  .metric-label {
                      font-size: var(--text-sm);
                      font-weight: var(--font-semibold);
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                      color: var(--gray-600);
                      margin-bottom: var(--space-3);
                  }

                  .metric-value {
                      font-size: var(--text-4xl);
                      font-weight: var(--font-bold);
                      color: var(--primary-600);
                      font-family: var(--font-mono);
                      line-height: var(--leading-tight);
                  }

                  .status-indicator {
                      display: inline-flex;
                      align-items: center;
                      padding: var(--space-1) var(--space-3);
                      border-radius: 9999px;
                      font-size: var(--text-xs);
                      font-weight: var(--font-semibold);
                      margin-top: var(--space-3);
                  }

                  .status-success {
                      background-color: #d1fae5;
                      color: var(--success-700);
                  }

                  .status-warning {
                      background-color: #fef3c7;
                      color: var(--warning-700);
                  }

                  .status-info {
                      background-color: var(--primary-100);
                      color: var(--primary-700);
                  }

                  /* ========== Cards ========== */
                  .card {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      margin-bottom: var(--space-6);
                      box-shadow: var(--shadow-sm);
                  }

                  /* ========== Charts ========== */
                  .charts-section {
                      display: grid;
                      grid-template-columns: 1fr;
                      gap: var(--space-8);
                      margin: var(--space-8) 0;
                  }

                  .chart-container {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      box-shadow: var(--shadow-sm);
                      min-height: 400px;
                  }

                  .chart-title {
                      font-size: var(--text-lg);
                      font-weight: var(--font-semibold);
                      color: var(--gray-900);
                      margin-bottom: var(--space-6);
                      padding-bottom: var(--space-3);
                      border-bottom: 1px solid var(--gray-200);
                  }

                  .chart-canvas {
                      position: relative;
                      height: 350px;
                      width: 100%;
                  }

                  .charts-grid-2 {
                      display: grid;
                      grid-template-columns: repeat(2, 1fr);
                      gap: var(--space-8);
                      margin: var(--space-8) 0;
                  }

                  /* ========== Loading States ========== */
                  .loading-spinner {
                      border: 3px solid var(--gray-200);
                      border-top: 3px solid var(--primary-600);
                      border-radius: 50%;
                      width: 40px;
                      height: 40px;
                      animation: spin 1s linear infinite;
                      margin: var(--space-8) auto;
                  }

                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }

                  .loading-container {
                      text-align: center;
                      padding: var(--space-12) var(--space-4);
                      color: var(--gray-600);
                  }

                  /* ========== Empty States ========== */
                  .empty-state {
                      text-align: center;
                      padding: var(--space-16) var(--space-8);
                      color: var(--gray-600);
                  }

                  .empty-state-icon {
                      font-size: var(--text-5xl);
                      margin-bottom: var(--space-4);
                      opacity: 0.5;
                  }

                  .empty-state-title {
                      font-size: var(--text-xl);
                      font-weight: var(--font-semibold);
                      color: var(--gray-800);
                      margin-bottom: var(--space-2);
                  }

                  .empty-state-text {
                      color: var(--gray-600);
                      margin-bottom: 0;
                  }

                  /* ========== Features List ========== */
                  .feature-list {
                      list-style: none;
                      display: grid;
                      gap: var(--space-4);
                      margin-top: var(--space-4);
                  }

                  .feature-list li {
                      padding-left: var(--space-6);
                      position: relative;
                      color: var(--gray-700);
                  }

                  .feature-list li::before {
                      content: "";
                      position: absolute;
                      left: 0;
                      top: 0.5rem;
                      width: 6px;
                      height: 6px;
                      background: var(--primary-600);
                      border-radius: 50%;
                  }

                  /* ========== Reports ========== */
                  .report-list {
                      display: grid;
                      gap: var(--space-3);
                      margin-top: var(--space-4);
                  }

                  .report-link {
                      display: flex;
                      align-items: center;
                      padding: var(--space-4) var(--space-5);
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-left: 4px solid var(--primary-600);
                      border-radius: var(--radius-md);
                      text-decoration: none;
                      color: var(--gray-800);
                      font-weight: var(--font-medium);
                      transition: all 0.2s ease;
                  }

                  .report-link:hover {
                      background: var(--primary-50);
                      border-left-color: var(--primary-700);
                      transform: translateX(4px);
                      box-shadow: var(--shadow-sm);
                  }

                  /* ========== Collapsible Sections ========== */
                  .collapsible {
                      cursor: pointer;
                      user-select: none;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .collapsible::after {
                      content: '\u25BC';
                      font-size: var(--text-sm);
                      color: var(--gray-600);
                      transition: transform 0.2s ease;
                  }

                  .collapsible.collapsed::after {
                      transform: rotate(-90deg);
                  }

                  .collapsible-content {
                      max-height: 1000px;
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  .collapsible-content.collapsed {
                      max-height: 0;
                  }

                  /* ========== Sticky Navigation ========== */
                  .main-nav {
                      position: sticky;
                      top: 0;
                      background: white;
                      border-bottom: 1px solid var(--gray-200);
                      z-index: 50;
                      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
                      transition: box-shadow 0.2s ease;
                  }

                  .main-nav.scrolled {
                      box-shadow: var(--shadow-md);
                  }

                  .nav-container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: var(--space-4) var(--space-6);
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .nav-logo {
                      font-size: var(--text-lg);
                      font-weight: var(--font-bold);
                      color: var(--primary-600);
                      text-decoration: none;
                      display: flex;
                      align-items: center;
                  }

                  .nav-logo:hover {
                      color: var(--primary-700);
                  }

                  .nav-menu {
                      display: flex;
                      list-style: none;
                      gap: var(--space-6);
                      margin: 0;
                      padding: 0;
                  }

                  .nav-menu li {
                      margin: 0;
                  }

                  .nav-menu a {
                      text-decoration: none;
                      color: var(--gray-700);
                      font-weight: var(--font-medium);
                      font-size: var(--text-sm);
                      padding: var(--space-2) var(--space-3);
                      border-radius: var(--radius-md);
                      transition: all 0.2s ease;
                      display: block;
                  }

                  .nav-menu a:hover {
                      background: var(--primary-50);
                      color: var(--primary-700);
                  }

                  .nav-menu a.active {
                      background: var(--primary-600);
                      color: white;
                  }

                  .nav-cta {
                      background: var(--primary-600);
                      color: white !important;
                      padding: 10px 20px !important;
                      margin-left: var(--space-3);
                      box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
                      position: relative;
                      overflow: hidden;
                  }

                  .nav-cta::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: -100%;
                      width: 100%;
                      height: 100%;
                      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                      transition: left 0.5s ease;
                  }

                  .nav-cta:hover {
                      background: var(--primary-700) !important;
                      color: white !important;
                      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
                      transform: translateY(-1px);
                  }

                  .nav-cta:hover::before {
                      left: 100%;
                  }

                  /* Mobile hamburger menu */
                  .nav-toggle {
                      display: none;
                      background: none;
                      border: none;
                      cursor: pointer;
                      padding: var(--space-2);
                      color: var(--gray-700);
                  }

                  .nav-toggle:focus {
                      outline: 2px solid var(--primary-600);
                      outline-offset: 2px;
                  }

                  .hamburger {
                      display: block;
                      width: 24px;
                      height: 2px;
                      background: currentColor;
                      position: relative;
                      transition: all 0.3s ease;
                  }

                  .hamburger::before,
                  .hamburger::after {
                      content: '';
                      position: absolute;
                      width: 24px;
                      height: 2px;
                      background: currentColor;
                      transition: all 0.3s ease;
                  }

                  .hamburger::before {
                      top: -8px;
                  }

                  .hamburger::after {
                      top: 8px;
                  }

                  .nav-toggle[aria-expanded="true"] .hamburger {
                      background: transparent;
                  }

                  .nav-toggle[aria-expanded="true"] .hamburger::before {
                      top: 0;
                      transform: rotate(45deg);
                  }

                  .nav-toggle[aria-expanded="true"] .hamburger::after {
                      top: 0;
                      transform: rotate(-45deg);
                  }

                  /* ========== Data Export Buttons ========== */
                  .export-buttons {
                      display: flex;
                      gap: var(--space-3);
                      margin-bottom: var(--space-6);
                      flex-wrap: wrap;
                  }

                  .btn-export {
                      display: inline-flex;
                      align-items: center;
                      gap: var(--space-2);
                      padding: var(--space-2) var(--space-4);
                      background: var(--gray-100);
                      color: var(--gray-700);
                      border: 1px solid var(--gray-300);
                      border-radius: var(--radius-md);
                      font-size: var(--text-sm);
                      font-weight: var(--font-medium);
                      cursor: pointer;
                      transition: all 0.2s ease;
                  }

                  .btn-export:hover {
                      background: var(--gray-200);
                      border-color: var(--gray-400);
                  }

                  .btn-export:active {
                      transform: translateY(1px);
                  }

                  /* ========== Responsive Data Tables ========== */
                  .data-table-container {
                      overflow-x: auto;
                      margin: var(--space-4) 0;
                  }

                  .data-table {
                      width: 100%;
                      border-collapse: collapse;
                      font-size: var(--text-sm);
                  }

                  .data-table th,
                  .data-table td {
                      padding: var(--space-3) var(--space-4);
                      text-align: left;
                      border-bottom: 1px solid var(--gray-200);
                  }

                  .data-table th {
                      background: var(--gray-50);
                      font-weight: var(--font-semibold);
                      color: var(--gray-700);
                  }

                  .data-table tbody tr:hover {
                      background: var(--gray-50);
                  }

                  /* Card layout for mobile */
                  .table-card {
                      display: none;
                  }

                  /* ========== Contribution Section ========== */
                  .contribute-section {
                      background: linear-gradient(135deg, var(--primary-50) 0%, var(--primary-100) 100%);
                      border-radius: var(--radius-xl);
                      padding: var(--space-12) var(--space-8);
                      margin: var(--space-16) 0;
                      text-align: center;
                  }

                  .contribute-section h2 {
                      color: var(--primary-900);
                      border: none;
                      margin-bottom: var(--space-4);
                  }

                  .contribute-section > p {
                      color: var(--gray-900);
                      font-size: var(--text-lg);
                      margin-bottom: var(--space-10);
                      max-width: 600px;
                      margin-left: auto;
                      margin-right: auto;
                  }

                  .contribute-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                      gap: var(--space-6);
                      margin-top: var(--space-8);
                  }

                  .contribute-card {
                      background: white;
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      box-shadow: var(--shadow-sm);
                      transition: all 0.3s ease;
                      border: 2px solid transparent;
                  }

                  .contribute-card:hover {
                      transform: translateY(-4px);
                      box-shadow: var(--shadow-lg);
                      border-color: var(--primary-300);
                  }

                  .contribute-card h3 {
                      color: var(--primary-700);
                      margin-bottom: var(--space-3);
                      font-size: var(--text-xl);
                  }

                  .contribute-card p {
                      color: var(--gray-600);
                      margin-bottom: var(--space-5);
                      line-height: var(--leading-relaxed);
                  }

                  .contribute-card .btn {
                      width: 100%;
                  }

                  .contribute-icon {
                      font-size: var(--text-4xl);
                      margin-bottom: var(--space-4);
                  }

                  /* ========== Footer ========== */
                  .footer {
                      margin-top: var(--space-20);
                      padding: var(--space-8) 0;
                      border-top: 1px solid var(--gray-200);
                      text-align: center;
                      color: var(--gray-600);
                      font-size: var(--text-sm);
                  }

                  /* ========== Responsive Design ========== */
                  @media (max-width: 768px) {
                      /* Mobile Navigation */
                      .nav-toggle {
                          display: block;
                      }

                      .nav-menu {
                          position: absolute;
                          top: 100%;
                          left: 0;
                          right: 0;
                          background: white;
                          flex-direction: column;
                          gap: 0;
                          border-bottom: 1px solid var(--gray-200);
                          box-shadow: var(--shadow-md);
                          max-height: 0;
                          overflow: hidden;
                          transition: max-height 0.3s ease;
                      }

                      .nav-menu.open {
                          max-height: 400px;
                      }

                      .nav-menu li {
                          border-bottom: 1px solid var(--gray-100);
                      }

                      .nav-menu a {
                          padding: var(--space-4) var(--space-6);
                          border-radius: 0;
                      }

                      /* Responsive Tables - Card Layout */
                      .data-table {
                          display: none;
                      }

                      .table-card {
                          display: block;
                          background: white;
                          border: 1px solid var(--gray-200);
                          border-radius: var(--radius-lg);
                          padding: var(--space-4);
                          margin-bottom: var(--space-4);
                      }

                      .table-card-row {
                          display: flex;
                          justify-content: space-between;
                          padding: var(--space-2) 0;
                          border-bottom: 1px solid var(--gray-100);
                      }

                      .table-card-row:last-child {
                          border-bottom: none;
                      }

                      .table-card-label {
                          font-weight: var(--font-semibold);
                          color: var(--gray-700);
                          font-size: var(--text-sm);
                      }

                      .table-card-value {
                          color: var(--gray-600);
                          font-size: var(--text-sm);
                      }

                      /* Hero Section */
                      .hero {
                          padding: var(--space-12) var(--space-4);
                      }

                      .hero-title {
                          font-size: var(--text-3xl);
                      }

                      .hero-badge {
                          display: block;
                          margin-left: 0;
                          margin-top: var(--space-2);
                      }

                      .hero-subtitle {
                          font-size: var(--text-base);
                      }

                      .hero-stats {
                          grid-template-columns: 1fr;
                          gap: var(--space-6);
                      }

                      .hero-cta {
                          flex-direction: column;
                      }

                      .btn {
                          width: 100%;
                      }

                      .metrics-grid {
                          grid-template-columns: 1fr;
                      }

                      .metric-value {
                          font-size: var(--text-3xl);
                      }

                      .charts-grid-2 {
                          grid-template-columns: 1fr;
                      }

                      .chart-container {
                          padding: var(--space-6);
                          min-height: 350px;
                      }

                      .chart-canvas {
                          height: 300px;
                      }

                      h2 {
                          font-size: var(--text-2xl);
                      }

                      .contribute-grid {
                          grid-template-columns: 1fr;
                      }
                  }

                  @media (max-width: 480px) {
                      .hero-title {
                          font-size: var(--text-2xl);
                      }

                      .hero-stat-value {
                          font-size: var(--text-3xl);
                      }

                      .container {
                          padding: var(--space-6) var(--space-4);
                      }
                  }

                  /* ========== Tooltip Styles ========== */
                  .tooltip {
                      position: relative;
                      display: inline-block;
                  }

                  .tooltip-trigger {
                      display: inline-flex;
                      align-items: center;
                      justify-content: center;
                      width: 18px;
                      height: 18px;
                      border-radius: 50%;
                      background: var(--primary-100);
                      color: var(--primary-600);
                      font-size: var(--text-xs);
                      font-weight: var(--font-bold);
                      cursor: help;
                      margin-left: var(--space-2);
                      transition: all 0.2s ease;
                  }

                  .tooltip-trigger:hover,
                  .tooltip-trigger:focus {
                      background: var(--primary-600);
                      color: white;
                      transform: scale(1.1);
                  }

                  .tooltip-content {
                      position: absolute;
                      bottom: 100%;
                      left: 50%;
                      transform: translateX(-50%) translateY(-8px);
                      background: var(--gray-900);
                      color: white;
                      padding: var(--space-3) var(--space-4);
                      border-radius: var(--radius-md);
                      font-size: var(--text-sm);
                      line-height: var(--leading-relaxed);
                      white-space: nowrap;
                      opacity: 0;
                      visibility: hidden;
                      transition: all 0.2s ease;
                      z-index: 100;
                      box-shadow: var(--shadow-lg);
                      min-width: 200px;
                      max-width: 320px;
                      white-space: normal;
                  }

                  .tooltip-content::after {
                      content: '';
                      position: absolute;
                      top: 100%;
                      left: 50%;
                      transform: translateX(-50%);
                      border: 6px solid transparent;
                      border-top-color: var(--gray-900);
                  }

                  .tooltip-trigger:hover + .tooltip-content,
                  .tooltip-trigger:focus + .tooltip-content {
                      opacity: 1;
                      visibility: visible;
                  }

                  /* ========== Modal Styles ========== */
                  .modal {
                      display: none;
                      position: fixed;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: rgba(0, 0, 0, 0.6);
                      z-index: 1000;
                      padding: var(--space-4);
                      overflow-y: auto;
                      backdrop-filter: blur(4px);
                  }

                  .modal.open {
                      display: flex;
                      align-items: center;
                      justify-content: center;
                  }

                  .modal-content {
                      background: white;
                      border-radius: var(--radius-xl);
                      max-width: 900px;
                      width: 100%;
                      max-height: 90vh;
                      overflow-y: auto;
                      box-shadow: var(--shadow-xl);
                      animation: modalSlideIn 0.3s ease;
                  }

                  @keyframes modalSlideIn {
                      from {
                          transform: translateY(40px);
                          opacity: 0;
                      }
                      to {
                          transform: translateY(0);
                          opacity: 1;
                      }
                  }

                  .modal-header {
                      padding: var(--space-8);
                      border-bottom: 1px solid var(--gray-200);
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                  }

                  .modal-title {
                      font-size: var(--text-2xl);
                      font-weight: var(--font-bold);
                      color: var(--gray-900);
                      margin: 0;
                  }

                  .modal-close {
                      background: var(--gray-100);
                      border: none;
                      width: 40px;
                      height: 40px;
                      border-radius: 50%;
                      cursor: pointer;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      font-size: var(--text-xl);
                      color: var(--gray-600);
                      transition: all 0.2s ease;
                  }

                  .modal-close:hover {
                      background: var(--gray-200);
                      color: var(--gray-900);
                  }

                  .modal-body {
                      padding: var(--space-8);
                  }

                  /* ========== Funnel Chart Styles ========== */
                  .funnel-container {
                      background: white;
                      border-radius: var(--radius-lg);
                      padding: var(--space-8);
                      margin: var(--space-6) 0;
                  }

                  .funnel-stage {
                      position: relative;
                      margin-bottom: var(--space-6);
                  }

                  .funnel-stage-header {
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      margin-bottom: var(--space-3);
                  }

                  .funnel-stage-title {
                      font-size: var(--text-lg);
                      font-weight: var(--font-semibold);
                      color: var(--gray-900);
                  }

                  .funnel-stage-value {
                      font-size: var(--text-xl);
                      font-weight: var(--font-bold);
                      font-family: var(--font-mono);
                  }

                  .funnel-bar {
                      height: 60px;
                      border-radius: var(--radius-md);
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      padding: 0 var(--space-6);
                      color: white;
                      font-weight: var(--font-semibold);
                      box-shadow: var(--shadow-sm);
                      transition: all 0.3s ease;
                  }

                  .funnel-bar:hover {
                      transform: translateX(4px);
                      box-shadow: var(--shadow-md);
                  }

                  .funnel-bar.stage-discovered {
                      background: linear-gradient(135deg, var(--primary-500), var(--primary-600));
                  }

                  .funnel-bar.stage-fetched {
                      background: linear-gradient(135deg, var(--success-500), var(--success-600));
                  }

                  .funnel-bar.stage-processed {
                      background: linear-gradient(135deg, #10b981, #059669);
                  }

                  .funnel-bar.stage-failed {
                      background: linear-gradient(135deg, var(--danger-500), var(--danger-600));
                  }

                  .funnel-arrow {
                      text-align: center;
                      color: var(--gray-400);
                      font-size: var(--text-2xl);
                      margin: var(--space-2) 0;
                  }

                  .funnel-dropoff {
                      display: inline-flex;
                      align-items: center;
                      gap: var(--space-2);
                      padding: var(--space-1) var(--space-3);
                      background: rgba(255, 255, 255, 0.2);
                      border-radius: 9999px;
                      font-size: var(--text-sm);
                  }

                  /* ========== Breakdown Table Styles ========== */
                  .breakdown-table {
                      width: 100%;
                      border-collapse: collapse;
                      margin: var(--space-6) 0;
                  }

                  .breakdown-table th {
                      background: var(--gray-50);
                      padding: var(--space-4);
                      text-align: left;
                      font-weight: var(--font-semibold);
                      color: var(--gray-700);
                      border-bottom: 2px solid var(--gray-200);
                  }

                  .breakdown-table td {
                      padding: var(--space-4);
                      border-bottom: 1px solid var(--gray-100);
                  }

                  .breakdown-table tbody tr:hover {
                      background: var(--gray-50);
                  }

                  .progress-bar-container {
                      width: 100%;
                      height: 8px;
                      background: var(--gray-200);
                      border-radius: 9999px;
                      overflow: hidden;
                      margin-top: var(--space-2);
                  }

                  .progress-bar {
                      height: 100%;
                      border-radius: 9999px;
                      transition: width 0.3s ease;
                  }

                  .progress-bar.good {
                      background: var(--success-500);
                  }

                  .progress-bar.warning {
                      background: var(--warning-500);
                  }

                  .progress-bar.poor {
                      background: var(--danger-500);
                  }

                  /* ========== FAQ Styles ========== */
                  .faq-container {
                      margin-top: var(--space-8);
                  }

                  .faq-item {
                      background: white;
                      border: 1px solid var(--gray-200);
                      border-radius: var(--radius-lg);
                      margin-bottom: var(--space-4);
                      overflow: hidden;
                  }

                  .faq-question {
                      width: 100%;
                      padding: var(--space-5);
                      background: none;
                      border: none;
                      text-align: left;
                      font-size: var(--text-base);
                      font-weight: var(--font-semibold);
                      color: var(--gray-900);
                      cursor: pointer;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      transition: background 0.2s ease;
                  }

                  .faq-question:hover {
                      background: var(--gray-50);
                  }

                  .faq-question::after {
                      content: '+';
                      font-size: var(--text-2xl);
                      color: var(--primary-600);
                      transition: transform 0.3s ease;
                  }

                  .faq-question.open::after {
                      content: '−';
                  }

                  .faq-answer {
                      max-height: 0;
                      overflow: hidden;
                      transition: max-height 0.3s ease;
                  }

                  .faq-answer.open {
                      max-height: 500px;
                  }

                  .faq-answer-content {
                      padding: 0 var(--space-5) var(--space-5) var(--space-5);
                      color: var(--gray-600);
                      line-height: var(--leading-relaxed);
                  }

                  .faq-answer-content ul {
                      margin-left: var(--space-6);
                      margin-top: var(--space-2);
                  }

                  .faq-answer-content li {
                      margin-bottom: var(--space-2);
                  }

                  .faq-answer-content code {
                      background: var(--gray-100);
                      padding: var(--space-1) var(--space-2);
                      border-radius: var(--radius-sm);
                      font-family: var(--font-mono);
                      font-size: var(--text-sm);
                      color: var(--primary-700);
                  }

                  /* ========== Print Styles ========== */
                  @media print {
                      .skip-link,
                      .hero-cta,
                      .btn,
                      .modal {
                          display: none;
                      }

                      .hero {
                          background: white;
                          color: black;
                          border-bottom: 2px solid black;
                      }

                      .chart-container {
                          page-break-inside: avoid;
                      }
                  }
              </style>
          </head>
          <body>
              <!-- Skip to content link for keyboard navigation -->
              <a href="#main-content" class="skip-link">Skip to main content</a>

              <!-- Sticky Navigation Bar -->
              <nav class="main-nav" role="navigation" aria-label="Main navigation">
                  <div class="nav-container">
                      <a href="#" class="nav-logo" aria-label="Somali Dialect Classifier Home">
                          Somali Dialect Classifier
                      </a>
                      <button class="nav-toggle"
                              aria-expanded="false"
                              aria-controls="navMenu"
                              aria-label="Toggle navigation menu">
                          <span class="hamburger"></span>
                      </button>
                      <ul class="nav-menu" id="navMenu">
                          <li><a href="#dashboard">Overview</a></li>
                          <li><a href="#visualizations">Data</a></li>
                          <li><a href="#about">About</a></li>
                          <li><a href="#reports">Reports</a></li>
                          <li><a href="#contribute" class="nav-cta">➕ Contribute</a></li>
                          <li><a href="#success-rate-faq">Metrics FAQ</a></li>
                      </ul>
                  </div>
              </nav>

              <!-- Hero Section -->
              <section class="hero" role="banner">
                  <div class="hero-content">
                      <h1 class="hero-title">
                          Somali Dialect Classifier
                          <span class="hero-badge">Open Source</span>
                      </h1>

                      <p class="hero-subtitle">
                          A production-grade ML dataset for Somali language processing with
                          <strong>130,000+ deduplicated records</strong> from Wikipedia,
                          BBC News, and academic corpora.
                      </p>

                      <div class="hero-stats" id="heroStats" role="region" aria-label="Key metrics overview">
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroTotalRecords">0</span>
                              <span class="hero-stat-label">Total Records</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSuccessRate">0%</span>
                              <span class="hero-stat-label">Success Rate</span>
                          </div>
                          <div class="hero-stat">
                              <span class="hero-stat-value" id="heroSources">0</span>
                              <span class="hero-stat-label">Data Sources</span>
                          </div>
                      </div>

                      <div class="hero-cta">
                          <a href="#dashboard" class="btn btn-primary">Explore Data</a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                             class="btn btn-secondary"
                             aria-label="View project on GitHub">
                              View on GitHub
                          </a>
                          <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme"
                             class="btn btn-tertiary"
                             aria-label="Read project documentation">
                              Documentation
                          </a>
                      </div>
                  </div>
              </section>

              <main id="main-content" class="container">
                  <!-- Key Metrics Section -->
                  <section id="dashboard" aria-labelledby="dashboard-heading">
                      <h2 id="dashboard-heading">Pipeline Status</h2>
                      <div class="metrics-grid" id="metricsGrid" role="region" aria-live="polite">
                          <div class="loading-container">
                              <div class="loading-spinner" role="status" aria-label="Loading metrics"></div>
                              <p>Loading pipeline metrics...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Data Visualizations Section -->
                  <section id="visualizations" aria-labelledby="viz-heading">
                      <h2 id="viz-heading">Data Visualizations</h2>

                      <!-- Data Export Buttons -->
                      <div class="export-buttons" role="group" aria-label="Data export options">
                          <button class="btn-export" onclick="exportData('csv')" aria-label="Export data as CSV">
                              📊 Export CSV
                          </button>
                          <button class="btn-export" onclick="exportData('json')" aria-label="Export data as JSON">
                              📋 Export JSON
                          </button>
                          <button class="btn-export" onclick="resetZoom()" aria-label="Reset all chart zoom levels">
                              🔄 Reset Zoom
                          </button>
                      </div>

                      <!-- Data Collection Info Banner -->
                      <div style="background: #FEF3C7; border-left: 4px solid #F59E0B; padding: 12px 16px; margin-bottom: 20px; border-radius: 4px;">
                          <strong>ℹ️ Initial Data Collection</strong><br>
                          <span style="font-size: 14px; color: #92400E;">Charts show snapshot from first pipeline run (Oct 21, 2025). Time-series trends will appear after multiple daily runs.</span>
                      </div>

                      <!-- Records Over Time Chart -->
                      <div class="charts-section">
                          <div class="chart-container">
                              <div class="chart-title">
                                  Records Processed by Source
                                  <span style="font-size: 0.75rem; color: #6b7280; font-weight: normal; margin-left: 8px;">(Snapshot View)</span>
                                  <span style="font-size: var(--text-xs); color: var(--gray-500); font-weight: normal; margin-left: var(--space-2); display: block;">
                                      (Scroll to zoom, drag to pan)
                                  </span>
                              </div>
                              <div class="chart-canvas" role="img" aria-label="Line chart showing records processed over time by data source">
                                  <canvas id="recordsOverTimeChart"></canvas>
                              </div>
                          </div>
                      </div>

                      <!-- Source Comparison and Success Rate Charts -->
                      <div class="charts-grid-2">
                          <div class="chart-container">
                              <div class="chart-title">Source Comparison</div>
                              <div class="chart-canvas" role="img" aria-label="Bar chart comparing total records from each data source">
                                  <canvas id="sourceComparisonChart"></canvas>
                              </div>
                          </div>
                          <div class="chart-container">
                              <div class="chart-title">
                                  Success Rate by Source
                                  <span style="font-size: 0.75rem; color: #6b7280; font-weight: normal; margin-left: 8px;">(Snapshot View)</span>
                              </div>
                              <div class="chart-canvas" role="img" aria-label="Chart showing success rate by data source">
                                  <canvas id="successRateChart"></canvas>
                              </div>
                          </div>
                      </div>

                      <!-- Data Quality Chart -->
                      <div class="charts-section">
                          <div class="chart-container">
                              <div class="chart-title">Data Quality Metrics</div>
                              <div class="chart-canvas" role="img" aria-label="Horizontal bar chart showing data quality metrics">
                                  <canvas id="dataQualityChart"></canvas>
                              </div>
                          </div>
                      </div>
                  </section>

                  <!-- About Section (Collapsible) -->
                  <section id="about" aria-labelledby="about-heading">
                      <h2 id="about-heading" class="collapsible" onclick="toggleCollapsible(this)"
                          tabindex="0"
                          role="button"
                          aria-expanded="true"
                          onkeypress="if(event.key==='Enter'||event.key===' ') toggleCollapsible(this)">
                          About This Project
                      </h2>
                      <div class="collapsible-content">
                          <div class="card">
                              <p>
                                  The Somali Dialect Classifier addresses a critical challenge in natural language processing:
                                  <strong>data scarcity for low-resource languages</strong>. Somali, spoken by over 16 million people,
                                  lacks the extensive datasets available for languages like English or Spanish.
                              </p>
                              <p>
                                  This project builds a comprehensive, automated data pipeline that aggregates high-quality Somali
                                  text data from multiple sources for dialect classification and language modeling.
                              </p>

                              <h3>Key Features</h3>
                              <ul class="feature-list">
                                  <li><strong>Multi-Source Data Collection:</strong> Wikipedia, BBC Somali, HuggingFace, and more</li>
                                  <li><strong>Quality-First Architecture:</strong> Comprehensive filtering and language detection</li>
                                  <li><strong>Intelligent Deduplication:</strong> MinHash LSH for duplicate detection</li>
                                  <li><strong>Production-Grade Pipeline:</strong> Bronze-silver-gold architecture</li>
                              </ul>
                          </div>
                      </div>
                  </section>

                  <section id="reports" aria-labelledby="reports-heading">
                      <h2 id="reports-heading">Quality Reports</h2>
                      <div class="report-list" id="reportList" role="list">
                          <div class="loading-container">
                              <p>Loading quality reports...</p>
                          </div>
                      </div>
                  </section>

                  <!-- Contribution Section -->
                  <section id="contribute" class="contribute-section" aria-labelledby="contribute-heading">
                      <h2 id="contribute-heading">Contribute to Somali NLP</h2>
                      <p>Join the community in building the largest open-source Somali language dataset for machine learning research.</p>

                      <div class="contribute-grid">
                          <div class="contribute-card">
                              <div class="contribute-icon" role="img" aria-label="Data sources icon">📚</div>
                              <h3>Add Data Sources</h3>
                              <p>Help us integrate new Somali text corpora from Wikipedia, news sites, academic journals, and cultural archives.</p>
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier/issues/new?labels=data-source&template=data_source_request.md"
                                 class="btn btn-primary"
                                 aria-label="Request new data source">
                                  Suggest Source
                              </a>
                          </div>

                          <div class="contribute-card">
                              <div class="contribute-icon" role="img" aria-label="Quality improvement icon">✨</div>
                              <h3>Improve Quality</h3>
                              <p>Enhance data cleaning, deduplication algorithms, language detection, and quality validation processes.</p>
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier/blob/main/CONTRIBUTING.md"
                                 class="btn btn-primary"
                                 aria-label="Read contribution guidelines">
                                  Contributing Guide
                              </a>
                          </div>

                          <div class="contribute-card">
                              <div class="contribute-icon" role="img" aria-label="Build tools icon">🔧</div>
                              <h3>Build Tools</h3>
                              <p>Create analysis tools, visualizations, dialect classifiers, and applications using this dataset.</p>
                              <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                                 class="btn btn-primary"
                                 aria-label="View GitHub repository">
                                  View on GitHub
                              </a>
                          </div>
                      </div>
                  </section>

                  <!-- Success Rate FAQ Section -->
                  <section id="success-rate-faq" aria-labelledby="faq-heading">
                      <h2 id="faq-heading">Understanding Success Rates</h2>
                      <div class="faq-container">
                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  What does "Success Rate" mean?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>The success rate measures how effectively our pipeline fetches and processes content. It's calculated as:</p>
                                      <p><code>Success Rate = (URLs Successfully Processed / URLs Fetched) × 100%</code></p>
                                      <p><strong>Important:</strong> This measures <em>fetch success</em>, not discovery-to-processing conversion. Many discovered URLs are intentionally filtered (navigation pages, assets, duplicates) before fetching begins.</p>
                                      <p>For file-based pipelines (Wikipedia, Språkbanken), the success rate is typically 100% since files are pre-validated. For web scraping (BBC News) and streaming (HuggingFace), expect 95-100% success rates, with small failures due to network issues or content quality filtering.</p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  Why isn't the success rate 100%?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>A success rate below 100% is normal and expected for web scraping operations. Common reasons for failures include:</p>
                                      <ul>
                                          <li><strong>404 Errors:</strong> URLs that no longer exist or have been moved</li>
                                          <li><strong>Robots.txt Restrictions:</strong> Websites blocking automated access to certain pages</li>
                                          <li><strong>Network Timeouts:</strong> Slow servers or network connectivity issues</li>
                                          <li><strong>Rate Limiting:</strong> Websites throttling request frequency</li>
                                          <li><strong>Access Denied:</strong> 403 errors or authentication requirements</li>
                                          <li><strong>Content Quality:</strong> Records filtered due to length, format, or quality checks</li>
                                      </ul>
                                      <p>Our current 98.5% success rate indicates an excellent, healthy pipeline that respects website policies while maximizing data collection quality.</p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  Is 98.5% considered good performance?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>A 98.5% success rate is <strong>outstanding</strong> for multi-source data pipelines. Here's the benchmark:</p>
                                      <ul>
                                          <li><strong>95-100%:</strong> Outstanding (excellent quality control and error handling)</li>
                                          <li><strong>85-95%:</strong> Good to Excellent (typical for well-configured web scraping)</li>
                                          <li><strong>70-85%:</strong> Fair (acceptable for complex scraping operations)</li>
                                          <li><strong>Below 70%:</strong> Needs improvement (review configuration and error handling)</li>
                                      </ul>
                                      <p>Your pipeline is performing exceptionally well, with only 1-2% of fetched records failing due to minor network issues or quality filtering. This indicates robust error handling and high-quality data collection.</p>
                                  </div>
                              </div>
                          </div>

                          <div class="faq-item">
                              <button class="faq-question" onclick="toggleFAQ(this)" aria-expanded="false">
                                  How can I investigate failures?
                              </button>
                              <div class="faq-answer">
                                  <div class="faq-answer-content">
                                      <p>To investigate the small percentage of failures and understand pipeline performance:</p>
                                      <ul>
                                          <li><strong>Click the Success Rate card</strong> above to see detailed per-source breakdowns with pipeline funnels</li>
                                          <li><strong>View Quality Reports</strong> (Reports tab) for HTTP status codes, error types, and failure analysis</li>
                                          <li><strong>Check Pipeline Breakdown</strong> to distinguish between intentional filtering and actual failures</li>
                                          <li><strong>Review metrics files</strong> in <code>data/metrics/*_processing.json</code> for detailed failure reasons and statistics</li>
                                      </ul>
                                      <p>Each metrics file contains <code>http_status_codes</code>, <code>error_types</code>, and <code>filter_reasons</code> fields for debugging. The modal breakdown shows exactly which URLs failed and why, helping you optimize your pipeline configuration.</p>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </section>
              </main>

              <!-- Success Rate Breakdown Modal -->
              <div id="successRateModal" class="modal" role="dialog" aria-labelledby="modalTitle" aria-modal="true">
                  <div class="modal-content">
                      <div class="modal-header">
                          <h2 id="modalTitle" class="modal-title">Success Rate Breakdown</h2>
                          <button class="modal-close" onclick="closeModal()" aria-label="Close modal">×</button>
                      </div>
                      <div class="modal-body" id="modalBody">
                          <!-- Content populated dynamically -->
                      </div>
                  </div>
              </div>

              <footer class="footer" role="contentinfo">
                  <p>Somali Dialect Classifier | Open Source NLP Research Project</p>
                  <p style="margin-top: var(--space-2); font-size: var(--text-xs);">
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier"
                         style="color: var(--primary-600); text-decoration: none;">
                          GitHub
                      </a>
                      •
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier#readme"
                         style="color: var(--primary-600); text-decoration: none;">
                          Documentation
                      </a>
                      •
                      <a href="https://github.com/somali-nlp/somali-dialect-classifier/blob/main/LICENSE"
                         style="color: var(--primary-600); text-decoration: none;">
                          License
                      </a>
                  </p>
              </footer>

              <script>
                  // Configuration
                  const MAX_RETRIES = 3;
                  let metricsRetries = 0;
                  let allMetricsData = [];

                  // Chart instances (for cleanup)
                  let recordsChart, sourceChart, successChart, qualityChart;

                  // ========== Navigation Functions ==========

                  // Mobile navigation toggle
                  function toggleMobileNav() {
                      const toggle = document.querySelector('.nav-toggle');
                      const menu = document.querySelector('.nav-menu');
                      const isExpanded = toggle.getAttribute('aria-expanded') === 'true';

                      toggle.setAttribute('aria-expanded', !isExpanded);
                      menu.classList.toggle('open');
                  }

                  // Smooth scroll to sections
                  function smoothScrollTo(targetId) {
                      const target = document.querySelector(targetId);
                      if (target) {
                          const navHeight = document.querySelector('.main-nav').offsetHeight;
                          const targetPosition = target.offsetTop - navHeight - 20;

                          window.scrollTo({
                              top: targetPosition,
                              behavior: 'smooth'
                          });
                      }
                  }

                  // Update active navigation link
                  function updateActiveNavLink() {
                      const sections = document.querySelectorAll('section[id]');
                      const navLinks = document.querySelectorAll('.nav-menu a');

                      let current = '';
                      const scrollPosition = window.scrollY + 100; // Account for fixed header

                      // Find the section currently in viewport
                      sections.forEach(section => {
                          const sectionTop = section.offsetTop;
                          const sectionBottom = sectionTop + section.clientHeight;

                          // Check if current scroll position is within this section
                          if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
                              current = section.getAttribute('id');
                          }
                      });

                      // Default to first section if at top of page
                      if (!current && sections.length > 0) {
                          current = sections[0].getAttribute('id');
                      }

                      navLinks.forEach(link => {
                          link.classList.remove('active');
                          if (link.getAttribute('href') === '#' + current) {
                              link.classList.add('active');
                          }
                      });
                  }

                  // Add scrolled class to navigation on scroll
                  function handleNavScroll() {
                      const nav = document.querySelector('.main-nav');
                      if (window.scrollY > 50) {
                          nav.classList.add('scrolled');
                      } else {
                          nav.classList.remove('scrolled');
                      }
                  }

                  // ========== Data Export Functions ==========

                  function exportData(format) {
                      if (!allMetricsData || allMetricsData.length === 0) {
                          alert('No data available to export. Please wait for data to load.');
                          return;
                      }

                      const timestamp = new Date().toISOString().split('T')[0];
                      const filename = `somali-nlp-metrics-${timestamp}`;

                      if (format === 'csv') {
                          exportAsCSV(allMetricsData, filename);
                      } else if (format === 'json') {
                          exportAsJSON(allMetricsData, filename);
                      }
                  }

                  function exportAsCSV(data, filename) {
                      // CSV headers
                      const headers = ['Run ID', 'Source', 'Timestamp', 'Records Written', 'Success Rate', 'Deduplication Rate'];

                      // CSV rows
                      const rows = data.map(item => [
                          item.run_id || '',
                          item.source || '',
                          item.timestamp || '',
                          item.records_written || 0,
                          ((item.success_rate || 0) * 100).toFixed(2) + '%',
                          ((item.deduplication_rate || 0) * 100).toFixed(2) + '%'
                      ]);

                      // Combine headers and rows
                      const csvContent = [
                          headers.join(','),
                          ...rows.map(row => row.join(','))
                      ].join('\n');

                      // Download
                      downloadFile(csvContent, filename + '.csv', 'text/csv');
                  }

                  function exportAsJSON(data, filename) {
                      const jsonContent = JSON.stringify(data, null, 2);
                      downloadFile(jsonContent, filename + '.json', 'application/json');
                  }

                  function downloadFile(content, filename, mimeType) {
                      const blob = new Blob([content], { type: mimeType });
                      const url = URL.createObjectURL(blob);
                      const link = document.createElement('a');
                      link.href = url;
                      link.download = filename;
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);
                      URL.revokeObjectURL(url);
                  }

                  // Reset zoom on all charts
                  function resetZoom() {
                      if (recordsChart) recordsChart.resetZoom();
                      if (sourceChart) sourceChart.resetZoom();
                      if (successChart) successChart.resetZoom();
                      if (qualityChart) qualityChart.resetZoom();
                  }

                  // Format large numbers with commas
                  function formatNumber(num) {
                      return num.toLocaleString('en-US');
                  }

                  // Format numbers with K/M suffix
                  function formatNumberShort(num) {
                      if (num >= 1000000) {
                          return (num / 1000000).toFixed(1) + 'M';
                      } else if (num >= 1000) {
                          return (num / 1000).toFixed(0) + 'K';
                      }
                      return num.toString();
                  }

                  // Format dates consistently
                  function formatDate(isoString) {
                      try {
                          const date = new Date(isoString);
                          return date.toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric'
                          });
                      } catch (e) {
                          return 'N/A';
                      }
                  }

                  // Collapsible sections with keyboard support
                  function toggleCollapsible(element) {
                      const content = element.nextElementSibling;
                      const isCollapsed = element.classList.contains('collapsed');

                      element.classList.toggle('collapsed');
                      content.classList.toggle('collapsed');
                      element.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');
                  }

                  // Update hero stats
                  function updateHeroStats(data) {
                      const totalRecords = data.total_records || 0;
                      const successRate = data.avg_success_rate || 0;
                      const sources = data.sources || [];

                      document.getElementById('heroTotalRecords').textContent = formatNumberShort(totalRecords);
                      document.getElementById('heroSuccessRate').textContent = (successRate * 100).toFixed(1) + '%';
                      document.getElementById('heroSources').textContent = sources.length;
                  }

                  // Load all detailed metrics for charts
                  async function loadAllMetrics() {
                      try {
                          const response = await fetch('data/all_metrics.json');
                          if (!response.ok) {
                              throw new Error('Failed to load detailed metrics');
                          }
                          allMetricsData = await response.json();
                          return allMetricsData;
                      } catch (error) {
                          console.error('Error loading detailed metrics:', error);
                          return [];
                      }
                  }

                  // Load and display pipeline metrics
                  async function loadMetrics() {
                      try {
                          const response = await fetch('data/summary.json');

                          if (!response.ok) {
                              throw new Error('Failed to load metrics');
                          }

                          const data = await response.json();

                          // Update hero stats
                          updateHeroStats(data);

                          const grid = document.getElementById('metricsGrid');
                          if (!grid) return;

                          const totalRecords = data.total_records || 0;
                          const successRate = data.avg_success_rate || 0;
                          const sources = data.sources || [];
                          const lastUpdate = data.last_update;
                          const totalRuns = data.total_runs || 0;

                          // Determine success indicator color
                          const successColor = successRate >= 0.9 ? 'success' : successRate >= 0.7 ? 'warning' : 'info';

                          grid.innerHTML = `
                              <div class="metric-card">
                                  <div class="metric-label">
                                      Total Records
                                      <span class="tooltip">
                                          <span class="tooltip-trigger" tabindex="0" aria-label="Information about total records">?</span>
                                          <span class="tooltip-content" role="tooltip">
                                              Total number of Somali text records successfully processed and deduplicated across all data sources.
                                          </span>
                                      </span>
                                  </div>
                                  <div class="metric-value">${formatNumber(totalRecords)}</div>
                                  <div class="status-indicator status-success">Active</div>
                              </div>
                              <div class="metric-card clickable" onclick="openSuccessRateModal()"
                                   role="button"
                                   tabindex="0"
                                   aria-label="Click to view detailed success rate breakdown"
                                   onkeypress="if(event.key==='Enter'||event.key===' ') openSuccessRateModal()">
                                  <div class="metric-label">
                                      Success Rate
                                      <span class="tooltip">
                                          <span class="tooltip-trigger" tabindex="0" aria-label="Information about success rate">?</span>
                                          <span class="tooltip-content" role="tooltip">
                                              Percentage of discovered URLs successfully processed. Click for detailed breakdown by source and failure reasons.
                                          </span>
                                      </span>
                                  </div>
                                  <div class="metric-value">${(successRate * 100).toFixed(1)}%</div>
                                  <div class="status-indicator status-${successColor}">Click for Details</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">
                                      Data Sources
                                      <span class="tooltip">
                                          <span class="tooltip-trigger" tabindex="0" aria-label="Information about data sources">?</span>
                                          <span class="tooltip-content" role="tooltip">
                                              Number of integrated data sources: Wikipedia, BBC Somali, HuggingFace, and academic corpora.
                                          </span>
                                      </span>
                                  </div>
                                  <div class="metric-value">${sources.length}</div>
                                  <div class="status-indicator status-success">Integrated</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-label">Last Updated</div>
                                  <div class="metric-value" style="font-size: 1.25rem;">${formatDate(lastUpdate)}</div>
                                  <div class="status-indicator status-info">${totalRuns} Runs</div>
                              </div>
                          `;

                          // Load detailed metrics and render charts
                          const detailedMetrics = await loadAllMetrics();
                          if (detailedMetrics && detailedMetrics.length > 0) {
                              renderCharts(detailedMetrics);
                          } else {
                              showEmptyChartStates();
                          }

                      } catch (error) {
                          console.error('Error loading metrics:', error);

                          metricsRetries++;
                          if (metricsRetries < MAX_RETRIES) {
                              setTimeout(loadMetrics, 1000);
                          } else {
                              const grid = document.getElementById('metricsGrid');
                              if (grid) {
                                  grid.innerHTML = `
                                      <div class="loading-container">
                                          <p>No metrics available yet. Run the pipeline to generate data.</p>
                                          <div class="status-indicator status-warning">Awaiting Data</div>
                                      </div>
                                  `;
                              }
                              showEmptyChartStates();
                          }
                      }
                  }

                  // Show empty states for charts
                  function showEmptyChartStates() {
                      const chartContainers = ['recordsOverTimeChart', 'sourceComparisonChart', 'successRateChart', 'dataQualityChart'];
                      chartContainers.forEach(chartId => {
                          const canvas = document.getElementById(chartId);
                          if (canvas) {
                              const container = canvas.closest('.chart-container');
                              if (container) {
                                  canvas.style.display = 'none';
                                  container.innerHTML += `
                                      <div class="empty-state">
                                          <div class="empty-state-icon">📊</div>
                                          <div class="empty-state-title">Waiting for Pipeline Data</div>
                                          <div class="empty-state-text">Charts will populate automatically when pipeline runs are available.</div>
                                      </div>
                                  `;
                              }
                          }
                      });
                  }

                  // Render all charts
                  function renderCharts(metrics) {
                      if (!metrics || metrics.length === 0) {
                          showEmptyChartStates();
                          return;
                      }

                      // Sort metrics by timestamp
                      metrics.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

                      renderRecordsOverTimeChart(metrics);
                      renderSourceComparisonChart(metrics);
                      renderSuccessRateChart(metrics);
                      renderDataQualityChart(metrics);
                  }

                  // Chart.js default options for accessibility
                  Chart.defaults.font.family = "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif";
                  Chart.defaults.color = '#6b7280';

                  // 1. Records Over Time Line Chart (with zoom and enhanced tooltips)
                  function renderRecordsOverTimeChart(metrics) {
                      const ctx = document.getElementById('recordsOverTimeChart');
                      if (!ctx) return;

                      // Group by source
                      const sourceData = {};
                      metrics.forEach(m => {
                          if (!sourceData[m.source]) {
                              sourceData[m.source] = [];
                          }
                          sourceData[m.source].push({
                              timestamp: m.timestamp,
                              records: m.records_written,
                              run_id: m.run_id,
                              success_rate: m.success_rate
                          });
                      });

                      // Color palette (Wong's colorblind-safe palette)
                      const colors = {
                          'Wikipedia-Somali': '#0173B2',
                          'BBC-Somali': '#DE8F05',
                          'HuggingFace-MC4': '#029E73',
                          'Sprakbanken': '#CC78BC'
                      };

                      const datasets = Object.keys(sourceData).map(source => ({
                          label: source,
                          data: sourceData[source].map(d => ({
                              x: new Date(d.timestamp),
                              y: d.records,
                              run_id: d.run_id,
                              success_rate: d.success_rate
                          })),
                          borderColor: colors[source] || '#6b7280',
                          backgroundColor: colors[source] || '#6b7280',
                          borderWidth: 2,
                          tension: 0.4,
                          fill: false,
                          pointRadius: 8,
                          pointHoverRadius: 12,
                          pointBorderWidth: 2,
                          pointBackgroundColor: '#ffffff',
                          pointStyle: 'circle'
                      }));

                      if (recordsChart) recordsChart.destroy();
                      recordsChart = new Chart(ctx, {
                          type: 'line',
                          data: { datasets },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              interaction: {
                                  mode: 'index',
                                  intersect: false
                              },
                              plugins: {
                                  legend: {
                                      display: true,
                                      position: 'top',
                                      labels: {
                                          padding: 15,
                                          usePointStyle: true
                                      }
                                  },
                                  tooltip: {
                                      mode: 'index',
                                      intersect: false,
                                      backgroundColor: 'rgba(0, 0, 0, 0.85)',
                                      padding: 12,
                                      titleFont: {
                                          size: 14,
                                          weight: 'bold'
                                      },
                                      bodyFont: {
                                          size: 13
                                      },
                                      callbacks: {
                                          title: function(context) {
                                              return formatDate(context[0].raw.x);
                                          },
                                          label: function(context) {
                                              const records = formatNumber(context.parsed.y);
                                              const successRate = (context.raw.success_rate * 100).toFixed(1);
                                              return [
                                                  context.dataset.label + ':',
                                                  '  Records: ' + records,
                                                  '  Success: ' + successRate + '%'
                                              ];
                                          },
                                          afterBody: function(context) {
                                              if (context[0].raw.run_id) {
                                                  return '\nRun ID: ' + context[0].raw.run_id.substring(0, 8);
                                              }
                                              return '';
                                          }
                                      }
                                  },
                                  zoom: {
                                      pan: {
                                          enabled: true,
                                          mode: 'x',
                                          modifierKey: 'ctrl'
                                      },
                                      zoom: {
                                          wheel: {
                                              enabled: true,
                                              speed: 0.1
                                          },
                                          pinch: {
                                              enabled: true
                                          },
                                          mode: 'x'
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      type: 'time',
                                      time: {
                                          unit: 'day',
                                          displayFormats: {
                                              day: 'MMM dd'
                                          }
                                      },
                                      title: {
                                          display: true,
                                          text: 'Date',
                                          font: {
                                              weight: 'bold'
                                          }
                                      },
                                      grid: {
                                          color: 'rgba(0, 0, 0, 0.05)'
                                      }
                                  },
                                  y: {
                                      beginAtZero: true,
                                      title: {
                                          display: true,
                                          text: 'Records Processed',
                                          font: {
                                              weight: 'bold'
                                          }
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return formatNumber(value);
                                          }
                                      },
                                      grid: {
                                          color: 'rgba(0, 0, 0, 0.05)'
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 2. Source Comparison Bar Chart
                  function renderSourceComparisonChart(metrics) {
                      const ctx = document.getElementById('sourceComparisonChart');
                      if (!ctx) return;

                      // Aggregate records by source
                      const sourceRecords = {};
                      metrics.forEach(m => {
                          if (!sourceRecords[m.source]) {
                              sourceRecords[m.source] = 0;
                          }
                          sourceRecords[m.source] += m.records_written;
                      });

                      const sources = Object.keys(sourceRecords);
                      const records = sources.map(s => sourceRecords[s]);

                      const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899'];

                      if (sourceChart) sourceChart.destroy();
                      sourceChart = new Chart(ctx, {
                          type: 'bar',
                          data: {
                              labels: sources,
                              datasets: [{
                                  label: 'Total Records',
                                  data: records,
                                  backgroundColor: colors.slice(0, sources.length),
                                  borderRadius: 6,
                                  borderWidth: 0
                              }]
                          },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: false
                                  },
                                  tooltip: {
                                      callbacks: {
                                          label: function(context) {
                                              return formatNumber(context.parsed.y) + ' records';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  y: {
                                      beginAtZero: true,
                                      ticks: {
                                          callback: function(value) {
                                              return formatNumber(value);
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 3. Success Rate Trends Line Chart
                  function renderSuccessRateChart(metrics) {
                      const ctx = document.getElementById('successRateChart');
                      if (!ctx) return;

                      // Group by source
                      const sourceData = {};
                      metrics.forEach(m => {
                          if (!sourceData[m.source]) {
                              sourceData[m.source] = [];
                          }
                          sourceData[m.source].push({
                              timestamp: m.timestamp,
                              success_rate: (m.success_rate || 0) * 100
                          });
                      });

                      const colors = {
                          'Wikipedia-Somali': '#0173B2',
                          'BBC-Somali': '#DE8F05',
                          'HuggingFace-MC4': '#029E73',
                          'Sprakbanken': '#CC78BC'
                      };

                      const datasets = Object.keys(sourceData).map(source => ({
                          label: source,
                          data: sourceData[source].map(d => ({
                              x: new Date(d.timestamp),
                              y: d.success_rate
                          })),
                          borderColor: colors[source] || '#6b7280',
                          backgroundColor: colors[source] || '#6b7280',
                          borderWidth: 2,
                          tension: 0.4,
                          fill: false
                      }));

                      if (successChart) successChart.destroy();
                      successChart = new Chart(ctx, {
                          type: 'line',
                          data: { datasets },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: true,
                                      position: 'top'
                                  },
                                  tooltip: {
                                      mode: 'index',
                                      intersect: false,
                                      callbacks: {
                                          label: function(context) {
                                              return context.dataset.label + ': ' + context.parsed.y.toFixed(1) + '%';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      type: 'time',
                                      time: {
                                          unit: 'day',
                                          displayFormats: {
                                              day: 'MMM dd'
                                          }
                                      },
                                      title: {
                                          display: true,
                                          text: 'Date'
                                      }
                                  },
                                  y: {
                                      min: 90,
                                      max: 100,
                                      title: {
                                          display: true,
                                          text: 'Success Rate (%)'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return value + '%';
                                          },
                                          stepSize: 2
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // 4. Data Quality Horizontal Bar Chart
                  function renderDataQualityChart(metrics) {
                      const ctx = document.getElementById('dataQualityChart');
                      if (!ctx) return;

                      // Calculate average quality metrics
                      let totalSuccess = 0;
                      let totalDedup = 0;
                      let count = 0;

                      metrics.forEach(m => {
                          if (m.success_rate !== undefined) {
                              totalSuccess += m.success_rate;
                              count++;
                          }
                          if (m.deduplication_rate !== undefined) {
                              totalDedup += m.deduplication_rate;
                          }
                      });

                      const avgSuccess = count > 0 ? (totalSuccess / count) * 100 : 0;
                      const avgDedup = count > 0 ? (totalDedup / count) * 100 : 0;
                      const dataQuality = avgSuccess > 0 ? (avgSuccess * 0.7 + (100 - avgDedup) * 0.3) : 0;

                      if (qualityChart) qualityChart.destroy();
                      qualityChart = new Chart(ctx, {
                          type: 'bar',
                          data: {
                              labels: ['Success Rate', 'Deduplication Rate', 'Overall Quality'],
                              datasets: [{
                                  label: 'Quality Metrics',
                                  data: [avgSuccess, avgDedup, dataQuality],
                                  backgroundColor: ['#10b981', '#f59e0b', '#3b82f6'],
                                  borderRadius: 6,
                                  borderWidth: 0
                              }]
                          },
                          options: {
                              indexAxis: 'y',
                              responsive: true,
                              maintainAspectRatio: false,
                              plugins: {
                                  legend: {
                                      display: false
                                  },
                                  tooltip: {
                                      callbacks: {
                                          label: function(context) {
                                              return context.parsed.x.toFixed(1) + '%';
                                          }
                                      }
                                  }
                              },
                              scales: {
                                  x: {
                                      min: 0,
                                      max: 100,
                                      title: {
                                          display: true,
                                          text: 'Percentage (%)'
                                      },
                                      ticks: {
                                          callback: function(value) {
                                              return value + '%';
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }

                  // Load and display quality reports
                  async function loadReports() {
                      try {
                          const response = await fetch('data/reports.json');

                          if (!response.ok) {
                              throw new Error('Failed to load reports');
                          }

                          const reports = await response.json();
                          const list = document.getElementById('reportList');

                          if (!list) return;

                          if (!reports || reports.length === 0) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>No quality reports available yet.</p>
                                  </div>
                              `;
                              return;
                          }

                          list.innerHTML = reports.slice(0, 10).map(report => `
                              <a href="reports/${report.filename}"
                                 class="report-link"
                                 role="listitem"
                                 aria-label="Quality report for ${report.name}">
                                  ${report.name || 'Quality Report'}
                              </a>
                          `).join('');
                      } catch (error) {
                          console.error('Error loading reports:', error);

                          const list = document.getElementById('reportList');
                          if (list) {
                              list.innerHTML = `
                                  <div class="loading-container">
                                      <p>Quality reports will appear after pipeline execution.</p>
                                  </div>
                              `;
                          }
                      }
                  }

                  // ========== Modal Functions ==========

                  function openSuccessRateModal() {
                      const modal = document.getElementById('successRateModal');
                      const modalBody = document.getElementById('modalBody');

                      if (!allMetricsData || allMetricsData.length === 0) {
                          modalBody.innerHTML = `
                              <div class="empty-state">
                                  <div class="empty-state-title">No Data Available</div>
                                  <div class="empty-state-text">Run the pipeline to generate success rate breakdowns.</div>
                              </div>
                          `;
                          modal.classList.add('open');
                          document.body.style.overflow = 'hidden';
                          return;
                      }

                      // Generate modal content
                      const content = generateSuccessRateBreakdown(allMetricsData);
                      modalBody.innerHTML = content;

                      modal.classList.add('open');
                      document.body.style.overflow = 'hidden';

                      // Accessibility: focus on close button
                      setTimeout(() => {
                          modal.querySelector('.modal-close').focus();
                      }, 100);
                  }

                  function closeModal() {
                      const modal = document.getElementById('successRateModal');
                      modal.classList.remove('open');
                      document.body.style.overflow = '';
                  }

                  // Close modal on escape key
                  document.addEventListener('keydown', function(e) {
                      if (e.key === 'Escape') {
                          closeModal();
                      }
                  });

                  // Close modal on backdrop click
                  document.addEventListener('click', function(e) {
                      const modal = document.getElementById('successRateModal');
                      if (e.target === modal) {
                          closeModal();
                      }
                  });

                  // ========== Success Rate Breakdown Generator ==========

                  function generateSuccessRateBreakdown(metrics) {
                      // Aggregate data by source
                      const sourceStats = {};

                      metrics.forEach(m => {
                          if (!sourceStats[m.source]) {
                              sourceStats[m.source] = {
                                  discovered: 0,
                                  fetched: 0,
                                  processed: 0,
                                  failed: 0,
                                  httpCodes: {},
                                  errorTypes: {},
                                  totalRecords: 0
                              };
                          }

                          const stats = sourceStats[m.source];
                          stats.discovered += (m.urls_discovered || 0);
                          stats.fetched += (m.urls_fetched || 0);
                          stats.processed += (m.urls_processed || 0);
                          stats.failed += (m.urls_failed || 0);
                          stats.totalRecords += (m.records_written || 0);

                          // Aggregate HTTP status codes
                          if (m.http_status_codes) {
                              Object.entries(m.http_status_codes).forEach(([code, count]) => {
                                  stats.httpCodes[code] = (stats.httpCodes[code] || 0) + count;
                              });
                          }

                          // Aggregate error types
                          if (m.error_types) {
                              Object.entries(m.error_types).forEach(([type, count]) => {
                                  stats.errorTypes[type] = (stats.errorTypes[type] || 0) + count;
                              });
                          }
                      });

                      // Calculate overall stats
                      let totalDiscovered = 0;
                      let totalProcessed = 0;
                      let totalFailed = 0;

                      Object.values(sourceStats).forEach(stats => {
                          totalDiscovered += stats.discovered;
                          totalProcessed += stats.processed;
                          totalFailed += stats.failed;
                      });

                      const overallSuccessRate = totalDiscovered > 0 ? (totalProcessed / totalDiscovered) * 100 : 0;
                      const overallFailureRate = 100 - overallSuccessRate;

                      // Generate funnel visualization
                      const funnelHTML = generatePipelineFunnel(totalDiscovered, totalProcessed, totalFailed);

                      // Generate per-source breakdown
                      const breakdownHTML = generateSourceBreakdown(sourceStats);

                      // Generate failure analysis
                      const failureHTML = generateFailureAnalysis(sourceStats);

                      return `
                          <div>
                              <h3 style="margin-bottom: var(--space-6);">Overall Pipeline Performance</h3>
                              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: var(--space-4); margin-bottom: var(--space-8);">
                                  <div style="background: var(--gray-50); padding: var(--space-4); border-radius: var(--radius-md);">
                                      <div style="font-size: var(--text-sm); color: var(--gray-600); margin-bottom: var(--space-2);">Success Rate</div>
                                      <div style="font-size: var(--text-3xl); font-weight: var(--font-bold); color: var(--success-600);">${overallSuccessRate.toFixed(1)}%</div>
                                  </div>
                                  <div style="background: var(--gray-50); padding: var(--space-4); border-radius: var(--radius-md);">
                                      <div style="font-size: var(--text-sm); color: var(--gray-600); margin-bottom: var(--space-2);">URLs Discovered</div>
                                      <div style="font-size: var(--text-3xl); font-weight: var(--font-bold); color: var(--primary-600);">${formatNumber(totalDiscovered)}</div>
                                  </div>
                                  <div style="background: var(--gray-50); padding: var(--space-4); border-radius: var(--radius-md);">
                                      <div style="font-size: var(--text-sm); color: var(--gray-600); margin-bottom: var(--space-2);">URLs Processed</div>
                                      <div style="font-size: var(--text-3xl); font-weight: var(--font-bold); color: var(--success-600);">${formatNumber(totalProcessed)}</div>
                                  </div>
                                  <div style="background: var(--gray-50); padding: var(--space-4); border-radius: var(--radius-md);">
                                      <div style="font-size: var(--text-sm); color: var(--gray-600); margin-bottom: var(--space-2);">URLs Failed</div>
                                      <div style="font-size: var(--text-3xl); font-weight: var(--font-bold); color: var(--danger-600);">${formatNumber(totalFailed)}</div>
                                  </div>
                              </div>

                              <h3 style="margin-bottom: var(--space-4);">Pipeline Funnel</h3>
                              ${funnelHTML}

                              <h3 style="margin-top: var(--space-8); margin-bottom: var(--space-4);">Per-Source Breakdown</h3>
                              ${breakdownHTML}

                              <h3 style="margin-top: var(--space-8); margin-bottom: var(--space-4);">Failure Analysis</h3>
                              ${failureHTML}

                              <div style="margin-top: var(--space-8); padding: var(--space-6); background: var(--primary-50); border-radius: var(--radius-lg); border-left: 4px solid var(--primary-600);">
                                  <h4 style="margin-bottom: var(--space-3); color: var(--primary-900);">Understanding the Formula</h4>
                                  <p style="margin-bottom: var(--space-2); color: var(--gray-700);"><strong>Success Rate</strong> = (URLs Successfully Processed / URLs Fetched) × 100%</p>
                                  <p style="margin-bottom: var(--space-2); color: var(--gray-700); font-size: var(--text-sm);"><strong>Note:</strong> Discovery → Fetch conversion is intentional filtering (navigation pages, assets, duplicates), not failures.</p>
                                  <p style="color: var(--gray-600); font-size: var(--text-sm); margin: 0;">For file-based pipelines, all discovered records are typically processed (95-100% success). For web scraping and streaming, expect 95-100% success rates with small failures due to network issues, quality filtering, or content validation.</p>
                              </div>
                          </div>
                      `;
                  }

                  function generatePipelineFunnel(discovered, processed, failed) {
                      const successRate = discovered > 0 ? (processed / discovered) * 100 : 0;
                      const failureRate = discovered > 0 ? (failed / discovered) * 100 : 0;
                      const dropoffRate = 100 - successRate - failureRate;

                      return `
                          <div class="funnel-container">
                              <div class="funnel-stage">
                                  <div class="funnel-bar stage-discovered" style="width: 100%;">
                                      <span>URLs Discovered</span>
                                      <span>${formatNumber(discovered)}</span>
                                  </div>
                              </div>

                              <div class="funnel-arrow">↓</div>

                              <div class="funnel-stage">
                                  <div class="funnel-bar stage-processed" style="width: ${successRate}%;">
                                      <span>URLs Processed</span>
                                      <span>${formatNumber(processed)} <span class="funnel-dropoff">${successRate.toFixed(1)}%</span></span>
                                  </div>
                              </div>

                              ${failed > 0 ? `
                              <div class="funnel-arrow">↓</div>

                              <div class="funnel-stage">
                                  <div class="funnel-bar stage-failed" style="width: ${failureRate}%;">
                                      <span>URLs Failed</span>
                                      <span>${formatNumber(failed)} <span class="funnel-dropoff">${failureRate.toFixed(1)}%</span></span>
                                  </div>
                              </div>
                              ` : ''}

                              ${dropoffRate > 1 ? `
                              <div style="margin-top: var(--space-4); padding: var(--space-4); background: var(--warning-50); border-radius: var(--radius-md); border-left: 3px solid var(--warning-500);">
                                  <strong style="color: var(--warning-700);">Drop-off Rate: ${dropoffRate.toFixed(1)}%</strong>
                                  <p style="margin: var(--space-2) 0 0 0; color: var(--gray-600); font-size: var(--text-sm);">
                                      ${formatNumber(Math.round(discovered * (dropoffRate / 100)))} URLs were neither processed nor explicitly marked as failed. This may include skipped or deduplicated URLs.
                                  </p>
                              </div>
                              ` : ''}
                          </div>
                      `;
                  }

                  function generateSourceBreakdown(sourceStats) {
                      const sources = Object.keys(sourceStats).sort();

                      if (sources.length === 0) {
                          return '<p>No source data available.</p>';
                      }

                      const rows = sources.map(source => {
                          const stats = sourceStats[source];
                          const successRate = stats.discovered > 0 ? (stats.processed / stats.discovered) * 100 : 0;
                          const barClass = successRate >= 90 ? 'good' : successRate >= 70 ? 'warning' : 'poor';

                          return `
                              <tr>
                                  <td style="font-weight: var(--font-semibold);">${source}</td>
                                  <td>${formatNumber(stats.discovered)}</td>
                                  <td>${formatNumber(stats.processed)}</td>
                                  <td>${formatNumber(stats.failed)}</td>
                                  <td>
                                      <div style="display: flex; align-items: center; gap: var(--space-2);">
                                          <span style="font-weight: var(--font-semibold); min-width: 45px;">${successRate.toFixed(1)}%</span>
                                          <div class="progress-bar-container" style="flex: 1;">
                                              <div class="progress-bar ${barClass}" style="width: ${successRate}%;"></div>
                                          </div>
                                      </div>
                                  </td>
                                  <td>${formatNumber(stats.totalRecords)}</td>
                              </tr>
                          `;
                      }).join('');

                      return `
                          <div class="data-table-container">
                              <table class="breakdown-table">
                                  <thead>
                                      <tr>
                                          <th>Source</th>
                                          <th>Discovered</th>
                                          <th>Processed</th>
                                          <th>Failed</th>
                                          <th>Success Rate</th>
                                          <th>Records Written</th>
                                      </tr>
                                  </thead>
                                  <tbody>
                                      ${rows}
                                  </tbody>
                              </table>
                          </div>
                      `;
                  }

                  function generateFailureAnalysis(sourceStats) {
                      // Aggregate all HTTP codes and error types
                      const allHttpCodes = {};
                      const allErrorTypes = {};

                      Object.values(sourceStats).forEach(stats => {
                          Object.entries(stats.httpCodes).forEach(([code, count]) => {
                              allHttpCodes[code] = (allHttpCodes[code] || 0) + count;
                          });
                          Object.entries(stats.errorTypes).forEach(([type, count]) => {
                              allErrorTypes[type] = (allErrorTypes[type] || 0) + count;
                          });
                      });

                      const httpCodesHTML = Object.keys(allHttpCodes).length > 0 ? `
                          <div style="margin-bottom: var(--space-6);">
                              <h4 style="margin-bottom: var(--space-3);">HTTP Status Codes</h4>
                              <div style="display: grid; gap: var(--space-2);">
                                  ${Object.entries(allHttpCodes)
                                      .sort((a, b) => b[1] - a[1])
                                      .map(([code, count]) => {
                                          const isSuccess = code.startsWith('2');
                                          const isError = code.startsWith('4') || code.startsWith('5');
                                          const color = isSuccess ? 'var(--success-600)' : isError ? 'var(--danger-600)' : 'var(--warning-600)';
                                          return `
                                              <div style="display: flex; justify-content: space-between; padding: var(--space-2) var(--space-4); background: var(--gray-50); border-radius: var(--radius-md);">
                                                  <span style="color: ${color}; font-weight: var(--font-semibold);">HTTP ${code}</span>
                                                  <span style="font-family: var(--font-mono);">${formatNumber(count)}</span>
                                              </div>
                                          `;
                                      }).join('')}
                              </div>
                          </div>
                      ` : '<p style="color: var(--gray-600);">No HTTP status code data available.</p>';

                      const errorTypesHTML = Object.keys(allErrorTypes).length > 0 ? `
                          <div>
                              <h4 style="margin-bottom: var(--space-3);">Error Types</h4>
                              <div style="display: grid; gap: var(--space-2);">
                                  ${Object.entries(allErrorTypes)
                                      .sort((a, b) => b[1] - a[1])
                                      .map(([type, count]) => `
                                          <div style="display: flex; justify-content: space-between; padding: var(--space-2) var(--space-4); background: var(--gray-50); border-radius: var(--radius-md);">
                                              <span style="color: var(--danger-600); font-weight: var(--font-semibold);">${type}</span>
                                              <span style="font-family: var(--font-mono);">${formatNumber(count)}</span>
                                          </div>
                                      `).join('')}
                              </div>
                          </div>
                      ` : '';

                      if (Object.keys(allHttpCodes).length === 0 && Object.keys(allErrorTypes).length === 0) {
                          return '<p style="color: var(--gray-600);">No failure data recorded. This typically indicates file-based processing with 100% success rate.</p>';
                      }

                      return `
                          <div>
                              ${httpCodesHTML}
                              ${errorTypesHTML}
                          </div>
                      `;
                  }

                  // ========== FAQ Functions ==========

                  function toggleFAQ(button) {
                      const answer = button.nextElementSibling;
                      const isOpen = button.classList.contains('open');

                      // Close all FAQs
                      document.querySelectorAll('.faq-question').forEach(q => {
                          q.classList.remove('open');
                          q.setAttribute('aria-expanded', 'false');
                      });
                      document.querySelectorAll('.faq-answer').forEach(a => {
                          a.classList.remove('open');
                      });

                      // Open clicked FAQ if it was closed
                      if (!isOpen) {
                          button.classList.add('open');
                          button.setAttribute('aria-expanded', 'true');
                          answer.classList.add('open');
                      }
                  }

                  // Initialize dashboard
                  document.addEventListener('DOMContentLoaded', function() {
                      // Load data
                      loadMetrics();
                      loadReports();

                      // Setup navigation
                      const navToggle = document.querySelector('.nav-toggle');
                      if (navToggle) {
                          navToggle.addEventListener('click', toggleMobileNav);
                      }

                      // Setup smooth scroll for navigation links
                      const navLinks = document.querySelectorAll('.nav-menu a, .hero-cta a[href^="#"]');
                      navLinks.forEach(link => {
                          link.addEventListener('click', function(e) {
                              const href = this.getAttribute('href');
                              if (href.startsWith('#')) {
                                  e.preventDefault();
                                  smoothScrollTo(href);

                                  // Close mobile menu after click
                                  const menu = document.querySelector('.nav-menu');
                                  const toggle = document.querySelector('.nav-toggle');
                                  if (menu && menu.classList.contains('open')) {
                                      menu.classList.remove('open');
                                      toggle.setAttribute('aria-expanded', 'false');
                                  }
                              }
                          });
                      });

                      // Setup scroll listeners
                      let scrollTimeout;
                      let rafId;
                      window.addEventListener('scroll', function() {
                          handleNavScroll();

                          // Debounce active link update with longer delay for smooth scrolling
                          clearTimeout(scrollTimeout);
                          if (rafId) {
                              cancelAnimationFrame(rafId);
                          }

                          // Use requestAnimationFrame for smooth updates
                          rafId = requestAnimationFrame(() => {
                              scrollTimeout = setTimeout(updateActiveNavLink, 150);
                          });
                      }, { passive: true });

                      // Initial active link update
                      updateActiveNavLink();

                      // Keyboard support for collapsible sections
                      document.querySelectorAll('.collapsible').forEach(element => {
                          element.addEventListener('keydown', function(e) {
                              if (e.key === 'Enter' || e.key === ' ') {
                                  e.preventDefault();
                                  toggleCollapsible(this);
                              }
                          });
                      });
                  });
              </script>
          </body>
          </html>
          EOF

      - name: Generate dashboard data
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          from pathlib import Path
          from datetime import datetime

          # Create data directory
          site_data = Path("_site/data")
          site_data.mkdir(parents=True, exist_ok=True)

          # Load all metrics (only processing phase for accurate success rates)
          metrics_dir = Path("data/metrics")
          all_metrics = []

          if metrics_dir.exists():
              for metrics_file in metrics_dir.glob("*_processing.json"):
                  try:
                      with open(metrics_file) as f:
                          data = json.load(f)
                          snapshot = data.get("snapshot", {})
                          stats = data.get("statistics", {})

                          all_metrics.append({
                              "run_id": snapshot.get("run_id", ""),
                              "source": snapshot.get("source", ""),
                              "timestamp": snapshot.get("timestamp", ""),
                              "records_written": snapshot.get("records_written", 0),
                              "success_rate": stats.get("fetch_success_rate", 0),
                              "deduplication_rate": stats.get("deduplication_rate", 0),
                              "urls_discovered": snapshot.get("urls_discovered", 0),
                              "urls_fetched": snapshot.get("urls_fetched", 0),
                              "urls_processed": snapshot.get("urls_processed", 0),
                              "urls_failed": snapshot.get("urls_failed", 0),
                              "http_status_codes": snapshot.get("http_status_codes", {}),
                              "error_types": snapshot.get("error_types", {}),
                              "pipeline_type": snapshot.get("pipeline_type", ""),
                          })
                  except Exception as e:
                      print(f"Error loading {metrics_file}: {e}")

          # Generate summary
          if all_metrics:
              summary = {
                  "total_records": sum(m["records_written"] for m in all_metrics),
                  "avg_success_rate": sum(m["success_rate"] for m in all_metrics) / len(all_metrics),
                  "sources": list(set(m["source"] for m in all_metrics)),
                  "last_update": max(m["timestamp"] for m in all_metrics),
                  "total_runs": len(all_metrics)
              }
          else:
              summary = {
                  "total_records": 0,
                  "avg_success_rate": 0,
                  "sources": [],
                  "last_update": datetime.now().isoformat(),
                  "total_runs": 0
              }

          # Save summary
          with open(site_data / "summary.json", "w") as f:
              json.dump(summary, f, indent=2)

          # Save all metrics for chart rendering
          with open(site_data / "all_metrics.json", "w") as f:
              json.dump(all_metrics, f, indent=2)

          # Copy reports
          import shutil
          reports_dir = Path("data/reports")
          if reports_dir.exists():
              site_reports = Path("_site/reports")
              site_reports.mkdir(exist_ok=True)

              report_list = []
              for report in reports_dir.glob("*_final_quality_report.md"):
                  # Copy report
                  shutil.copy(report, site_reports / report.name)

                  report_list.append({
                      "name": report.stem.replace("_final_quality_report", ""),
                      "filename": report.name
                  })

              # Save report list
              with open(site_data / "reports.json", "w") as f:
                  json.dump(report_list, f, indent=2)
          else:
              # Create empty reports list if no reports exist
              with open(site_data / "reports.json", "w") as f:
                  json.dump([], f, indent=2)

          print(f"Generated dashboard data: {len(all_metrics)} metrics, {summary['total_records']} total records")

          # List generated files for debugging
          import os
          for root, dirs, files in os.walk("_site"):
              for file in files:
                  print(f"  - {os.path.join(root, file)}")
          PYTHON_SCRIPT

      - name: Verify build artifacts
        run: |
          echo "📁 Checking _site directory structure:"
          ls -la _site/
          echo ""
          echo "📁 Checking data directory:"
          ls -la _site/data/ || echo "No data directory"
          echo ""
          echo "📋 Checking summary.json:"
          if [ -f _site/data/summary.json ]; then
            head -5 _site/data/summary.json
          else
            echo "ERROR: summary.json not found!"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "### 🚀 Dashboard Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Dashboard URL**: https://${{ github.repository_owner }}.github.io/somali-dialect-classifier/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To run the interactive dashboard locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "streamlit run dashboard/app.py" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
