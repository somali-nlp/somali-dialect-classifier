name: Dashboard Testing Suite

on:
  pull_request:
    paths:
      - 'dashboard/**'
      - 'scripts/generate_consolidated_metrics.py'
      - '_site/**'
      - 'tests/**'
      - '.github/workflows/dashboard-tests.yml'
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  #=============================================================================
  # JOB 1: Python Unit Tests (Data Pipeline)
  #=============================================================================
  python-unit-tests:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -e ".[dev]"

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/dashboard/ -v \
            --cov=scripts \
            --cov-report=xml \
            --cov-report=term \
            --cov-report=html:test-results/coverage-html \
            --junitxml=test-results/junit-unit.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: python-unit
          name: python-unit-tests

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-unit-test-results
          path: |
            test-results/
            coverage.xml

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

  #=============================================================================
  # JOB 2: Build Dashboard
  #=============================================================================
  build-dashboard:
    name: Build Dashboard
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -e ".[dev]"

      - name: Build dashboard site
        run: |
          bash dashboard/build-site.sh

      - name: Generate test metrics
        run: |
          # Use sample test data if no real data exists
          if [ ! -d "data/metrics" ] || [ -z "$(ls -A data/metrics/*_processing.json 2>/dev/null)" ]; then
            echo "No metrics found, creating sample data..."
            mkdir -p data/metrics
            python tests/fixtures/create_sample_metrics.py
          fi

          python scripts/generate_consolidated_metrics.py

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -lh _site/
          echo ""
          ls -lh _site/data/
          echo ""

          if [ ! -f "_site/index.html" ]; then
            echo "ERROR: index.html not found!"
            exit 1
          fi

          if [ ! -f "_site/data/all_metrics.json" ]; then
            echo "ERROR: all_metrics.json not found!"
            exit 1
          fi

          echo "Build artifacts verified successfully!"

      - name: Upload dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-build
          path: _site/
          retention-days: 7

  #=============================================================================
  # JOB 3: Visual Regression Tests
  #=============================================================================
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: build-dashboard
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dashboard build
        uses: actions/download-artifact@v4
        with:
          name: dashboard-build
          path: _site/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps chromium firefox webkit

      - name: Run visual regression tests
        run: |
          npx playwright test tests/visual/ \
            --config=tests/visual/playwright.config.js \
            --reporter=html,json

      - name: Upload visual regression report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-report
          path: |
            test-results/
            playwright-report/

      - name: Comment visual diff on PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ Visual regression tests failed. Please review the [visual regression report](../actions/runs/${{ github.run_id }}) for details.'
            })

  #=============================================================================
  # JOB 4: Accessibility Tests
  #=============================================================================
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: build-dashboard
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dashboard build
        uses: actions/download-artifact@v4
        with:
          name: dashboard-build
          path: _site/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps chromium

      - name: Run accessibility tests
        run: |
          npx playwright test tests/accessibility/ \
            --reporter=html,json

      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: |
            test-results/
            playwright-report/

      - name: Fail if accessibility violations found
        if: failure()
        run: |
          echo "❌ Accessibility violations detected!"
          echo "Please review the accessibility report for WCAG 2.1 AA violations."
          exit 1

  #=============================================================================
  # JOB 5: Integration Tests
  #=============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-dashboard
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dashboard build
        uses: actions/download-artifact@v4
        with:
          name: dashboard-build
          path: _site/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
          npm ci
          npx playwright install --with-deps chromium

      - name: Run Python integration tests
        run: |
          pytest tests/integration/ -v \
            --junitxml=test-results/junit-integration.xml

      - name: Run Playwright integration tests
        run: |
          npx playwright test tests/integration/playwright/ \
            --reporter=html,json

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            playwright-report/

  #=============================================================================
  # JOB 6: Test Summary & Report
  #=============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [python-unit-tests, visual-regression, accessibility-tests, integration-tests]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: Generate test summary
        run: |
          echo "# 🧪 Dashboard Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Unit Tests | ${{ needs.python-unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Regression | ${{ needs.visual-regression.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.python-unit-tests.result }}" != "success" ] || \
             [ "${{ needs.visual-regression.result }}" != "success" ] || \
             [ "${{ needs.accessibility-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "## ⚠️ Action Required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Please review the test reports above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ All Tests Passed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The dashboard refactor is ready for review." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Python Unit Tests': '${{ needs.python-unit-tests.result }}',
              'Visual Regression': '${{ needs.visual-regression.result }}',
              'Accessibility': '${{ needs.accessibility-tests.result }}',
              'Integration Tests': '${{ needs.integration-tests.result }}'
            };

            const summary = Object.entries(results)
              .map(([name, status]) => {
                const icon = status === 'success' ? '✅' : '❌';
                return `| ${name} | ${icon} ${status} |`;
              })
              .join('\n');

            const body = `## 🧪 Dashboard Test Results\n\n| Test Suite | Status |\n|------------|--------|\n${summary}\n\n[View detailed results](../actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
