#!/bin/bash
# Verify CI/CD Dashboard Setup
# This script checks that all required files and dependencies are in place

set -e

echo "🔍 Verifying CI/CD Dashboard Setup"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

SUCCESS_COUNT=0
FAILURE_COUNT=0
WARNING_COUNT=0

check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}✓${NC} $1"
        ((SUCCESS_COUNT++))
    else
        echo -e "${RED}✗${NC} $1 (missing)"
        ((FAILURE_COUNT++))
    fi
}

check_dir() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}✓${NC} $1/"
        ((SUCCESS_COUNT++))
    else
        echo -e "${RED}✗${NC} $1/ (missing)"
        ((FAILURE_COUNT++))
    fi
}

check_executable() {
    if [ -x "$1" ]; then
        echo -e "${GREEN}✓${NC} $1 (executable)"
        ((SUCCESS_COUNT++))
    else
        echo -e "${YELLOW}⚠${NC} $1 (not executable)"
        ((WARNING_COUNT++))
    fi
}

check_command() {
    if command -v "$1" &> /dev/null; then
        VERSION=$($1 --version 2>&1 | head -1)
        echo -e "${GREEN}✓${NC} $1 ($VERSION)"
        ((SUCCESS_COUNT++))
    else
        echo -e "${RED}✗${NC} $1 (not installed)"
        ((FAILURE_COUNT++))
    fi
}

echo "1. Checking Workflows"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
check_file ".github/workflows/dashboard-metrics.yml"
check_file ".github/workflows/dashboard-validation.yml"
check_file ".github/workflows/deployment-health-check.yml"
check_file ".github/workflows/ci.yml"
check_file ".github/workflows/deploy-dashboard-v2.yml"
echo ""

echo "2. Checking Validation System"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
check_file "schemas/metrics_schema.json"
check_file "scripts/validate_metrics.py"
check_executable "scripts/validate_metrics.py"
echo ""

echo "3. Checking Testing Infrastructure"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
check_dir "tests/visual"
check_file "tests/visual/dashboard.spec.js"
check_file "playwright.config.js"
check_file "package.json"
echo ""

echo "4. Checking Documentation"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
check_file "docs/CICD_DASHBOARD.md"
check_file "docs/CICD_QUICK_REFERENCE.md"
check_file "CI_CD_SETUP_SUMMARY.md"
echo ""

echo "5. Checking Dashboard Files"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
check_dir "dashboard"
check_file "dashboard/build-site.sh"
check_executable "dashboard/build-site.sh"
echo ""

echo "6. Checking Dependencies"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
check_command "python"
check_command "pip"
check_command "node"
check_command "npm"
check_command "jq"
check_command "gh"
echo ""

echo "7. Checking Python Packages"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
for pkg in pandas plotly numpy jsonschema; do
    if python -c "import $pkg" 2>/dev/null; then
        VERSION=$(python -c "import $pkg; print($pkg.__version__)" 2>/dev/null || echo "unknown")
        echo -e "${GREEN}✓${NC} $pkg ($VERSION)"
        ((SUCCESS_COUNT++))
    else
        echo -e "${YELLOW}⚠${NC} $pkg (not installed - optional for local dev)"
        ((WARNING_COUNT++))
    fi
done
echo ""

echo "8. Checking Node Packages"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
if [ -d "node_modules" ]; then
    if [ -d "node_modules/@playwright/test" ]; then
        echo -e "${GREEN}✓${NC} @playwright/test (installed)"
        ((SUCCESS_COUNT++))
    else
        echo -e "${YELLOW}⚠${NC} @playwright/test (not installed - run: npm install)"
        ((WARNING_COUNT++))
    fi
else
    echo -e "${YELLOW}⚠${NC} node_modules (not found - run: npm install)"
    ((WARNING_COUNT++))
fi
echo ""

echo "9. Checking Data Directories"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
check_dir "data/metrics"
check_dir "_site/data"

# Check for metrics files
METRICS_COUNT=$(find data/metrics -name "*_processing.json" 2>/dev/null | wc -l | tr -d ' ')
if [ "$METRICS_COUNT" -gt 0 ]; then
    echo -e "${GREEN}✓${NC} Found $METRICS_COUNT processing metrics files"
    ((SUCCESS_COUNT++))
else
    echo -e "${YELLOW}⚠${NC} No processing metrics files found (will be generated by pipelines)"
    ((WARNING_COUNT++))
fi
echo ""

echo "10. Testing Core Functionality"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Test validation script
if [ -f "scripts/validate_metrics.py" ]; then
    if python scripts/validate_metrics.py --help &>/dev/null; then
        echo -e "${GREEN}✓${NC} Validation script runs"
        ((SUCCESS_COUNT++))
    else
        echo -e "${YELLOW}⚠${NC} Validation script has issues"
        ((WARNING_COUNT++))
    fi
fi

# Test JSON validation
if [ -f "_site/data/all_metrics.json" ]; then
    if jq empty _site/data/all_metrics.json 2>/dev/null; then
        echo -e "${GREEN}✓${NC} all_metrics.json is valid JSON"
        ((SUCCESS_COUNT++))
    else
        echo -e "${RED}✗${NC} all_metrics.json is invalid JSON"
        ((FAILURE_COUNT++))
    fi
else
    echo -e "${YELLOW}⚠${NC} all_metrics.json not found (will be generated)"
    ((WARNING_COUNT++))
fi

# Test schema validation
if [ -f "schemas/metrics_schema.json" ]; then
    if jq empty schemas/metrics_schema.json 2>/dev/null; then
        echo -e "${GREEN}✓${NC} metrics_schema.json is valid JSON"
        ((SUCCESS_COUNT++))
    else
        echo -e "${RED}✗${NC} metrics_schema.json is invalid JSON"
        ((FAILURE_COUNT++))
    fi
fi
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "VERIFICATION SUMMARY"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo -e "${GREEN}✓${NC} Passed:   $SUCCESS_COUNT"
echo -e "${YELLOW}⚠${NC} Warnings: $WARNING_COUNT"
echo -e "${RED}✗${NC} Failed:   $FAILURE_COUNT"
echo ""

if [ $FAILURE_COUNT -eq 0 ]; then
    echo -e "${GREEN}✅ Setup verification complete - all critical checks passed!${NC}"
    echo ""
    echo "Next steps:"
    echo "  1. Install missing optional dependencies (if any warnings above)"
    echo "  2. Run: npm install"
    echo "  3. Run: npx playwright install --with-deps"
    echo "  4. Test locally: npm test"
    echo "  5. Workflows will trigger automatically on push to main"
    echo ""
    exit 0
else
    echo -e "${RED}❌ Setup verification failed - $FAILURE_COUNT critical issues found${NC}"
    echo ""
    echo "Please fix the issues above and run this script again."
    echo ""
    exit 1
fi
