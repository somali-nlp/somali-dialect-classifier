[build-system]
requires = ["hatchling>=1.18"]
build-backend = "hatchling.build"

[project]
name = "somali-dialect-classifier"
version = "0.1.0"
description = "Somali NLP: download, extract, and process Somali Wikipedia for dialect classification"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [{ name = "Somali NLP" }]
dependencies = [
  "requests>=2.31",
  "tqdm>=4.65",
  "pyarrow>=14",
  "beautifulsoup4>=4.12",
  "lxml>=4.9",  # XML parser for sitemap
  "feedparser>=6.0",  # RSS feed parsing for BBC scraping
  "datasketch>=1.6",  # MinHash LSH for near-duplicate detection
]

[project.optional-dependencies]
dev = [
  # Testing
  "pytest>=7.4",
  "pytest-cov>=4.1",
  "pytest-timeout>=2.1",

  # Linting & Formatting
  "ruff>=0.1.0",

  # Type Checking
  "mypy>=1.7",
  "types-requests>=2.31",
  "types-beautifulsoup4>=4.12",

  # Development Tools
  "ipython>=8.12",
  "ipdb>=0.13",
]

config = [
  # Configuration Management
  "pydantic>=2.5",
  "pydantic-settings>=2.1",
  "python-dotenv>=1.0",
]

mlops = [
  # Experiment Tracking & Model Registry
  "mlflow>=2.9",
  "wandb>=0.16",

  # Workflow Orchestration
  "prefect>=2.14",

  # Data Validation
  "great-expectations>=0.18",
]

ml = [
  # Machine Learning
  "torch>=2.1",
  "transformers>=4.36",
  "scikit-learn>=1.3",
  "datasets>=2.16",
]

all = [
  "somali-dialect-classifier[dev,config,mlops,ml]",
]

[project.scripts]
wikisom-download = "somali_dialect_classifier.cli.download_wikisom:main"
bbcsom-download = "somali_dialect_classifier.cli.download_bbcsom:main"
hfsom-download = "somali_dialect_classifier.cli.download_hfsom:main"
spraksom-download = "somali_dialect_classifier.cli.download_sprakbankensom:main"
somali-orchestrate = "somali_dialect_classifier.orchestration.flows:main"
somali-deploy-dashboard = "somali_dialect_classifier.cli.deploy_dashboard:main"

[tool.hatch.build.targets.wheel]
packages = ["src/somali_dialect_classifier"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
]
ignore = [
  "E501",  # line too long (handled by formatter)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
  "-v",
  "--strict-markers",
  "--tb=short",
]
timeout = 300
markers = [
  "integration: marks tests as integration tests (may require network access)",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
  "tqdm",
  "pyarrow.*",
  "bs4",
  "datasketch",
  "feedparser",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
  "*/tests/*",
  "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
